{
    "contractName": "StrategyCollectionOffer",
    "abi": [
      {
        "inputs": [],
        "name": "MerkleProofInvalid",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "OrderInvalid",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "isLooksRareV2Strategy",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "pure",
        "type": "function"
      },
      {
        "inputs": [
          {
            "components": [
              {
                "internalType": "address",
                "name": "recipient",
                "type": "address"
              },
              {
                "internalType": "bytes",
                "name": "additionalParameters",
                "type": "bytes"
              }
            ],
            "internalType": "struct OrderStructs.Taker",
            "name": "takerAsk",
            "type": "tuple"
          },
          {
            "components": [
              {
                "internalType": "enum QuoteType",
                "name": "quoteType",
                "type": "uint8"
              },
              {
                "internalType": "uint256",
                "name": "globalNonce",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "subsetNonce",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "orderNonce",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "strategyId",
                "type": "uint256"
              },
              {
                "internalType": "enum CollectionType",
                "name": "collectionType",
                "type": "uint8"
              },
              {
                "internalType": "address",
                "name": "collection",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "currency",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "signer",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "startTime",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "endTime",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "price",
                "type": "uint256"
              },
              {
                "internalType": "uint256[]",
                "name": "itemIds",
                "type": "uint256[]"
              },
              {
                "internalType": "uint256[]",
                "name": "amounts",
                "type": "uint256[]"
              },
              {
                "internalType": "bytes",
                "name": "additionalParameters",
                "type": "bytes"
              }
            ],
            "internalType": "struct OrderStructs.Maker",
            "name": "makerBid",
            "type": "tuple"
          }
        ],
        "name": "executeCollectionStrategyWithTakerAsk",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "price",
            "type": "uint256"
          },
          {
            "internalType": "uint256[]",
            "name": "itemIds",
            "type": "uint256[]"
          },
          {
            "internalType": "uint256[]",
            "name": "amounts",
            "type": "uint256[]"
          },
          {
            "internalType": "bool",
            "name": "isNonceInvalidated",
            "type": "bool"
          }
        ],
        "stateMutability": "pure",
        "type": "function"
      },
      {
        "inputs": [
          {
            "components": [
              {
                "internalType": "address",
                "name": "recipient",
                "type": "address"
              },
              {
                "internalType": "bytes",
                "name": "additionalParameters",
                "type": "bytes"
              }
            ],
            "internalType": "struct OrderStructs.Taker",
            "name": "takerAsk",
            "type": "tuple"
          },
          {
            "components": [
              {
                "internalType": "enum QuoteType",
                "name": "quoteType",
                "type": "uint8"
              },
              {
                "internalType": "uint256",
                "name": "globalNonce",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "subsetNonce",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "orderNonce",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "strategyId",
                "type": "uint256"
              },
              {
                "internalType": "enum CollectionType",
                "name": "collectionType",
                "type": "uint8"
              },
              {
                "internalType": "address",
                "name": "collection",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "currency",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "signer",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "startTime",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "endTime",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "price",
                "type": "uint256"
              },
              {
                "internalType": "uint256[]",
                "name": "itemIds",
                "type": "uint256[]"
              },
              {
                "internalType": "uint256[]",
                "name": "amounts",
                "type": "uint256[]"
              },
              {
                "internalType": "bytes",
                "name": "additionalParameters",
                "type": "bytes"
              }
            ],
            "internalType": "struct OrderStructs.Maker",
            "name": "makerBid",
            "type": "tuple"
          }
        ],
        "name": "executeCollectionStrategyWithTakerAskWithProof",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "price",
            "type": "uint256"
          },
          {
            "internalType": "uint256[]",
            "name": "itemIds",
            "type": "uint256[]"
          },
          {
            "internalType": "uint256[]",
            "name": "amounts",
            "type": "uint256[]"
          },
          {
            "internalType": "bool",
            "name": "isNonceInvalidated",
            "type": "bool"
          }
        ],
        "stateMutability": "pure",
        "type": "function"
      },
      {
        "inputs": [
          {
            "components": [
              {
                "internalType": "enum QuoteType",
                "name": "quoteType",
                "type": "uint8"
              },
              {
                "internalType": "uint256",
                "name": "globalNonce",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "subsetNonce",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "orderNonce",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "strategyId",
                "type": "uint256"
              },
              {
                "internalType": "enum CollectionType",
                "name": "collectionType",
                "type": "uint8"
              },
              {
                "internalType": "address",
                "name": "collection",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "currency",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "signer",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "startTime",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "endTime",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "price",
                "type": "uint256"
              },
              {
                "internalType": "uint256[]",
                "name": "itemIds",
                "type": "uint256[]"
              },
              {
                "internalType": "uint256[]",
                "name": "amounts",
                "type": "uint256[]"
              },
              {
                "internalType": "bytes",
                "name": "additionalParameters",
                "type": "bytes"
              }
            ],
            "internalType": "struct OrderStructs.Maker",
            "name": "makerBid",
            "type": "tuple"
          },
          {
            "internalType": "bytes4",
            "name": "functionSelector",
            "type": "bytes4"
          }
        ],
        "name": "isMakerOrderValid",
        "outputs": [
          {
            "internalType": "bool",
            "name": "isValid",
            "type": "bool"
          },
          {
            "internalType": "bytes4",
            "name": "errorSelector",
            "type": "bytes4"
          }
        ],
        "stateMutability": "pure",
        "type": "function"
      }
    ],
    "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"MerkleProofInvalid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OrderInvalid\",\"type\":\"error\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"additionalParameters\",\"type\":\"bytes\"}],\"internalType\":\"struct OrderStructs.Taker\",\"name\":\"takerAsk\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum QuoteType\",\"name\":\"quoteType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"globalNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"subsetNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"orderNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"strategyId\",\"type\":\"uint256\"},{\"internalType\":\"enum CollectionType\",\"name\":\"collectionType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"itemIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"additionalParameters\",\"type\":\"bytes\"}],\"internalType\":\"struct OrderStructs.Maker\",\"name\":\"makerBid\",\"type\":\"tuple\"}],\"name\":\"executeCollectionStrategyWithTakerAsk\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"itemIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"isNonceInvalidated\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"additionalParameters\",\"type\":\"bytes\"}],\"internalType\":\"struct OrderStructs.Taker\",\"name\":\"takerAsk\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum QuoteType\",\"name\":\"quoteType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"globalNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"subsetNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"orderNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"strategyId\",\"type\":\"uint256\"},{\"internalType\":\"enum CollectionType\",\"name\":\"collectionType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"itemIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"additionalParameters\",\"type\":\"bytes\"}],\"internalType\":\"struct OrderStructs.Maker\",\"name\":\"makerBid\",\"type\":\"tuple\"}],\"name\":\"executeCollectionStrategyWithTakerAskWithProof\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"itemIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"isNonceInvalidated\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLooksRareV2Strategy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum QuoteType\",\"name\":\"quoteType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"globalNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"subsetNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"orderNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"strategyId\",\"type\":\"uint256\"},{\"internalType\":\"enum CollectionType\",\"name\":\"collectionType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"itemIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"additionalParameters\",\"type\":\"bytes\"}],\"internalType\":\"struct OrderStructs.Maker\",\"name\":\"makerBid\",\"type\":\"tuple\"},{\"internalType\":\"bytes4\",\"name\":\"functionSelector\",\"type\":\"bytes4\"}],\"name\":\"isMakerOrderValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isValid\",\"type\":\"bool\"},{\"internalType\":\"bytes4\",\"name\":\"errorSelector\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"LooksRare protocol team (\\ud83d\\udc40,\\ud83d\\udc8e)\",\"details\":\"Use cases can include trait-based offers or rarity score offers.\",\"kind\":\"dev\",\"methods\":{\"executeCollectionStrategyWithTakerAsk((address,bytes),(uint8,uint256,uint256,uint256,uint256,uint8,address,address,address,uint256,uint256,uint256,uint256[],uint256[],bytes))\":{\"params\":{\"makerBid\":\"Maker bid struct (maker bid-specific parameters for the execution)\",\"takerAsk\":\"Taker ask struct (taker ask-specific parameters for the execution)\"}},\"executeCollectionStrategyWithTakerAskWithProof((address,bytes),(uint8,uint256,uint256,uint256,uint256,uint8,address,address,address,uint256,uint256,uint256,uint256[],uint256[],bytes))\":{\"details\":\"The transaction reverts if the maker does not include a merkle root in the additionalParameters.\",\"params\":{\"makerBid\":\"Maker bid struct (maker bid-specific parameters for the execution)\",\"takerAsk\":\"Taker ask struct (taker ask-specific parameters for the execution)\"}},\"isLooksRareV2Strategy()\":{\"returns\":{\"_0\":\"Whether it is a LooksRare V2 protocol strategy\"}},\"isMakerOrderValid((uint8,uint256,uint256,uint256,uint256,uint8,address,address,address,uint256,uint256,uint256,uint256[],uint256[],bytes),bytes4)\":{\"params\":{\"functionSelector\":\"Function selector for the strategy\",\"makerOrder\":\"Maker struct (maker specific parameters for the execution)\"},\"returns\":{\"errorSelector\":\"If isValid is false, it returns the error's 4 bytes selector\",\"isValid\":\"Whether the maker struct is valid\"}}},\"title\":\"StrategyCollectionOffer\",\"version\":1},\"userdoc\":{\"errors\":{\"MerkleProofInvalid()\":[{\"notice\":\"It is returned if the merkle proof provided is invalid.\"}],\"OrderInvalid()\":[{\"notice\":\"It is returned if the order is permanently invalid.         There may be an issue with the order formatting.\"}]},\"kind\":\"user\",\"methods\":{\"executeCollectionStrategyWithTakerAsk((address,bytes),(uint8,uint256,uint256,uint256,uint256,uint8,address,address,address,uint256,uint256,uint256,uint256[],uint256[],bytes))\":{\"notice\":\"This function validates the order under the context of the chosen strategy and         returns the fulfillable items/amounts/price/nonce invalidation status.         This strategy executes a collection offer against a taker ask order without the need of merkle proofs.\"},\"executeCollectionStrategyWithTakerAskWithProof((address,bytes),(uint8,uint256,uint256,uint256,uint256,uint8,address,address,address,uint256,uint256,uint256,uint256[],uint256[],bytes))\":{\"notice\":\"This function validates the order under the context of the chosen strategy         and returns the fulfillable items/amounts/price/nonce invalidation status.         This strategy executes a collection offer against a taker ask order with the need of a merkle proof.\"},\"isLooksRareV2Strategy()\":{\"notice\":\"This function acts as a safety check for the protocol's owner when adding new execution strategies.\"},\"isMakerOrderValid((uint8,uint256,uint256,uint256,uint256,uint8,address,address,address,uint256,uint256,uint256,uint256[],uint256[],bytes),bytes4)\":{\"notice\":\"Validate *only the maker* order under the context of the chosen strategy. It does not revert if         the maker order is invalid. Instead it returns false and the error's 4 bytes selector.\"}},\"notice\":\"This contract offers execution strategies for users to create maker bid offers for items in a collection.         There are two available functions:         1. executeCollectionStrategyWithTakerAsk --> it applies to all itemIds in a collection         2. executeCollectionStrategyWithTakerAskWithProof --> it allows adding merkle proof criteria.The bidder can only bid on 1 item id at a time.         1. If ERC721, the amount must be 1.         2. If ERC1155, the amount can be greater than 1.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"project:/contracts/Looksrare.sol\":\"StrategyCollectionOffer\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"project:/contracts/Looksrare.sol\":{\"keccak256\":\"0x94ecc25de2b851ffa81c9387f3d163a7ba2a15a93859566ceca2e6f619be7b46\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4ce23637f4b8a40b4948541a3e4b6edf94f818fc305e85fe0a264d510aa02ad8\",\"dweb:/ipfs/QmPThabVuaPyBFc74invyZmpdDZH7hw1uRmeaMfKDxAcGk\"]}},\"version\":1}",
    "bytecode": "0x608060405234801561001057600080fd5b50610814806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806345b2b381146100515780637e8971471461006557806384ad8c47146100895780639e97d1931461009c575b600080fd5b604051600181526020015b60405180910390f35b6100786100733660046104a4565b6100cf565b60405161005c959493929190610510565b6100786100973660046104a4565b61017c565b6100af6100aa36600461059c565b6102a3565b6040805192151583526001600160e01b031990911660208301520161005c565b6101608101356060366000806100e96101a08701876105fb565b90935091506001821461010f57604051632e0c0f7160e01b815260040160405180910390fd5b600061011e6020890189610645565b81019061012b919061068c565b604080516001808252818301909252919250602080830190803683370190505094508085600081518110610161576101616106bb565b60200260200101818152505060019150509295509295909350565b6101608101356060366000806101966101a08701876105fb565b9093509150600182146101bc57604051632e0c0f7160e01b815260040160405180910390fd5b6000806101cc60208a018a610645565b8101906101d991906106d1565b604080516001808252818301909252929450909250602080830190803683370190505095508186600081518110610212576102126106bb565b60209081029190910101526001925060006102316101c08a018a610645565b81019061023e919061068c565b905060008360405160200161025591815260200190565b6040516020818303038152906040528051906020012090506102788383836103d3565b6102955760405163c8ac23c360e01b815260040160405180910390fd5b505050509295509295909350565b6000806001600160e01b031983166384ad8c4760e01b148015906102d857506001600160e01b03198316637e89714760e01b14155b156102eb5750636314f89960e01b6103cc565b60006102fa60208601866107c1565b600181111561030b5761030b61079b565b1461031e575063d641ac7b60e01b6103cc565b61032c6101a08501856105fb565b90506001146103435750632e0c0f7160e01b6103cc565b6103846103546101a08601866105fb565b6000818110610365576103656106bb565b905060200201358560a001602081019061037f91906107c1565b6103e9565b6001600160e01b031983166384ad8c4760e01b1480156103b457506103ad6101c0850185610645565b9050602014155b156103c75750632e0c0f7160e01b6103cc565b600191505b9250929050565b6000826103e08584610411565b14949350505050565b801560018318168215171561040d576000808052632e0c0f7160e01b602052604090f35b5050565b81516000908290825b8181101561044f5761044583878381518110610438576104386106bb565b6020026020010151610459565b925060010161041a565b5090949350505050565b6000818310610475576000828152602084905260409020610484565b60008381526020839052604090205b9392505050565b60006101e0828403121561049e57600080fd5b50919050565b600080604083850312156104b757600080fd5b823567ffffffffffffffff808211156104cf57600080fd5b90840190604082870312156104e357600080fd5b909250602084013590808211156104f957600080fd5b506105068582860161048b565b9150509250929050565b600060808201878352602060808185015281885180845260a086019150828a01935060005b8181101561055157845183529383019391830191600101610535565b505084810360408601528681526001600160fb1b0387111561057257600080fd5b8660051b9250828883830137909101019050610592606083018415159052565b9695505050505050565b600080604083850312156105af57600080fd5b823567ffffffffffffffff8111156105c657600080fd5b6105d28582860161048b565b92505060208301356001600160e01b0319811681146105f057600080fd5b809150509250929050565b6000808335601e1984360301811261061257600080fd5b83018035915067ffffffffffffffff82111561062d57600080fd5b6020019150600581901b36038213156103cc57600080fd5b6000808335601e1984360301811261065c57600080fd5b83018035915067ffffffffffffffff82111561067757600080fd5b6020019150368190038213156103cc57600080fd5b60006020828403121561069e57600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600080604083850312156106e457600080fd5b8235915060208084013567ffffffffffffffff8082111561070457600080fd5b818601915086601f83011261071857600080fd5b81358181111561072a5761072a6106a5565b8060051b604051601f19603f8301168101818110858211171561074f5761074f6106a5565b60405291825284820192508381018501918983111561076d57600080fd5b938501935b8285101561078b57843584529385019392850192610772565b8096505050505050509250929050565b634e487b7160e01b600052602160045260246000fd5b600281106107be57600080fd5b50565b6000602082840312156107d357600080fd5b8135610484816107b156fea264697066735822122095a73cad5d0ccb16d42155ac79872aeb9862d28fc0b74f7f318d73c92af85f2164736f6c63430008110033"
  }