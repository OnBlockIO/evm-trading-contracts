{
  "address": "0x99AEECF3717ec6B369d847e3D62d14e14251e4d4",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "__OperatorRole_init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "addOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "removeOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "bytes4",
                  "name": "assetClass",
                  "type": "bytes4"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ],
              "internalType": "struct LibAsset.AssetType",
              "name": "assetType",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "internalType": "struct LibAsset.Asset",
          "name": "asset",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "transfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xcec6c3aa34e703061f6cdecdfad1b044112467140f5a3260a73a522f38ae4eab",
  "receipt": {
    "to": null,
    "from": "0xe1dC719A1595D0a4F4F311a671dB82A82624ECfD",
    "contractAddress": "0x99AEECF3717ec6B369d847e3D62d14e14251e4d4",
    "transactionIndex": 6,
    "gasUsed": "673258",
    "logsBloom": "0x
    "blockHash": "0xaee9493c996e6a734e40cd941e2d2d1ddafe5182465223c659e2d8e89aec74a4",
    "transactionHash": "0xcec6c3aa34e703061f6cdecdfad1b044112467140f5a3260a73a522f38ae4eab",
    "logs": [],
    "blockNumber": 14766213,
    "cumulativeGasUsed": "1498807",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "8b3f23708baa7eccc06d06092456eee1",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"__OperatorRole_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"addOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"removeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"assetClass\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct LibAsset.AssetType\",\"name\":\"assetType\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct LibAsset.Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/PunkTransferProxy.sol\":\"PunkTransferProxy\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb419e68addcb82ecda3ad3974b0d2db76435ce9b08435a04d5b119a0c5d45ea5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xd8e4eb08dcc1d1860fb347ba5ffd595242b9a1b66d49a47f2b4cb51c3f35017e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfc5ea91fa9ceb1961023b2a6c978b902888c52b90847ac7813fe3b79524165f6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xbbf8a21b9a66c48d45ff771b8563c6df19ba451d63dfb8380a865c1e1f29d1a0\",\"license\":\"MIT\"},\"src/OperatorRole.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\ncontract OperatorRole is OwnableUpgradeable {\\n    mapping(address => bool) operators;\\n\\n    function __OperatorRole_init() external initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function addOperator(address operator) external onlyOwner {\\n        operators[operator] = true;\\n    }\\n\\n    function removeOperator(address operator) external onlyOwner {\\n        operators[operator] = false;\\n    }\\n\\n    modifier onlyOperator() {\\n        require(operators[_msgSender()], \\\"OperatorRole: caller is not the operator\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x67c09ae1802a98e3c0b9ab4098121659ad36821dd58f7b2a49e45d446e25605e\",\"license\":\"MIT\"},\"src/PunkTransferProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.9 <0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"./interfaces/ITransferProxy.sol\\\";\\nimport \\\"./interfaces/ICryptoPunksMarket.sol\\\";\\nimport \\\"./OperatorRole.sol\\\";\\n\\ncontract PunkTransferProxy is OperatorRole, ITransferProxy {\\n\\n    function transfer(LibAsset.Asset memory asset, address from, address to) override onlyOperator external {\\n        (address token, uint punkIndex) = abi.decode(asset.assetType.data, (address, uint));\\n        ICryptoPunksMarket punkToken = ICryptoPunksMarket(token);\\n        //check punk from real owner\\n        require(punkToken.punkIndexToAddress(punkIndex) == from, \\\"Seller not punk owner\\\");\\n        //buy punk to proxy, now proxy is owner\\n        punkToken.buyPunk(punkIndex);\\n        //Transfer ownership of a punk to buyer\\n        punkToken.transferPunk(to, punkIndex);\\n    }\\n}\\n\",\"keccak256\":\"0x4afbc6ee315dc994a2dd65d0d60d6364fd474dfbee42db51b80e4809f49d37a6\",\"license\":\"MIT\"},\"src/interfaces/ICryptoPunksMarket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.9 <0.8.0;\\npragma abicoder v2;\\n\\ninterface ICryptoPunksMarket {\\n    //to get address punk owner from mapping (uint => address) public punkIndexToAddress;\\n    function punkIndexToAddress(uint key) external returns (address);\\n\\n    function buyPunk(uint punkIndex) payable external;\\n\\n    function transferPunk(address to, uint punkIndex) external;\\n\\n    function offerPunkForSaleToAddress(uint punkIndex, uint minSalePriceInWei, address toAddress) external;\\n}\",\"keccak256\":\"0xdde09eb30472fa2a29efedf32924395120060047f9288311548ce04e6c023fc8\",\"license\":\"MIT\"},\"src/interfaces/ITransferProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"../lib/LibAsset.sol\\\";\\n\\ninterface ITransferProxy {\\n    function transfer(\\n        LibAsset.Asset calldata asset,\\n        address from,\\n        address to\\n    ) external;\\n}\\n\",\"keccak256\":\"0xbf2620b4a1926bed5ed5944585f14d7199e880a8ff0c267ddb2085f058bb8467\",\"license\":\"MIT\"},\"src/lib/LibAsset.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nlibrary LibAsset {\\n    bytes4 public constant ETH_ASSET_CLASS = bytes4(keccak256(\\\"ETH\\\"));\\n    bytes4 public constant ERC20_ASSET_CLASS = bytes4(keccak256(\\\"ERC20\\\"));\\n    bytes4 public constant ERC721_ASSET_CLASS = bytes4(keccak256(\\\"ERC721\\\"));\\n    bytes4 public constant ERC1155_ASSET_CLASS = bytes4(keccak256(\\\"ERC1155\\\"));\\n    bytes4 public constant _GHOSTMARKET_NFT_ROYALTIES = bytes4(keccak256(\\\"_GHOSTMARKET_NFT_ROYALTIES\\\"));\\n    bytes4 public constant COLLECTION = bytes4(keccak256(\\\"COLLECTION\\\"));\\n    bytes4 public constant CRYPTO_PUNKS = bytes4(keccak256(\\\"CRYPTO_PUNKS\\\"));\\n\\n    bytes32 constant ASSET_TYPE_TYPEHASH = keccak256(\\\"AssetType(bytes4 assetClass,bytes data)\\\");\\n\\n    bytes32 constant ASSET_TYPEHASH =\\n        keccak256(\\\"Asset(AssetType assetType,uint256 value)AssetType(bytes4 assetClass,bytes data)\\\");\\n\\n    struct AssetType {\\n        bytes4 assetClass;\\n        bytes data;\\n    }\\n\\n    struct Asset {\\n        AssetType assetType;\\n        uint256 value;\\n    }\\n\\n    function hash(AssetType memory assetType) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(ASSET_TYPE_TYPEHASH, assetType.assetClass, keccak256(assetType.data)));\\n    }\\n\\n    function hash(Asset memory asset) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(ASSET_TYPEHASH, hash(asset.assetType), asset.value));\\n    }\\n}\\n\",\"keccak256\":\"0x378487d4147e2d579a24c4e07e3a4421784256a3c389d2c8899f0500d9a5dd7b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610b38806100206000396000f3fe608060405234801561001057600080fd5b506004361061006d5760003560e01c80632ff26a0a1461007257806354bc0cf11461007c578063715018a61461008f5780638da5cb5b146100975780639870d7fe146100b5578063ac8a584a146100c8578063f2fde38b146100db575b600080fd5b61007a6100ee565b005b61007a61008a366004610862565b6101a0565b61007a6103a2565b61009f61043c565b6040516100ac91906109a8565b60405180910390f35b61007a6100c33660046107f6565b61044b565b61007a6100d63660046107f6565b6104d1565b61007a6100e93660046107f6565b610554565b600054610100900460ff16806101075750610107610645565b80610115575060005460ff16155b6101505760405162461bcd60e51b815260040180806020018281038252602e815260200180610a6d602e913960400191505060405180910390fd5b600054610100900460ff1615801561017b576000805460ff1961ff0019909116610100171660011790555b610183610656565b61018b6106f6565b801561019d576000805461ff00191690555b50565b606560006101ac6107dd565b6001600160a01b0316815260208101919091526040016000205460ff166102045760405162461bcd60e51b8152600401808060200182810382526028815260200180610adb6028913960400191505060405180910390fd5b6000808460000151602001518060200190518101906102239190610835565b604051630b02f02d60e31b8152919350915082906001600160a01b03808716919083169063581781689061025b908690600401610a04565b602060405180830381600087803b15801561027557600080fd5b505af1158015610289573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ad9190610819565b6001600160a01b0316146102dc5760405162461bcd60e51b81526004016102d3906109d5565b60405180910390fd5b60405163104c9fd360e31b81526001600160a01b03821690638264fe9890610308908590600401610a04565b600060405180830381600087803b15801561032257600080fd5b505af1158015610336573d6000803e3d6000fd5b50506040516322dca8bb60e21b81526001600160a01b0384169250638b72a2ec915061036890879086906004016109bc565b600060405180830381600087803b15801561038257600080fd5b505af1158015610396573d6000803e3d6000fd5b50505050505050505050565b6103aa6107dd565b6001600160a01b03166103bb61043c565b6001600160a01b031614610404576040805162461bcd60e51b81526020600482018190526024820152600080516020610a9b833981519152604482015290519081900360640190fd5b6033546040516000916001600160a01b031690600080516020610abb833981519152908390a3603380546001600160a01b0319169055565b6033546001600160a01b031690565b6104536107dd565b6001600160a01b031661046461043c565b6001600160a01b0316146104ad576040805162461bcd60e51b81526020600482018190526024820152600080516020610a9b833981519152604482015290519081900360640190fd5b6001600160a01b03166000908152606560205260409020805460ff19166001179055565b6104d96107dd565b6001600160a01b03166104ea61043c565b6001600160a01b031614610533576040805162461bcd60e51b81526020600482018190526024820152600080516020610a9b833981519152604482015290519081900360640190fd5b6001600160a01b03166000908152606560205260409020805460ff19169055565b61055c6107dd565b6001600160a01b031661056d61043c565b6001600160a01b0316146105b6576040805162461bcd60e51b81526020600482018190526024820152600080516020610a9b833981519152604482015290519081900360640190fd5b6001600160a01b0381166105fb5760405162461bcd60e51b8152600401808060200182810382526026815260200180610a476026913960400191505060405180910390fd5b6033546040516001600160a01b03808416921690600080516020610abb83398151915290600090a3603380546001600160a01b0319166001600160a01b0392909216919091179055565b6000610650306107e1565b15905090565b600054610100900460ff168061066f575061066f610645565b8061067d575060005460ff16155b6106b85760405162461bcd60e51b815260040180806020018281038252602e815260200180610a6d602e913960400191505060405180910390fd5b600054610100900460ff1615801561018b576000805460ff1961ff001990911661010017166001179055801561019d576000805461ff001916905550565b600054610100900460ff168061070f575061070f610645565b8061071d575060005460ff16155b6107585760405162461bcd60e51b815260040180806020018281038252602e815260200180610a6d602e913960400191505060405180910390fd5b600054610100900460ff16158015610783576000805460ff1961ff0019909116610100171660011790555b600061078d6107dd565b603380546001600160a01b0319166001600160a01b03831690811790915560405191925090600090600080516020610abb833981519152908290a350801561019d576000805461ff001916905550565b3390565b803b15155b919050565b80356107e681610a31565b600060208284031215610807578081fd5b813561081281610a31565b9392505050565b60006020828403121561082a578081fd5b815161081281610a31565b60008060408385031215610847578081fd5b825161085281610a31565b6020939093015192949293505050565b600080600060608486031215610876578081fd5b833567ffffffffffffffff8082111561088d578283fd5b818601915060408083890312156108a2578384fd5b805181810181811084821117156108b557fe5b8083528435848111156108c6578687fd5b8501808b038413156108d6578687fd5b6080830182811086821117156108e857fe5b845280356001600160e01b031981168114610901578788fd5b825260208181013586811115610915578889fd5b8083019250508b601f830112610929578788fd5b81358681111561093557fe5b610947601f8201601f19168301610a0d565b96508087528c8282850101111561095c578889fd5b80828401838901378882828901015250856060850152828452808701358185015283995061098b818c016107eb565b98505050505061099c8188016107eb565b93505050509250925092565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b60208082526015908201527429b2b63632b9103737ba10383ab7359037bbb732b960591b604082015260600190565b90815260200190565b60405181810167ffffffffffffffff81118282101715610a2957fe5b604052919050565b6001600160a01b038116811461019d57600080fdfe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a65644f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65728be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e04f70657261746f72526f6c653a2063616c6c6572206973206e6f7420746865206f70657261746f72a26469706673582212204ee2c5ff60daf313fb81917d8304c4abf5f0fb73ddcea5fbb20f74af4027393a64736f6c63430007060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061006d5760003560e01c80632ff26a0a1461007257806354bc0cf11461007c578063715018a61461008f5780638da5cb5b146100975780639870d7fe146100b5578063ac8a584a146100c8578063f2fde38b146100db575b600080fd5b61007a6100ee565b005b61007a61008a366004610862565b6101a0565b61007a6103a2565b61009f61043c565b6040516100ac91906109a8565b60405180910390f35b61007a6100c33660046107f6565b61044b565b61007a6100d63660046107f6565b6104d1565b61007a6100e93660046107f6565b610554565b600054610100900460ff16806101075750610107610645565b80610115575060005460ff16155b6101505760405162461bcd60e51b815260040180806020018281038252602e815260200180610a6d602e913960400191505060405180910390fd5b600054610100900460ff1615801561017b576000805460ff1961ff0019909116610100171660011790555b610183610656565b61018b6106f6565b801561019d576000805461ff00191690555b50565b606560006101ac6107dd565b6001600160a01b0316815260208101919091526040016000205460ff166102045760405162461bcd60e51b8152600401808060200182810382526028815260200180610adb6028913960400191505060405180910390fd5b6000808460000151602001518060200190518101906102239190610835565b604051630b02f02d60e31b8152919350915082906001600160a01b03808716919083169063581781689061025b908690600401610a04565b602060405180830381600087803b15801561027557600080fd5b505af1158015610289573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ad9190610819565b6001600160a01b0316146102dc5760405162461bcd60e51b81526004016102d3906109d5565b60405180910390fd5b60405163104c9fd360e31b81526001600160a01b03821690638264fe9890610308908590600401610a04565b600060405180830381600087803b15801561032257600080fd5b505af1158015610336573d6000803e3d6000fd5b50506040516322dca8bb60e21b81526001600160a01b0384169250638b72a2ec915061036890879086906004016109bc565b600060405180830381600087803b15801561038257600080fd5b505af1158015610396573d6000803e3d6000fd5b50505050505050505050565b6103aa6107dd565b6001600160a01b03166103bb61043c565b6001600160a01b031614610404576040805162461bcd60e51b81526020600482018190526024820152600080516020610a9b833981519152604482015290519081900360640190fd5b6033546040516000916001600160a01b031690600080516020610abb833981519152908390a3603380546001600160a01b0319169055565b6033546001600160a01b031690565b6104536107dd565b6001600160a01b031661046461043c565b6001600160a01b0316146104ad576040805162461bcd60e51b81526020600482018190526024820152600080516020610a9b833981519152604482015290519081900360640190fd5b6001600160a01b03166000908152606560205260409020805460ff19166001179055565b6104d96107dd565b6001600160a01b03166104ea61043c565b6001600160a01b031614610533576040805162461bcd60e51b81526020600482018190526024820152600080516020610a9b833981519152604482015290519081900360640190fd5b6001600160a01b03166000908152606560205260409020805460ff19169055565b61055c6107dd565b6001600160a01b031661056d61043c565b6001600160a01b0316146105b6576040805162461bcd60e51b81526020600482018190526024820152600080516020610a9b833981519152604482015290519081900360640190fd5b6001600160a01b0381166105fb5760405162461bcd60e51b8152600401808060200182810382526026815260200180610a476026913960400191505060405180910390fd5b6033546040516001600160a01b03808416921690600080516020610abb83398151915290600090a3603380546001600160a01b0319166001600160a01b0392909216919091179055565b6000610650306107e1565b15905090565b600054610100900460ff168061066f575061066f610645565b8061067d575060005460ff16155b6106b85760405162461bcd60e51b815260040180806020018281038252602e815260200180610a6d602e913960400191505060405180910390fd5b600054610100900460ff1615801561018b576000805460ff1961ff001990911661010017166001179055801561019d576000805461ff001916905550565b600054610100900460ff168061070f575061070f610645565b8061071d575060005460ff16155b6107585760405162461bcd60e51b815260040180806020018281038252602e815260200180610a6d602e913960400191505060405180910390fd5b600054610100900460ff16158015610783576000805460ff1961ff0019909116610100171660011790555b600061078d6107dd565b603380546001600160a01b0319166001600160a01b03831690811790915560405191925090600090600080516020610abb833981519152908290a350801561019d576000805461ff001916905550565b3390565b803b15155b919050565b80356107e681610a31565b600060208284031215610807578081fd5b813561081281610a31565b9392505050565b60006020828403121561082a578081fd5b815161081281610a31565b60008060408385031215610847578081fd5b825161085281610a31565b6020939093015192949293505050565b600080600060608486031215610876578081fd5b833567ffffffffffffffff8082111561088d578283fd5b818601915060408083890312156108a2578384fd5b805181810181811084821117156108b557fe5b8083528435848111156108c6578687fd5b8501808b038413156108d6578687fd5b6080830182811086821117156108e857fe5b845280356001600160e01b031981168114610901578788fd5b825260208181013586811115610915578889fd5b8083019250508b601f830112610929578788fd5b81358681111561093557fe5b610947601f8201601f19168301610a0d565b96508087528c8282850101111561095c578889fd5b80828401838901378882828901015250856060850152828452808701358185015283995061098b818c016107eb565b98505050505061099c8188016107eb565b93505050509250925092565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b60208082526015908201527429b2b63632b9103737ba10383ab7359037bbb732b960591b604082015260600190565b90815260200190565b60405181810167ffffffffffffffff81118282101715610a2957fe5b604052919050565b6001600160a01b038116811461019d57600080fdfe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a65644f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65728be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e04f70657261746f72526f6c653a2063616c6c6572206973206e6f7420746865206f70657261746f72a26469706673582212204ee2c5ff60daf313fb81917d8304c4abf5f0fb73ddcea5fbb20f74af4027393a64736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 739,
        "contract": "src/PunkTransferProxy.sol:PunkTransferProxy",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 742,
        "contract": "src/PunkTransferProxy.sol:PunkTransferProxy",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 4072,
        "contract": "src/PunkTransferProxy.sol:PunkTransferProxy",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "src/PunkTransferProxy.sol:PunkTransferProxy",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 129,
        "contract": "src/PunkTransferProxy.sol:PunkTransferProxy",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 12217,
        "contract": "src/PunkTransferProxy.sol:PunkTransferProxy",
        "label": "operators",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}