{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlEnumerableUpgradeable.sol\";\nimport \"./AccessControlUpgradeable.sol\";\nimport \"../utils/structs/EnumerableSetUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\n */\nabstract contract AccessControlEnumerableUpgradeable is Initializable, IAccessControlEnumerableUpgradeable, AccessControlUpgradeable {\n    function __AccessControlEnumerable_init() internal onlyInitializing {\n    }\n\n    function __AccessControlEnumerable_init_unchained() internal onlyInitializing {\n    }\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\n\n    mapping(bytes32 => EnumerableSetUpgradeable.AddressSet) private _roleMembers;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlEnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\n        return _roleMembers[role].at(index);\n    }\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\n        return _roleMembers[role].length();\n    }\n\n    /**\n     * @dev Overload {_grantRole} to track enumerable memberships\n     */\n    function _grantRole(bytes32 role, address account) internal virtual override {\n        super._grantRole(role, account);\n        _roleMembers[role].add(account);\n    }\n\n    /**\n     * @dev Overload {_revokeRole} to track enumerable memberships\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual override {\n        super._revokeRole(role, account);\n        _roleMembers[role].remove(account);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlUpgradeable.sol\";\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../utils/StringsUpgradeable.sol\";\nimport \"../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\n    function __AccessControl_init() internal onlyInitializing {\n    }\n\n    function __AccessControl_init_unchained() internal onlyInitializing {\n    }\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        StringsUpgradeable.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        StringsUpgradeable.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlUpgradeable.sol\";\n\n/**\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\n */\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControlUpgradeable {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal onlyInitializing {\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal onlyInitializing {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/ERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC1155Upgradeable.sol\";\nimport \"./IERC1155ReceiverUpgradeable.sol\";\nimport \"./extensions/IERC1155MetadataURIUpgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the basic standard multi-token.\n * See https://eips.ethereum.org/EIPS/eip-1155\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\n *\n * _Available since v3.1._\n */\ncontract ERC1155Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC1155Upgradeable, IERC1155MetadataURIUpgradeable {\n    using AddressUpgradeable for address;\n\n    // Mapping from token ID to account balances\n    mapping(uint256 => mapping(address => uint256)) private _balances;\n\n    // Mapping from account to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\n    string private _uri;\n\n    /**\n     * @dev See {_setURI}.\n     */\n    function __ERC1155_init(string memory uri_) internal onlyInitializing {\n        __ERC1155_init_unchained(uri_);\n    }\n\n    function __ERC1155_init_unchained(string memory uri_) internal onlyInitializing {\n        _setURI(uri_);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\n        return\n            interfaceId == type(IERC1155Upgradeable).interfaceId ||\n            interfaceId == type(IERC1155MetadataURIUpgradeable).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC1155MetadataURI-uri}.\n     *\n     * This implementation returns the same URI for *all* token types. It relies\n     * on the token type ID substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * Clients calling this function must replace the `\\{id\\}` substring with the\n     * actual token type ID.\n     */\n    function uri(uint256) public view virtual override returns (string memory) {\n        return _uri;\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\n        require(account != address(0), \"ERC1155: address zero is not a valid owner\");\n        return _balances[id][account];\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOfBatch}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\n        public\n        view\n        virtual\n        override\n        returns (uint256[] memory)\n    {\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\n\n        uint256[] memory batchBalances = new uint256[](accounts.length);\n\n        for (uint256 i = 0; i < accounts.length; ++i) {\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\n        }\n\n        return batchBalances;\n    }\n\n    /**\n     * @dev See {IERC1155-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC1155-isApprovedForAll}.\n     */\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[account][operator];\n    }\n\n    /**\n     * @dev See {IERC1155-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not token owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }\n\n    /**\n     * @dev See {IERC1155-safeBatchTransferFrom}.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not token owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n        _balances[id][to] += amount;\n\n        emit TransferSingle(operator, from, to, id, amount);\n\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\n\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; ++i) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n            _balances[id][to] += amount;\n        }\n\n        emit TransferBatch(operator, from, to, ids, amounts);\n\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Sets a new URI for all token types, by relying on the token type ID\n     * substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\n     * clients with the token type ID.\n     *\n     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\n     * interpreted by clients as\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\n     * for token type ID 0x4cce0.\n     *\n     * See {uri}.\n     *\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\n     * this function emits no events.\n     */\n    function _setURI(string memory newuri) internal virtual {\n        _uri = newuri;\n    }\n\n    /**\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _mint(\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _balances[id][to] += amount;\n        emit TransferSingle(operator, address(0), to, id, amount);\n\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _mintBatch(\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            _balances[ids[i]][to] += amounts[i];\n        }\n\n        emit TransferBatch(operator, address(0), to, ids, amounts);\n\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens of token type `id` from `from`\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `from` must have at least `amount` tokens of token type `id`.\n     */\n    function _burn(\n        address from,\n        uint256 id,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n\n        emit TransferSingle(operator, from, address(0), id, amount);\n\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     */\n    function _burnBatch(\n        address from,\n        uint256[] memory ids,\n        uint256[] memory amounts\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n        }\n\n        emit TransferBatch(operator, from, address(0), ids, amounts);\n\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC1155: setting approval status for self\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `id` and `amount` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    function _doSafeTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155ReceiverUpgradeable(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\n                if (response != IERC1155ReceiverUpgradeable.onERC1155Received.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _doSafeBatchTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\n                bytes4 response\n            ) {\n                if (response != IERC1155ReceiverUpgradeable.onERC1155BatchReceived.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\n        uint256[] memory array = new uint256[](1);\n        array[0] = element;\n\n        return array;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[47] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155Upgradeable.sol\";\n\n/**\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155MetadataURIUpgradeable is IERC1155Upgradeable {\n    /**\n     * @dev Returns the URI for token type `id`.\n     *\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\n     * clients with the actual token type ID.\n     */\n    function uri(uint256 id) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155Upgradeable is IERC165Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20Upgradeable.sol\";\nimport \"./extensions/IERC20MetadataUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[45] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20PermitUpgradeable {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\nimport \"../extensions/draft-IERC20PermitUpgradeable.sol\";\nimport \"../../../utils/AddressUpgradeable.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20Upgradeable {\n    using AddressUpgradeable for address;\n\n    function safeTransfer(\n        IERC20Upgradeable token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20Upgradeable token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20PermitUpgradeable token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721Upgradeable.sol\";\nimport \"./IERC721ReceiverUpgradeable.sol\";\nimport \"./extensions/IERC721MetadataUpgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../utils/StringsUpgradeable.sol\";\nimport \"../../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\n    using AddressUpgradeable for address;\n    using StringsUpgradeable for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC721_init_unchained(name_, symbol_);\n    }\n\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\n        return\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner nor approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[44] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721Upgradeable.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721ReceiverUpgradeable {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721Upgradeable is IERC165Upgradeable {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary CountersUpgradeable {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ECDSAUpgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * _Available since v3.4._\n *\n * @custom:storage-size 52\n */\nabstract contract EIP712Upgradeable is Initializable {\n    /* solhint-disable var-name-mixedcase */\n    bytes32 private _HASHED_NAME;\n    bytes32 private _HASHED_VERSION;\n    bytes32 private constant _TYPE_HASH = keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\n\n    /* solhint-enable var-name-mixedcase */\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\n        __EIP712_init_unchained(name, version);\n    }\n\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\n        bytes32 hashedName = keccak256(bytes(name));\n        bytes32 hashedVersion = keccak256(bytes(version));\n        _HASHED_NAME = hashedName;\n        _HASHED_VERSION = hashedVersion;\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        return _buildDomainSeparator(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash());\n    }\n\n    function _buildDomainSeparator(\n        bytes32 typeHash,\n        bytes32 nameHash,\n        bytes32 versionHash\n    ) private view returns (bytes32) {\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n\n    /**\n     * @dev The hash of the name parameter for the EIP712 domain.\n     *\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\n     * are a concern.\n     */\n    function _EIP712NameHash() internal virtual view returns (bytes32) {\n        return _HASHED_NAME;\n    }\n\n    /**\n     * @dev The hash of the version parameter for the EIP712 domain.\n     *\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\n     * are a concern.\n     */\n    function _EIP712VersionHash() internal virtual view returns (bytes32) {\n        return _HASHED_VERSION;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.3) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../StringsUpgradeable.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSAUpgradeable {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", StringsUpgradeable.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165StorageUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165Storage.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Storage based implementation of the {IERC165} interface.\n *\n * Contracts may inherit from this and call {_registerInterface} to declare\n * their support of an interface.\n */\nabstract contract ERC165StorageUpgradeable is Initializable, ERC165Upgradeable {\n    function __ERC165Storage_init() internal onlyInitializing {\n    }\n\n    function __ERC165Storage_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev Mapping of interface ids to whether or not it's supported.\n     */\n    mapping(bytes4 => bool) private _supportedInterfaces;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return super.supportsInterface(interfaceId) || _supportedInterfaces[interfaceId];\n    }\n\n    /**\n     * @dev Registers the contract as an implementer of the interface defined by\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\n     * registering its interface id is not required.\n     *\n     * See {IERC165-supportsInterface}.\n     *\n     * Requirements:\n     *\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\n     */\n    function _registerInterface(bytes4 interfaceId) internal virtual {\n        require(interfaceId != 0xffffffff, \"ERC165: invalid interface id\");\n        _supportedInterfaces[interfaceId] = true;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSetUpgradeable {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/ERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC1155/ERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC1155.sol\";\nimport \"./IERC1155Receiver.sol\";\nimport \"./extensions/IERC1155MetadataURI.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of the basic standard multi-token.\n * See https://eips.ethereum.org/EIPS/eip-1155\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\n *\n * _Available since v3.1._\n */\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\n    using Address for address;\n\n    // Mapping from token ID to account balances\n    mapping(uint256 => mapping(address => uint256)) private _balances;\n\n    // Mapping from account to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\n    string private _uri;\n\n    /**\n     * @dev See {_setURI}.\n     */\n    constructor(string memory uri_) {\n        _setURI(uri_);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC1155).interfaceId ||\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC1155MetadataURI-uri}.\n     *\n     * This implementation returns the same URI for *all* token types. It relies\n     * on the token type ID substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * Clients calling this function must replace the `\\{id\\}` substring with the\n     * actual token type ID.\n     */\n    function uri(uint256) public view virtual override returns (string memory) {\n        return _uri;\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\n        require(account != address(0), \"ERC1155: address zero is not a valid owner\");\n        return _balances[id][account];\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOfBatch}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\n        public\n        view\n        virtual\n        override\n        returns (uint256[] memory)\n    {\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\n\n        uint256[] memory batchBalances = new uint256[](accounts.length);\n\n        for (uint256 i = 0; i < accounts.length; ++i) {\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\n        }\n\n        return batchBalances;\n    }\n\n    /**\n     * @dev See {IERC1155-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC1155-isApprovedForAll}.\n     */\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[account][operator];\n    }\n\n    /**\n     * @dev See {IERC1155-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not token owner or approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }\n\n    /**\n     * @dev See {IERC1155-safeBatchTransferFrom}.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not token owner or approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n        _balances[id][to] += amount;\n\n        emit TransferSingle(operator, from, to, id, amount);\n\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\n\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; ++i) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n            _balances[id][to] += amount;\n        }\n\n        emit TransferBatch(operator, from, to, ids, amounts);\n\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Sets a new URI for all token types, by relying on the token type ID\n     * substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\n     * clients with the token type ID.\n     *\n     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\n     * interpreted by clients as\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\n     * for token type ID 0x4cce0.\n     *\n     * See {uri}.\n     *\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\n     * this function emits no events.\n     */\n    function _setURI(string memory newuri) internal virtual {\n        _uri = newuri;\n    }\n\n    /**\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _mint(\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _balances[id][to] += amount;\n        emit TransferSingle(operator, address(0), to, id, amount);\n\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _mintBatch(\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            _balances[ids[i]][to] += amounts[i];\n        }\n\n        emit TransferBatch(operator, address(0), to, ids, amounts);\n\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens of token type `id` from `from`\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `from` must have at least `amount` tokens of token type `id`.\n     */\n    function _burn(\n        address from,\n        uint256 id,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n\n        emit TransferSingle(operator, from, address(0), id, amount);\n\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     */\n    function _burnBatch(\n        address from,\n        uint256[] memory ids,\n        uint256[] memory amounts\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n        }\n\n        emit TransferBatch(operator, from, address(0), ids, amounts);\n\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC1155: setting approval status for self\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `id` and `amount` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    function _doSafeTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non-ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _doSafeBatchTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\n                bytes4 response\n            ) {\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non-ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\n        uint256[] memory array = new uint256[](1);\n        array[0] = element;\n\n        return array;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155.sol\";\n\n/**\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155MetadataURI is IERC1155 {\n    /**\n     * @dev Returns the URI for token type `id`.\n     *\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\n     * clients with the actual token type ID.\n     */\n    function uri(uint256 id) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ERC1155Receiver.sol\";\n\n/**\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\n *\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\n * stuck.\n *\n * @dev _Available since v3.1._\n */\ncontract ERC1155Holder is ERC1155Receiver {\n    function onERC1155Received(\n        address,\n        address,\n        uint256,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(\n        address,\n        address,\n        uint256[] memory,\n        uint256[] memory,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155BatchReceived.selector;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155Receiver.sol\";\nimport \"../../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _ownerOf(tokenId);\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner or approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n     */\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\n        return _owners[tokenId];\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _ownerOf(tokenId) != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\n\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        unchecked {\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\n            // Given that tokens are minted one by one, it is impossible in practice that\n            // this ever happens. Might change if we allow batch minting.\n            // The ERC fails to describe this case.\n            _balances[to] += 1;\n        }\n\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId, 1);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\n\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\n        owner = ERC721.ownerOf(tokenId);\n\n        // Clear approvals\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // Cannot overflow, as that would require more tokens to be burned/transferred\n            // out than the owner initially received through minting and transferring in.\n            _balances[owner] -= 1;\n        }\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId, 1);\n\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n\n        // Clear approvals from the previous owner\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\n            // `from`'s balance is the number of token held, which is at least one before the current\n            // transfer.\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\n            // all 2**256 token ids to be minted, which in practice is impossible.\n            _balances[from] -= 1;\n            _balances[to] += 1;\n        }\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId, 1);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\n     * - When `from` is zero, the tokens will be minted for `to`.\n     * - When `to` is zero, ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256, /* firstTokenId */\n        uint256 batchSize\n    ) internal virtual {\n        if (batchSize > 1) {\n            if (from != address(0)) {\n                _balances[from] -= batchSize;\n            }\n            if (to != address(0)) {\n                _balances[to] += batchSize;\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\n     * - When `from` is zero, the tokens were minted for `to`.\n     * - When `to` is zero, ``from``'s tokens were burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 firstTokenId,\n        uint256 batchSize\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721Receiver.sol\";\n\n/**\n * @dev Implementation of the {IERC721Receiver} interface.\n *\n * Accepts all token transfers.\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\n */\ncontract ERC721Holder is IERC721Receiver {\n    /**\n     * @dev See {IERC721Receiver-onERC721Received}.\n     *\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address,\n        address,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "src/custom-matcher/AssetMatcher.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"../interfaces/IAssetMatcher.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\n\nabstract contract AssetMatcher is Initializable, OwnableUpgradeable {\n    bytes internal constant EMPTY = \"\";\n    mapping(bytes4 => address) internal matchers;\n\n    event MatcherChange(bytes4 indexed assetType, address matcher);\n\n    function setAssetMatcher(bytes4 assetType, address matcher) external onlyOwner {\n        matchers[assetType] = matcher;\n        emit MatcherChange(assetType, matcher);\n    }\n\n    function matchAssets(\n        LibAsset.AssetType memory leftAssetType,\n        LibAsset.AssetType memory rightAssetType\n    ) internal view returns (LibAsset.AssetType memory) {\n        LibAsset.AssetType memory result = matchAssetOneSide(leftAssetType, rightAssetType);\n        if (result.assetClass == 0) {\n            return matchAssetOneSide(rightAssetType, leftAssetType);\n        } else {\n            return result;\n        }\n    }\n\n    function matchAssetOneSide(\n        LibAsset.AssetType memory leftAssetType,\n        LibAsset.AssetType memory rightAssetType\n    ) private view returns (LibAsset.AssetType memory) {\n        bytes4 classLeft = leftAssetType.assetClass;\n        bytes4 classRight = rightAssetType.assetClass;\n        if (classLeft == LibAsset.ETH_ASSET_CLASS) {\n            if (classRight == LibAsset.ETH_ASSET_CLASS) {\n                return leftAssetType;\n            }\n            return LibAsset.AssetType(0, EMPTY);\n        }\n        if (classLeft == LibAsset.ERC20_ASSET_CLASS) {\n            if (classRight == LibAsset.ERC20_ASSET_CLASS) {\n                return simpleMatch(leftAssetType, rightAssetType);\n            }\n            return LibAsset.AssetType(0, EMPTY);\n        }\n        if (classLeft == LibAsset.ERC721_ASSET_CLASS) {\n            if (classRight == LibAsset.ERC721_ASSET_CLASS) {\n                return simpleMatch(leftAssetType, rightAssetType);\n            }\n            return LibAsset.AssetType(0, EMPTY);\n        }\n        if (classLeft == LibAsset.ERC1155_ASSET_CLASS) {\n            if (classRight == LibAsset.ERC1155_ASSET_CLASS) {\n                return simpleMatch(leftAssetType, rightAssetType);\n            }\n            return LibAsset.AssetType(0, EMPTY);\n        }\n        address matcher = matchers[classLeft];\n        if (matcher != address(0)) {\n            return IAssetMatcher(matcher).matchAssets(leftAssetType, rightAssetType);\n        }\n        if (classLeft == classRight) {\n            return simpleMatch(leftAssetType, rightAssetType);\n        }\n        revert(\"not found IAssetMatcher\");\n    }\n\n    function simpleMatch(\n        LibAsset.AssetType memory leftAssetType,\n        LibAsset.AssetType memory rightAssetType\n    ) private pure returns (LibAsset.AssetType memory) {\n        bytes32 leftHash = keccak256(leftAssetType.data);\n        bytes32 rightHash = keccak256(rightAssetType.data);\n        if (leftHash == rightHash) {\n            return leftAssetType;\n        }\n        return LibAsset.AssetType(0, EMPTY);\n    }\n\n    uint256[49] private __gap;\n}\n"
    },
    "src/custom-matcher/AssetMatcherCollection.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"../interfaces/IAssetMatcher.sol\";\nimport \"../librairies/LibERC721LazyMint.sol\";\nimport \"../librairies/LibERC1155LazyMint.sol\";\n\ncontract AssetMatcherCollection is IAssetMatcher {\n    bytes internal constant EMPTY = \"\";\n\n    function matchAssets(\n        LibAsset.AssetType memory leftAssetType,\n        LibAsset.AssetType memory rightAssetType\n    ) external pure override returns (LibAsset.AssetType memory) {\n        if (\n            (rightAssetType.assetClass == LibAsset.ERC721_ASSET_CLASS) ||\n            (rightAssetType.assetClass == LibAsset.ERC1155_ASSET_CLASS) ||\n            (rightAssetType.assetClass == LibERC721LazyMint.ERC721_LAZY_ASSET_CLASS) ||\n            (rightAssetType.assetClass == LibERC1155LazyMint.ERC1155_LAZY_ASSET_CLASS) ||\n            (rightAssetType.assetClass == LibAsset.CRYPTO_PUNKS)\n        ) {\n            address leftToken = abi.decode(leftAssetType.data, (address));\n            (address rightToken, ) = abi.decode(rightAssetType.data, (address, uint));\n            if (leftToken == rightToken) {\n                return LibAsset.AssetType(rightAssetType.assetClass, rightAssetType.data);\n            }\n        }\n        return LibAsset.AssetType(0, EMPTY);\n    }\n}\n"
    },
    "src/custom-matcher/tests/AssetMatcherTest.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"../AssetMatcher.sol\";\n\n/**\n * @dev AssetMatcher.sol is a abstract class and needs to be inherited to be tested\n */\ncontract AssetMatcherTest is Initializable, OwnableUpgradeable, AssetMatcher {\n    function __AssetMatcherTest_init() external initializer {\n        __Ownable_init_unchained();\n    }\n\n    function matchAssetsTest(\n        LibAsset.AssetType calldata leftAssetType,\n        LibAsset.AssetType calldata rightAssetType\n    ) external view returns (LibAsset.AssetType memory) {\n        return matchAssets(leftAssetType, rightAssetType);\n    }\n}\n"
    },
    "src/custom-matcher/tests/TestAssetMatcher.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"../../interfaces/IAssetMatcher.sol\";\n\ncontract TestAssetMatcher is IAssetMatcher {\n    function matchAssets(\n        LibAsset.AssetType memory leftAssetType,\n        LibAsset.AssetType memory rightAssetType\n    ) external pure override returns (LibAsset.AssetType memory) {\n        if (leftAssetType.assetClass == bytes4(keccak256(\"BLA\"))) {\n            address leftToken = abi.decode(leftAssetType.data, (address));\n            address rightToken = abi.decode(rightAssetType.data, (address));\n            if (leftToken == rightToken) {\n                return LibAsset.AssetType(rightAssetType.assetClass, rightAssetType.data);\n            }\n        }\n        return LibAsset.AssetType(0, \"\");\n    }\n}\n"
    },
    "src/exchange-wrapper/ExchangeWrapper.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"./ExchangeWrapperCore.sol\";\n\ncontract ExchangeWrapper is ExchangeWrapperCore {\n    function __ExchangeWrapper_init(\n        address _exchangeV2,\n        address _rarible,\n        address _wyvern,\n        address _seaport,\n        address _x2y2,\n        address _looksrare,\n        address _sudoswap,\n        address _blur\n    ) external initializer {\n        __Context_init_unchained();\n        __Ownable_init_unchained();\n        __Pausable_init_unchained();\n        __ExchangeWrapper_init_unchained(_exchangeV2, _rarible, _wyvern, _seaport, _x2y2, _looksrare, _sudoswap, _blur);\n    }\n}\n"
    },
    "src/exchange-wrapper/ExchangeWrapperCore.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"../librairies/LibTransfer.sol\";\nimport \"../librairies/BpLibrary.sol\";\nimport \"../librairies/LibPart.sol\";\n\nimport \"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\n\nimport \"./interfaces/IWyvernExchange.sol\";\nimport \"./interfaces/IExchangeV2.sol\";\nimport \"./interfaces/ISeaPort.sol\";\nimport \"./interfaces/Ix2y2.sol\";\nimport \"./interfaces/ILooksRare.sol\";\nimport \"./interfaces/IBlurExchange.sol\";\nimport \"./interfaces/IWETH.sol\";\nimport \"./interfaces/ISwapRouterV3.sol\";\nimport \"./interfaces/ISwapRouterV2.sol\";\nimport \"../interfaces/INftTransferProxy.sol\";\nimport \"../interfaces/IERC20TransferProxy.sol\";\n\nabstract contract ExchangeWrapperCore is\n    Initializable,\n    OwnableUpgradeable,\n    PausableUpgradeable,\n    ERC721Holder,\n    ERC1155Holder\n{\n    using LibTransfer for address;\n    using BpLibrary for uint;\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    address public exchangeV2;\n    address public rarible;\n    address public wyvern;\n    address public seaport;\n    address public x2y2;\n    address public looksrare;\n    address public sudoswap;\n    address public blur;\n    ISwapRouterV2 public uniswapRouterV2;\n    ISwapRouterV3 public uniswapRouterV3;\n    address public wrappedToken;\n    address public erc20TransferProxy;\n\n    // mapping market id <> market erc20 proxy\n    mapping(Markets => address) public proxies;\n\n    event Execution(bool result, address indexed sender);\n\n    enum Markets {\n        Rarible,\n        Wyvern,\n        SeaPort,\n        X2Y2,\n        LooksRare,\n        SudoSwap,\n        ExchangeV2,\n        Blur\n    }\n\n    enum AdditionalDataTypes {\n        NoAdditionalData,\n        RoyaltiesAdditionalData\n    }\n\n    /**\n        @notice struct for the purchase data\n        @param marketId - market key from Markets enum (what market to use)\n        @param amount - eth price (amount of eth that needs to be send to the marketplace)\n        @param paymentToken - payment token required for the order\n        @param fees - 2 fees (in base points) that are going to be taken on top of order amount encoded in 1 uint256\n                        bytes (27,28) used for dataType\n                        bytes (29,30) used for the first value (goes to feeRecipientFirst)\n                        bytes (31,32) are used for the second value (goes to feeRecipientSecond)\n        @param data - data for market call\n     */\n    struct PurchaseDetails {\n        Markets marketId;\n        uint256 amount;\n        address paymentToken;\n        uint fees;\n        bytes data;\n    }\n\n    /**\n        @notice struct for the data with additional Ddta\n        @param data - data for market call\n        @param additionalRoyalties - array additional Royalties (in base points plus address Royalty recipient)\n     */\n    struct AdditionalData {\n        bytes data;\n        uint[] additionalRoyalties;\n    }\n\n    /**\n        @notice struct for the swap in v3 data\n        @param path - tokenIn\n        @param amountOut - amountOut\n        @param amountInMaximum - amountInMaximum\n        @param unwrap - unwrap\n     */\n    struct SwapDetailsIn {\n        bytes path;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n        bool unwrap;\n    }\n\n    /**\n        @notice struct for the swap in v2 data\n        @param path - tokenIn\n        @param amountOut - amountOut\n        @param amountInMaximum - amountInMaximum\n        @param binSteps - binSteps\n        @param unwrap - unwrap\n     */\n    struct SwapV2DetailsIn {\n        address[] path;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n        uint256[] binSteps;\n        bool unwrap;\n    }\n\n    function __ExchangeWrapper_init_unchained(\n        address _exchangeV2,\n        address _rarible,\n        address _wyvern,\n        address _seaport,\n        address _x2y2,\n        address _looksrare,\n        address _sudoswap,\n        address _blur\n    ) internal {\n        exchangeV2 = _exchangeV2;\n        rarible = _rarible;\n        wyvern = _wyvern;\n        seaport = _seaport;\n        x2y2 = _x2y2;\n        looksrare = _looksrare;\n        sudoswap = _sudoswap;\n        blur = _blur;\n    }\n\n    /// @notice Pause the contract\n    function pause() public onlyOwner {\n        _pause();\n    }\n\n    /// @notice Unpause the contract\n    function unpause() public onlyOwner {\n        _unpause();\n    }\n\n    /// @notice Set uniswap v2 router\n    function setUniswapV2(ISwapRouterV2 _uniswapRouterV2) external onlyOwner {\n        uniswapRouterV2 = _uniswapRouterV2;\n    }\n\n    /// @notice Set uniswap v3 router\n    function setUniswapV3(ISwapRouterV3 _uniswapRouterV3) external onlyOwner {\n        uniswapRouterV3 = _uniswapRouterV3;\n    }\n\n    /// @notice Set wrapped token\n    function setWrapped(address _wrappedToken) external onlyOwner {\n        wrappedToken = _wrappedToken;\n    }\n\n    /// @notice Set erc20 transfer proxy\n    function setTransferProxy(address _erc20TransferProxy) external onlyOwner {\n        erc20TransferProxy = _erc20TransferProxy;\n    }\n\n    /// @notice Set erc20 proxy for market\n    function setMarketProxy(Markets marketId, address proxy) external onlyOwner {\n        proxies[marketId] = proxy;\n    }\n\n    /**\n        @notice executes a single purchase\n        @param purchaseDetails - details about the purchase (more info in PurchaseDetails struct)\n        @param feeRecipientFirst - address of the first fee recipient\n        @param feeRecipientSecond - address of the second fee recipient\n     */\n    function singlePurchase(\n        PurchaseDetails memory purchaseDetails,\n        address feeRecipientFirst,\n        address feeRecipientSecond\n    ) external payable whenNotPaused {\n        (bool success, uint feeAmountFirst, uint feeAmountSecond) = purchase(purchaseDetails, false);\n        emit Execution(success, _msgSender());\n\n        if (purchaseDetails.paymentToken == address(0)) {\n            transferFee(feeAmountFirst, feeRecipientFirst);\n            transferFee(feeAmountSecond, feeRecipientSecond);\n        } else {\n            transferFeeToken(purchaseDetails.paymentToken, feeAmountFirst, feeRecipientFirst);\n            transferFeeToken(purchaseDetails.paymentToken, feeAmountSecond, feeRecipientSecond);\n\n            transferFeeChange(purchaseDetails.paymentToken);\n        }\n\n        transferChange();\n    }\n\n    /**\n        @notice executes an array of purchases - with swap v2 - tokens for tokens or tokens for eth/weth\n        @param purchaseDetails - array of details about the purchases (more info in PurchaseDetails struct)\n        @param feeRecipientFirst - address of the first fee recipient\n        @param feeRecipientSecond - address of the second fee recipient\n        @param allowFail - true if fails while executing orders are allowed, false if fail of a single order means fail of the whole batch\n        @param swapDetails - swapDetails v2\n     */\n\n    function bulkPurchaseWithV2Swap(\n        PurchaseDetails[] memory purchaseDetails,\n        address feeRecipientFirst,\n        address feeRecipientSecond,\n        bool allowFail,\n        SwapV2DetailsIn memory swapDetails\n    ) external payable whenNotPaused {\n        address tokenIn = swapDetails.path[0];\n        address tokenOut = swapDetails.path[swapDetails.path.length - 1];\n        // tokens for eth or weth\n        if (tokenOut == wrappedToken) {\n            bool isSwapExecuted = swapV2TokensForExactETHOrWETH(swapDetails);\n            require(isSwapExecuted, \"swap not successful\");\n        }\n        // eth or weth for tokens\n        else if (tokenIn == wrappedToken) {\n            bool isSwapExecuted = swapV2ETHOrWETHForExactTokens(swapDetails);\n            require(isSwapExecuted, \"swap not successful\");\n        }\n        // tokens for tokens\n        else {\n            bool isSwapExecuted = swapV2TokensForExactTokens(swapDetails);\n            require(isSwapExecuted, \"swap not successful\");\n        }\n\n        bulkPurchase(purchaseDetails, feeRecipientFirst, feeRecipientSecond, allowFail);\n    }\n\n    /**\n        @notice executes an array of purchases - with swap v3\n        @param purchaseDetails - array of details about the purchases (more info in PurchaseDetails struct)\n        @param feeRecipientFirst - address of the first fee recipient\n        @param feeRecipientSecond - address of the second fee recipient\n        @param allowFail - true if fails while executing orders are allowed, false if fail of a single order means fail of the whole batch\n        @param swapDetails - swapDetails v3\n     */\n\n    function bulkPurchaseWithSwap(\n        PurchaseDetails[] memory purchaseDetails,\n        address feeRecipientFirst,\n        address feeRecipientSecond,\n        bool allowFail,\n        SwapDetailsIn memory swapDetails\n    ) external payable whenNotPaused {\n        bool isSwapExecuted = swapTokensForExactTokens(swapDetails);\n        require(isSwapExecuted, \"swap not successful\");\n        bulkPurchase(purchaseDetails, feeRecipientFirst, feeRecipientSecond, allowFail);\n    }\n\n    /**\n        @notice executes an array of purchases\n        @param purchaseDetails - array of details about the purchases (more info in PurchaseDetails struct)\n        @param feeRecipientFirst - address of the first fee recipient\n        @param feeRecipientSecond - address of the second fee recipient\n        @param allowFail - true if fails while executing orders are allowed, false if fail of a single order means fail of the whole batch\n     */\n\n    function bulkPurchase(\n        PurchaseDetails[] memory purchaseDetails,\n        address feeRecipientFirst,\n        address feeRecipientSecond,\n        bool allowFail\n    ) public payable whenNotPaused {\n        uint sumFirstFees = 0;\n        uint sumSecondFees = 0;\n        bool result = false;\n\n        uint length = purchaseDetails.length;\n        for (uint i; i < length; ++i) {\n            (bool success, uint firstFeeAmount, uint secondFeeAmount) = purchase(purchaseDetails[i], allowFail);\n\n            result = result || success;\n            emit Execution(success, _msgSender());\n\n            if (purchaseDetails[i].paymentToken == address(0)) {\n                sumFirstFees = sumFirstFees + (firstFeeAmount);\n                sumSecondFees = sumSecondFees + (secondFeeAmount);\n            }\n            // erc20 fees transferred right after each purchase to avoid having to store total\n            else {\n                transferFeeToken(purchaseDetails[i].paymentToken, firstFeeAmount, feeRecipientFirst);\n                transferFeeToken(purchaseDetails[i].paymentToken, secondFeeAmount, feeRecipientSecond);\n            }\n        }\n\n        require(result, \"no successful executions\");\n\n        transferFee(sumFirstFees, feeRecipientFirst);\n        transferFee(sumSecondFees, feeRecipientSecond);\n\n        transferFeeChange(purchaseDetails);\n        transferChange();\n    }\n\n    /**\n        @notice executes one purchase\n        @param purchaseDetails - details about the purchase\n        @param allowFail - true if errors are handled, false if revert on errors\n        @return result false if execution failed, true if succeded\n        @return firstFeeAmount amount of the first fee of the purchase, 0 if failed\n        @return secondFeeAmount amount of the second fee of the purchase, 0 if failed\n     */\n    function purchase(PurchaseDetails memory purchaseDetails, bool allowFail) internal returns (bool, uint, uint) {\n        (bytes memory marketData, uint[] memory additionalRoyalties) = getDataAndAdditionalData(\n            purchaseDetails.data,\n            purchaseDetails.fees,\n            purchaseDetails.marketId\n        );\n\n        uint nativeAmountToSend = purchaseDetails.amount;\n\n        (uint firstFeeAmount, uint secondFeeAmount) = getFees(purchaseDetails.fees, purchaseDetails.amount);\n\n        // purchase with ERC20\n        if (purchaseDetails.paymentToken != address(0)) {\n            // Set native value to 0 for ERC20\n            nativeAmountToSend = 0;\n\n            // Check balance in contract as there might be some from swap\n            uint currentBalance = IERC20Upgradeable(purchaseDetails.paymentToken).balanceOf(address(this));\n\n            // set token value to amount + fees\n            uint tokenAmountToSend = purchaseDetails.amount + firstFeeAmount + secondFeeAmount;\n\n            // Move tokenIn to contract and move what's missing if any\n            if (tokenAmountToSend > currentBalance) {\n                IERC20TransferProxy(erc20TransferProxy).erc20safeTransferFrom(\n                    IERC20Upgradeable(purchaseDetails.paymentToken),\n                    _msgSender(),\n                    address(this),\n                    tokenAmountToSend - currentBalance\n                );\n            }\n\n            // Approve tokenIn on market proxy\n            address marketProxy = getMarketProxy(purchaseDetails.marketId);\n            uint256 allowance = IERC20Upgradeable(purchaseDetails.paymentToken).allowance(marketProxy, address(this));\n            if (allowance < tokenAmountToSend) {\n                IERC20Upgradeable(purchaseDetails.paymentToken).approve(address(marketProxy), type(uint256).max);\n            }\n        }\n\n        if (purchaseDetails.marketId == Markets.SeaPort) {\n            (bool success, ) = address(seaport).call{value: nativeAmountToSend}(marketData);\n            if (allowFail) {\n                if (!success) {\n                    return (false, 0, 0);\n                }\n            } else {\n                require(success, \"Purchase Seaport failed\");\n            }\n        }\n        /* else if (purchaseDetails.marketId == Markets.Wyvern) {\n            (bool success, ) = address(wyvern).call{value: nativeAmountToSend}(marketData);\n            if (allowFail) {\n                if (!success) {\n                    return (false, 0, 0);\n                }\n            } else {\n                require(success, \"Purchase Wyvern failed\");\n            }\n        } */\n        else if (purchaseDetails.marketId == Markets.ExchangeV2) {\n            (bool success, ) = address(exchangeV2).call{value: nativeAmountToSend}(marketData);\n            if (allowFail) {\n                if (!success) {\n                    return (false, 0, 0);\n                }\n            } else {\n                require(success, \"Purchase GhostMarket failed\");\n            }\n        } else if (purchaseDetails.marketId == Markets.Rarible) {\n            (bool success, ) = address(rarible).call{value: nativeAmountToSend}(marketData);\n            if (allowFail) {\n                if (!success) {\n                    return (false, 0, 0);\n                }\n            } else {\n                require(success, \"Purchase Rarible failed\");\n            }\n        } else if (purchaseDetails.marketId == Markets.X2Y2) {\n            Ix2y2.RunInput memory input = abi.decode(marketData, (Ix2y2.RunInput));\n\n            if (allowFail) {\n                try Ix2y2(x2y2).run{value: nativeAmountToSend}(input) {} catch {\n                    return (false, 0, 0);\n                }\n            } else {\n                Ix2y2(x2y2).run{value: nativeAmountToSend}(input);\n            }\n\n            // for every element in input.details[] getting\n            // order = input.details[i].orderIdx\n            // and from that order getting item = input.details[i].itemId\n            uint length = input.details.length;\n            for (uint i; i < length; ++i) {\n                uint orderId = input.details[i].orderIdx;\n                uint itemId = input.details[i].itemIdx;\n                bytes memory data = input.orders[orderId].items[itemId].data;\n                {\n                    if (input.orders[orderId].dataMask.length > 0 && input.details[i].dataReplacement.length > 0) {\n                        _arrayReplace(data, input.details[i].dataReplacement, input.orders[orderId].dataMask);\n                    }\n                }\n\n                // 1 = erc-721\n                if (input.orders[orderId].delegateType == 1) {\n                    Ix2y2.Pair721[] memory pairs = abi.decode(data, (Ix2y2.Pair721[]));\n\n                    for (uint256 j = 0; j < pairs.length; j++) {\n                        Ix2y2.Pair721 memory p = pairs[j];\n                        IERC721Upgradeable(address(p.token)).safeTransferFrom(address(this), _msgSender(), p.tokenId);\n                    }\n                } else if (input.orders[orderId].delegateType == 2) {\n                    // 2 = erc-1155\n                    Ix2y2.Pair1155[] memory pairs = abi.decode(data, (Ix2y2.Pair1155[]));\n\n                    for (uint256 j = 0; j < pairs.length; j++) {\n                        Ix2y2.Pair1155 memory p = pairs[j];\n                        IERC1155Upgradeable(address(p.token)).safeTransferFrom(\n                            address(this),\n                            _msgSender(),\n                            p.tokenId,\n                            p.amount,\n                            \"\"\n                        );\n                    }\n                } else {\n                    revert(\"unknown delegateType x2y2\");\n                }\n            }\n        } else if (purchaseDetails.marketId == Markets.LooksRare) {\n            (LibLooksRare.TakerOrder memory takerOrder, LibLooksRare.MakerOrder memory makerOrder, bytes4 typeNft) = abi\n                .decode(marketData, (LibLooksRare.TakerOrder, LibLooksRare.MakerOrder, bytes4));\n            if (allowFail) {\n                try\n                    ILooksRare(looksrare).matchAskWithTakerBidUsingETHAndWETH{value: nativeAmountToSend}(\n                        takerOrder,\n                        makerOrder\n                    )\n                {} catch {\n                    return (false, 0, 0);\n                }\n            } else {\n                ILooksRare(looksrare).matchAskWithTakerBidUsingETHAndWETH{value: nativeAmountToSend}(\n                    takerOrder,\n                    makerOrder\n                );\n            }\n            if (typeNft == LibAsset.ERC721_ASSET_CLASS) {\n                IERC721Upgradeable(makerOrder.collection).safeTransferFrom(\n                    address(this),\n                    _msgSender(),\n                    makerOrder.tokenId\n                );\n            } else if (typeNft == LibAsset.ERC1155_ASSET_CLASS) {\n                IERC1155Upgradeable(makerOrder.collection).safeTransferFrom(\n                    address(this),\n                    _msgSender(),\n                    makerOrder.tokenId,\n                    makerOrder.amount,\n                    \"\"\n                );\n            } else {\n                revert(\"Unknown token type\");\n            }\n        } else if (purchaseDetails.marketId == Markets.SudoSwap) {\n            (bool success, ) = address(sudoswap).call{value: nativeAmountToSend}(marketData);\n            if (allowFail) {\n                if (!success) {\n                    return (false, 0, 0);\n                }\n            } else {\n                require(success, \"Purchase SudoSwap failed\");\n            }\n        } else if (purchaseDetails.marketId == Markets.Blur) {\n            (bool success, ) = address(blur).call{value: nativeAmountToSend}(marketData);\n            if (allowFail) {\n                if (!success) {\n                    return (false, 0, 0);\n                }\n            } else {\n                require(success, \"Purchase blurio failed\");\n            }\n        } else {\n            revert(\"Unknown purchase details\");\n        }\n\n        //transferring royalties\n        transferAdditionalRoyalties(additionalRoyalties, purchaseDetails.amount);\n\n        return (true, firstFeeAmount, secondFeeAmount);\n    }\n\n    /**\n        @notice transfers fee native to feeRecipient\n        @param feeAmount - amount to be transfered\n        @param feeRecipient - address of the recipient\n     */\n    function transferFee(uint feeAmount, address feeRecipient) internal {\n        if (feeAmount > 0 && feeRecipient != address(0)) {\n            LibTransfer.transferEth(feeRecipient, feeAmount);\n        }\n    }\n\n    /**\n        @notice transfers fee token to feeRecipient\n        @param paymentToken - token to be transfered\n        @param feeAmount - amount to be transfered\n        @param feeRecipient - address of the recipient\n     */\n    function transferFeeToken(address paymentToken, uint feeAmount, address feeRecipient) internal {\n        if (feeAmount > 0 && feeRecipient != address(0)) {\n            IERC20Upgradeable(paymentToken).transfer(feeRecipient, feeAmount);\n        }\n    }\n\n    /**\n        @notice transfers change native back to sender\n     */\n    function transferChange() internal {\n        uint ethAmount = address(this).balance;\n        if (ethAmount > 0) {\n            address(msg.sender).transferEth(ethAmount);\n        }\n    }\n\n    /**\n        @notice transfers change fee back to sender\n     */\n    function transferFeeChange(address paymentToken) internal {\n        uint tokenAmount = IERC20Upgradeable(paymentToken).balanceOf(address(this));\n        if (tokenAmount > 0) {\n            IERC20Upgradeable(paymentToken).transfer(_msgSender(), tokenAmount);\n        }\n    }\n\n    /**\n        @notice transfers change fees back to sender\n     */\n    function transferFeeChange(PurchaseDetails[] memory purchaseDetails) internal {\n        uint length = purchaseDetails.length;\n        for (uint i; i < length; ++i) {\n            if (purchaseDetails[i].paymentToken != address(0)) {\n                transferFeeChange(purchaseDetails[i].paymentToken);\n            }\n        }\n    }\n\n    /**\n        @notice return market proxy based on market id\n        @param marketId market id\n        @return address market proxy address\n     */\n    function getMarketProxy(Markets marketId) internal view returns (address) {\n        return proxies[marketId];\n    }\n\n    /**\n        @notice parses fees in base points from one uint and calculates real amount of fees\n        @param fees two fees encoded in one uint, 29 and 30 bytes are used for the first fee, 31 and 32 bytes for second fee\n        @param amount price of the order\n        @return firstFeeAmount real amount for the first fee\n        @return secondFeeAmount real amount for the second fee\n     */\n    function getFees(uint fees, uint amount) internal pure returns (uint, uint) {\n        uint firstFee = uint(uint16(fees >> 16));\n        uint secondFee = uint(uint16(fees));\n        return (amount.bp(firstFee), amount.bp(secondFee));\n    }\n\n    /**\n        @notice parses _data to data for market call and additionalData\n        @param feesAndDataType 27 and 28 bytes for dataType\n        @return marketData data for market call\n        @return additionalRoyalties array uint256, (base point + address)\n     */\n    function getDataAndAdditionalData(\n        bytes memory _data,\n        uint feesAndDataType,\n        Markets marketId\n    ) internal pure returns (bytes memory, uint[] memory) {\n        AdditionalDataTypes dataType = AdditionalDataTypes(uint16(feesAndDataType >> 32));\n        uint[] memory additionalRoyalties;\n\n        //return no royalties if wrong data type\n        if (dataType == AdditionalDataTypes.NoAdditionalData) {\n            return (_data, additionalRoyalties);\n        }\n\n        if (dataType == AdditionalDataTypes.RoyaltiesAdditionalData) {\n            AdditionalData memory additionalData = abi.decode(_data, (AdditionalData));\n\n            //return no royalties if market doesn't support royalties\n            if (supportsRoyalties(marketId)) {\n                return (additionalData.data, additionalData.additionalRoyalties);\n            } else {\n                return (additionalData.data, additionalRoyalties);\n            }\n        }\n\n        revert(\"unknown additionalDataType\");\n    }\n\n    /**\n        @notice transfer additional royalties\n        @param _additionalRoyalties array uint256 (base point + royalty recipient address)\n     */\n    function transferAdditionalRoyalties(uint[] memory _additionalRoyalties, uint amount) internal {\n        uint length = _additionalRoyalties.length;\n        for (uint i; i < length; ++i) {\n            if (_additionalRoyalties[i] > 0) {\n                address payable account = payable(address(uint160(_additionalRoyalties[i])));\n                uint basePoint = uint(_additionalRoyalties[i] >> 160);\n                uint value = amount.bp(basePoint);\n                transferFee(value, account);\n            }\n        }\n    }\n\n    // modifies `src`\n    function _arrayReplace(bytes memory src, bytes memory replacement, bytes memory mask) internal view virtual {\n        require(src.length == replacement.length);\n        require(src.length == mask.length);\n\n        uint256 length = src.length;\n        for (uint256 i; i < length; ++i) {\n            if (mask[i] != 0) {\n                src[i] = replacement[i];\n            }\n        }\n    }\n\n    /**\n        @notice returns true if this contract supports additional royalties for the marketpale\n        now royalties support only for marketId = sudoswap\n    */\n    function supportsRoyalties(Markets marketId) internal pure returns (bool) {\n        if (marketId == Markets.SudoSwap || marketId == Markets.LooksRare) {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * @notice swaps tokens for exact tokens - uniswap v2\n     * @param swapDetails swapDetails required\n     */\n    function swapV2TokensForExactTokens(SwapV2DetailsIn memory swapDetails) internal returns (bool) {\n        // extract tokenIn from path\n        address tokenIn = swapDetails.path[0];\n\n        // Move tokenIn to contract\n        IERC20TransferProxy(erc20TransferProxy).erc20safeTransferFrom(\n            IERC20Upgradeable(tokenIn),\n            _msgSender(),\n            address(this),\n            swapDetails.amountInMaximum\n        );\n\n        // Approve tokenIn on uniswap\n        uint256 allowance = IERC20Upgradeable(tokenIn).allowance(address(uniswapRouterV2), address(this));\n        if (allowance < swapDetails.amountInMaximum) {\n            IERC20Upgradeable(tokenIn).approve(address(uniswapRouterV2), type(uint256).max);\n        }\n\n        // Swap\n        uint256 chainId = block.chainid;\n        bool isAvalanche = chainId == 43114 || chainId == 43113;\n        uint256 amountIn;\n\n        if (isAvalanche) {\n            uint[] memory amounts = uniswapRouterV2.swapTokensForExactTokens(\n                swapDetails.amountOut, // amountOut\n                swapDetails.amountInMaximum, // amountInMaximum\n                swapDetails.binSteps, // binSteps\n                swapDetails.path, // path\n                address(this), // recipient\n                block.timestamp // deadline\n            );\n            amountIn = amounts[0];\n        } else {\n            uint[] memory amounts = uniswapRouterV2.swapTokensForExactTokens(\n                swapDetails.amountOut, // amountOut\n                swapDetails.amountInMaximum, // amountInMaximum\n                swapDetails.path, // path\n                address(this), // recipient\n                block.timestamp // deadline\n            );\n            amountIn = amounts[0];\n        }\n\n        // Refund tokenIn left if any\n        if (amountIn < swapDetails.amountInMaximum) {\n            IERC20Upgradeable(tokenIn).transfer(_msgSender(), swapDetails.amountInMaximum - amountIn);\n        }\n\n        return true;\n    }\n\n    /**\n     * @notice swaps tokens for exact ETH or WETH - uniswap v2\n     * @param swapDetails swapDetails required\n     */\n    function swapV2TokensForExactETHOrWETH(SwapV2DetailsIn memory swapDetails) internal returns (bool) {\n        // extract tokenIn / tokenOut from path\n        address tokenIn = swapDetails.path[0];\n        address tokenOut = swapDetails.path[swapDetails.path.length - 1];\n\n        // Move tokenIn to contract\n        IERC20TransferProxy(erc20TransferProxy).erc20safeTransferFrom(\n            IERC20Upgradeable(tokenIn),\n            _msgSender(),\n            address(this),\n            swapDetails.amountInMaximum\n        );\n\n        // if source = wrapped and destination = native, unwrap and return\n        if (tokenIn == wrappedToken && swapDetails.unwrap) {\n            try IWETH(wrappedToken).withdraw(swapDetails.amountInMaximum) {} catch {\n                return false;\n            }\n            return true;\n        }\n\n        // if source = native and destination = wrapped, wrap and return\n        if (msg.value > 0 && tokenOut == wrappedToken) {\n            try IWETH(wrappedToken).deposit{value: msg.value}() {} catch {\n                return false;\n            }\n            return true;\n        }\n\n        // Approve tokenIn on uniswap\n        uint256 allowance = IERC20Upgradeable(tokenIn).allowance(address(uniswapRouterV2), address(this));\n        if (allowance < swapDetails.amountInMaximum) {\n            IERC20Upgradeable(tokenIn).approve(address(uniswapRouterV2), type(uint256).max);\n        }\n\n        // Swap\n        uint256 chainId = block.chainid;\n        bool isAvalanche = chainId == 43114 || chainId == 43113;\n        uint256 amountIn;\n        uint256 balanceEthBefore = address(this).balance;\n\n        if (isAvalanche) {\n            uint[] memory amounts = uniswapRouterV2.swapTokensForExactAVAX(\n                swapDetails.amountOut, // amountOut\n                swapDetails.amountInMaximum, // amountInMaximum\n                swapDetails.binSteps, // binSteps\n                swapDetails.path, // path\n                payable(address(this)), // recipient\n                block.timestamp // deadline\n            );\n            amountIn = amounts[0];\n        } else {\n            uint[] memory amounts = uniswapRouterV2.swapTokensForExactETH(\n                swapDetails.amountOut, // amountOut\n                swapDetails.amountInMaximum, // amountInMaximum\n                swapDetails.path, // path\n                payable(address(this)), // recipient\n                block.timestamp // deadline\n            );\n            amountIn = amounts[0];\n        }\n\n        uint256 balanceEthAfter = address(this).balance;\n\n        // Refund tokenIn left if any\n        if (amountIn < swapDetails.amountInMaximum) {\n            IERC20Upgradeable(tokenIn).transfer(_msgSender(), swapDetails.amountInMaximum - amountIn);\n        }\n\n        // Wrap if required\n        if (swapDetails.unwrap) {\n            try IWETH(wrappedToken).deposit{value: balanceEthAfter - balanceEthBefore}() {} catch {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * @notice swaps ETH or WETH for exact tokens - uniswap v2\n     * @param swapDetails swapDetails required\n     */\n    function swapV2ETHOrWETHForExactTokens(SwapV2DetailsIn memory swapDetails) internal returns (bool) {\n        // extract tokenIn / tokenOut from path\n        address tokenIn = swapDetails.path[0];\n        address tokenOut = swapDetails.path[swapDetails.path.length - 1];\n\n        // Move tokenIn to contract if ERC20\n        if (msg.value == 0) {\n            IERC20TransferProxy(erc20TransferProxy).erc20safeTransferFrom(\n                IERC20Upgradeable(tokenIn),\n                _msgSender(),\n                address(this),\n                swapDetails.amountInMaximum\n            );\n\n            try IWETH(wrappedToken).withdraw(swapDetails.amountInMaximum) {} catch {\n                return false;\n            }\n        }\n\n        // if source = native and destination = wrapped, wrap and return\n        if (msg.value > 0 && tokenOut == wrappedToken) {\n            try IWETH(wrappedToken).deposit{value: msg.value}() {} catch {\n                return false;\n            }\n            IERC20Upgradeable(tokenOut).transfer(_msgSender(), swapDetails.amountInMaximum);\n            return true;\n        }\n\n        // Swap\n        uint256 chainId = block.chainid;\n        bool isAvalanche = chainId == 43114 || chainId == 43113;\n\n        if (isAvalanche) {\n            uniswapRouterV2.swapAVAXForExactTokens{value: swapDetails.amountInMaximum}(\n                swapDetails.amountOut, // amountOutMinimum\n                swapDetails.binSteps, // binSteps\n                swapDetails.path, // path\n                address(this), // recipient\n                block.timestamp // deadline\n            );\n        } else {\n            uniswapRouterV2.swapETHForExactTokens{value: swapDetails.amountInMaximum}(\n                swapDetails.amountOut, // amountOutMinimum\n                swapDetails.path, // path\n                address(this), // recipient\n                block.timestamp // deadline\n            );\n        }\n\n        return true;\n    }\n\n    /**\n     * @notice swaps tokens for exact tokens - uniswap v3\n     * @param swapDetails swapDetails required\n     */\n    function swapTokensForExactTokens(SwapDetailsIn memory swapDetails) internal returns (bool) {\n        // extract tokenIn / tokenOut from path\n        address tokenIn;\n        address tokenOut;\n        bytes memory _path = swapDetails.path;\n        uint _start = _path.length - 20;\n        assembly {\n            tokenIn := div(mload(add(add(_path, 0x20), _start)), 0x1000000000000000000000000)\n            tokenOut := div(mload(add(add(_path, 0x20), 0)), 0x1000000000000000000000000)\n        }\n\n        // Move tokenIn to contract if ERC20\n        if (msg.value == 0) {\n            IERC20TransferProxy(erc20TransferProxy).erc20safeTransferFrom(\n                IERC20Upgradeable(tokenIn),\n                _msgSender(),\n                address(this),\n                swapDetails.amountInMaximum\n            );\n        }\n\n        // if source = wrapped and destination = native, unwrap and return\n        if (tokenIn == wrappedToken && swapDetails.unwrap) {\n            try IWETH(wrappedToken).withdraw(swapDetails.amountOut) {} catch {\n                return false;\n            }\n            return true;\n        }\n\n        // if source = native and destination = wrapped, wrap and return\n        if (msg.value > 0 && tokenOut == wrappedToken) {\n            try IWETH(wrappedToken).deposit{value: msg.value}() {} catch {\n                return false;\n            }\n            return true;\n        }\n\n        // Approve tokenIn on uniswap\n        uint256 allowance = IERC20Upgradeable(tokenIn).allowance(address(uniswapRouterV3), address(this));\n        if (allowance < swapDetails.amountInMaximum) {\n            IERC20Upgradeable(tokenIn).approve(address(uniswapRouterV3), type(uint256).max);\n        }\n\n        // Set the order parameters\n        ISwapRouterV3.ExactOutputParams memory params = ISwapRouterV3.ExactOutputParams(\n            swapDetails.path, // path\n            address(this), // recipient\n            block.timestamp, // deadline\n            swapDetails.amountOut, // amountOut\n            swapDetails.amountInMaximum // amountInMaximum\n        );\n\n        // Swap\n        uint256 amountIn;\n        try uniswapRouterV3.exactOutput{ value: msg.value }(params) returns (uint256 amount) {\n            amountIn = amount;\n        } catch {\n            return false;\n        }\n\n        // Refund ETH from swap if any\n        uniswapRouterV3.refundETH();\n\n        // Unwrap if required\n        if (swapDetails.unwrap) {\n            try IWETH(wrappedToken).withdraw(swapDetails.amountOut) {} catch {\n                return false;\n            }\n        }\n\n        // Refund tokenIn left if any\n        if (amountIn < swapDetails.amountInMaximum) {\n            if (msg.value == 0)\n            {\n                IERC20Upgradeable(tokenIn).transfer(_msgSender(), swapDetails.amountInMaximum - amountIn);\n            }\n        }\n\n        return true;\n    }\n\n    receive() external payable {}\n}\n"
    },
    "src/exchange-wrapper/interfaces/IBlurExchange.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport {Input, Order} from \"../librairies/OrderStructs.sol\";\n\ninterface IBlurExchange {\n    function nonces(address) external view returns (uint256);\n\n    function cancelOrder(Order calldata order) external;\n\n    function cancelOrders(Order[] calldata orders) external;\n\n    function incrementNonce() external;\n\n    function execute(Input calldata sell, Input calldata buy) external payable;\n}\n"
    },
    "src/exchange-wrapper/interfaces/IExchangeV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"../../librairies/LibOrder.sol\";\nimport \"../../librairies/LibDirectTransfer.sol\";\n\ninterface IExchangeV2 {\n    function matchOrders(\n        LibOrder.Order memory orderLeft,\n        bytes memory signatureLeft,\n        LibOrder.Order memory orderRight,\n        bytes memory signatureRight\n    ) external payable;\n\n    function directPurchase(LibDirectTransfer.Purchase calldata direct) external payable;\n}\n"
    },
    "src/exchange-wrapper/interfaces/ILooksRare.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"../librairies/LibLooksRare.sol\";\n\ninterface ILooksRare {\n    function matchAskWithTakerBidUsingETHAndWETH(\n        LibLooksRare.TakerOrder calldata takerBid,\n        LibLooksRare.MakerOrder calldata makerAsk\n    ) external payable;\n}\n"
    },
    "src/exchange-wrapper/interfaces/ILSSVMRouter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\ninterface ILSSVMRouter {\n    struct PairSwapSpecific {\n        address pair;\n        uint256[] nftIds;\n    }\n\n    /**\n        @notice Swaps ETH into specific NFTs using multiple pairs.\n        @param swapList The list of pairs to trade with and the IDs of the NFTs to buy from each.\n        @param ethRecipient The address that will receive the unspent ETH input\n        @param nftRecipient The address that will receive the NFT output\n        @param deadline The Unix timestamp (in seconds) at/after which the swap will revert\n        @return remainingValue The unspent ETH amount\n     */\n    function swapETHForSpecificNFTs(\n        PairSwapSpecific[] calldata swapList,\n        address payable ethRecipient,\n        address nftRecipient,\n        uint256 deadline\n    ) external payable returns (uint256 remainingValue);\n}\n"
    },
    "src/exchange-wrapper/interfaces/ISeaPort.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"../librairies/LibSeaPort.sol\";\n\ninterface ISeaPort {\n    function fulfillAdvancedOrder(\n        LibSeaPort.AdvancedOrder calldata advancedOrder,\n        LibSeaPort.CriteriaResolver[] calldata criteriaResolvers,\n        bytes32 fulfillerConduitKey,\n        address recipient\n    ) external payable returns (bool fulfilled);\n\n    function fulfillAvailableAdvancedOrders(\n        LibSeaPort.AdvancedOrder[] memory advancedOrders,\n        LibSeaPort.CriteriaResolver[] calldata criteriaResolvers,\n        LibSeaPort.FulfillmentComponent[][] calldata offerFulfillments,\n        LibSeaPort.FulfillmentComponent[][] calldata considerationFulfillments,\n        bytes32 fulfillerConduitKey,\n        address recipient,\n        uint256 maximumFulfilled\n    ) external payable returns (bool[] memory availableOrders, LibSeaPort.Execution[] memory executions);\n\n    function fulfillBasicOrder(\n        LibSeaPort.BasicOrderParameters calldata parameters\n    ) external payable returns (bool fulfilled);\n}\n"
    },
    "src/exchange-wrapper/interfaces/ISwapRouterV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\n/// @title Router token swapping functionality\n/// @notice Functions for swapping tokens via Uniswap V2\ninterface ISwapRouterV2 {\n    // regular\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMinimum,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMaximum,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n\n    function swapExactETHForTokens(\n        uint amountOutMinimum,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountOut);\n\n    function swapTokensForExactETH(\n        uint amountOut,\n        uint amountInMaximum,\n        address[] calldata path,\n        address payable to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n\n    function swapExactTokensForETH(\n        uint amountIn,\n        uint amountOutMinimum,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n\n    function swapETHForExactTokens(\n        uint amountOut,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable returns (uint[] memory amounts);\n\n    // avalanche\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMinimum,\n        uint[] calldata binSteps,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMaximum,\n        uint[] calldata binSteps,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n\n    function swapExactAVAXForTokens(\n        uint amountOutMinimum,\n        uint[] calldata binSteps,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountOut);\n\n    function swapTokensForExactAVAX(\n        uint amountOut,\n        uint amountInMaximum,\n        uint[] calldata binSteps,\n        address[] calldata path,\n        address payable to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n\n    function swapExactTokensForAVAX(\n        uint amountIn,\n        uint amountOutMinimum,\n        uint[] calldata binSteps,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n\n    function swapAVAXForExactTokens(\n        uint amountOut,\n        uint[] calldata binSteps,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable returns (uint[] memory amounts);\n}\n"
    },
    "src/exchange-wrapper/interfaces/ISwapRouterV3.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"./IUniswapV3SwapCallback.sol\";\n\n/// @title Router token swapping functionality\n/// @notice Functions for swapping tokens via Uniswap V3\ninterface ISwapRouterV3 is IUniswapV3SwapCallback {\n    struct ExactInputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n    }\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\n\n    struct ExactOutputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n    }\n\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\n    /// @return amountIn The amount of the input token\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\n\n    function refundETH() external payable;\n}\n"
    },
    "src/exchange-wrapper/interfaces/IUniswapV3SwapCallback.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\n/// @title Callback for IUniswapV3PoolActions#swap\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\ninterface IUniswapV3SwapCallback {\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\n    function uniswapV3SwapCallback(int256 amount0Delta, int256 amount1Delta, bytes calldata data) external;\n}\n"
    },
    "src/exchange-wrapper/interfaces/IWETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\ninterface IWETH {\n    function deposit() external payable;\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function withdraw(uint256) external;\n}\n"
    },
    "src/exchange-wrapper/interfaces/IWyvernExchange.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\ninterface IWyvernExchange {\n    function atomicMatch_(\n        address[14] memory addrs,\n        uint[18] memory uints,\n        uint8[8] memory feeMethodsSidesKindsHowToCalls,\n        bytes memory calldataBuy,\n        bytes memory calldataSell,\n        bytes memory replacementPatternBuy,\n        bytes memory replacementPatternSell,\n        bytes memory staticExtradataBuy,\n        bytes memory staticExtradataSell,\n        uint8[2] memory vs,\n        bytes32[5] memory rssMetadata\n    ) external payable;\n\n    enum Side {\n        Buy,\n        Sell\n    }\n\n    enum SaleKind {\n        FixedPrice,\n        DutchAuction\n    }\n\n    function calculateFinalPrice(\n        Side side,\n        SaleKind saleKind,\n        uint256 basePrice,\n        uint256 extra,\n        uint256 listingTime,\n        uint256 expirationTime\n    ) external view returns (uint256);\n}\n"
    },
    "src/exchange-wrapper/interfaces/Ix2y2.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\ninterface Ix2y2 {\n    struct OrderItem {\n        uint256 price;\n        bytes data;\n    }\n\n    struct Pair721 {\n        address token;\n        uint256 tokenId;\n    }\n\n    struct Pair1155 {\n        address token;\n        uint256 tokenId;\n        uint256 amount;\n    }\n\n    struct Order {\n        uint256 salt;\n        address user;\n        uint256 network;\n        uint256 intent;\n        uint256 delegateType;\n        uint256 deadline;\n        address currency;\n        bytes dataMask;\n        OrderItem[] items;\n        // signature\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n        uint8 signVersion;\n    }\n\n    struct Fee {\n        uint256 percentage;\n        address to;\n    }\n\n    struct SettleDetail {\n        Op op;\n        uint256 orderIdx;\n        uint256 itemIdx;\n        uint256 price;\n        bytes32 itemHash;\n        address executionDelegate;\n        bytes dataReplacement;\n        uint256 bidIncentivePct;\n        uint256 aucMinIncrementPct;\n        uint256 aucIncDurationSecs;\n        Fee[] fees;\n    }\n\n    struct SettleShared {\n        uint256 salt;\n        uint256 deadline;\n        uint256 amountToEth;\n        uint256 amountToWeth;\n        address user;\n        bool canFail;\n    }\n\n    struct RunInput {\n        Order[] orders;\n        SettleDetail[] details;\n        SettleShared shared;\n        // signature\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n    }\n\n    enum Op {\n        INVALID,\n        // off-chain\n        COMPLETE_SELL_OFFER,\n        COMPLETE_BUY_OFFER,\n        CANCEL_OFFER,\n        // auction\n        BID,\n        COMPLETE_AUCTION,\n        REFUND_AUCTION,\n        REFUND_AUCTION_STUCK_ITEM\n    }\n\n    function run(RunInput memory input) external payable;\n}\n"
    },
    "src/exchange-wrapper/librairies/LibBlur.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nlibrary LibBlur {\n    enum Side {\n        Buy,\n        Sell\n    }\n    enum SignatureVersion {\n        Single,\n        Bulk\n    }\n    enum AssetType {\n        ERC721,\n        ERC1155\n    }\n\n    struct Fee {\n        uint16 rate;\n        address payable recipient;\n    }\n\n    struct Order {\n        address trader;\n        Side side;\n        address matchingPolicy;\n        address collection;\n        uint256 tokenId;\n        uint256 amount;\n        address paymentToken;\n        uint256 price;\n        uint256 listingTime;\n        /* Order expiration timestamp - 0 for oracle cancellations. */\n        uint256 expirationTime;\n        Fee[] fees;\n        uint256 salt;\n        bytes extraParams;\n    }\n\n    struct Input {\n        Order order;\n        uint8 v;\n        bytes32 r;\n        bytes32 s;\n        bytes extraSignature;\n        SignatureVersion signatureVersion;\n        uint256 blockNumber;\n    }\n\n    struct Execution {\n        Input sell;\n        Input buy;\n    }\n}\n"
    },
    "src/exchange-wrapper/librairies/LibLooksRare.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nlibrary LibLooksRare {\n    struct MakerOrder {\n        bool isOrderAsk; // true --> ask / false --> bid\n        address signer; // signer of the maker order\n        address collection; // collection address\n        uint256 price; // price (used as )\n        uint256 tokenId; // id of the token\n        uint256 amount; // amount of tokens to sell/purchase (must be 1 for ERC721, 1+ for ERC1155)\n        address strategy; // strategy for trade execution (e.g., DutchAuction, StandardSaleForFixedPrice)\n        address currency; // currency (e.g., WETH)\n        uint256 nonce; // order nonce (must be unique unless new maker order is meant to override existing one e.g., lower ask price)\n        uint256 startTime; // startTime in timestamp\n        uint256 endTime; // endTime in timestamp\n        uint256 minPercentageToAsk; // slippage protection (9000 --> 90% of the final price must return to ask)\n        bytes params; // additional parameters\n        uint8 v; // v: parameter (27 or 28)\n        bytes32 r; // r: parameter\n        bytes32 s; // s: parameter\n    }\n\n    struct TakerOrder {\n        bool isOrderAsk; // true --> ask / false --> bid\n        address taker; // msg.sender\n        uint256 price; // final price for the purchase\n        uint256 tokenId;\n        uint256 minPercentageToAsk; // // slippage protection (9000 --> 90% of the final price must return to ask)\n        bytes params; // other params (e.g., tokenId)\n    }\n}\n"
    },
    "src/exchange-wrapper/librairies/LibSeaPort.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nlibrary LibSeaPort {\n    /**\n     * @dev For basic orders involving ETH / native / ERC20 <=> ERC721 / ERC1155\n     *      matching, a group of six functions may be called that only requires a\n     *      subset of the usual order arguments. Note the use of a \"basicOrderType\"\n     *      enum; this represents both the usual order type as well as the \"route\"\n     *      of the basic order (a simple derivation function for the basic order\n     *      type is `basicOrderType = orderType + (4 * basicOrderRoute)`.)\n     */\n    struct BasicOrderParameters {\n        address considerationToken; // 0x24\n        uint256 considerationIdentifier; // 0x44\n        uint256 considerationAmount; // 0x64\n        address payable offerer; // 0x84\n        address zone; // 0xa4\n        address offerToken; // 0xc4\n        uint256 offerIdentifier; // 0xe4\n        uint256 offerAmount; // 0x104\n        BasicOrderType basicOrderType; // 0x124\n        uint256 startTime; // 0x144\n        uint256 endTime; // 0x164\n        bytes32 zoneHash; // 0x184\n        uint256 salt; // 0x1a4\n        bytes32 offererConduitKey; // 0x1c4\n        bytes32 fulfillerConduitKey; // 0x1e4\n        uint256 totalOriginalAdditionalRecipients; // 0x204\n        AdditionalRecipient[] additionalRecipients; // 0x224\n        bytes signature; // 0x244\n    }\n    /**\n     * @dev Basic orders can supply any number of additional recipients, with the\n     *      implied assumption that they are supplied from the offered ETH (or other\n     *      native token) or ERC20 token for the order.\n     */\n    struct AdditionalRecipient {\n        uint256 amount;\n        address payable recipient;\n    }\n\n    // prettier-ignore\n    enum BasicOrderType {\n        // 0: no partial fills, anyone can execute\n        ETH_TO_ERC721_FULL_OPEN,\n\n        // 1: partial fills supported, anyone can execute\n        ETH_TO_ERC721_PARTIAL_OPEN,\n\n        // 2: no partial fills, only offerer or zone can execute\n        ETH_TO_ERC721_FULL_RESTRICTED,\n\n        // 3: partial fills supported, only offerer or zone can execute\n        ETH_TO_ERC721_PARTIAL_RESTRICTED,\n\n        // 4: no partial fills, anyone can execute\n        ETH_TO_ERC1155_FULL_OPEN,\n\n        // 5: partial fills supported, anyone can execute\n        ETH_TO_ERC1155_PARTIAL_OPEN,\n\n        // 6: no partial fills, only offerer or zone can execute\n        ETH_TO_ERC1155_FULL_RESTRICTED,\n\n        // 7: partial fills supported, only offerer or zone can execute\n        ETH_TO_ERC1155_PARTIAL_RESTRICTED,\n\n        // 8: no partial fills, anyone can execute\n        ERC20_TO_ERC721_FULL_OPEN,\n\n        // 9: partial fills supported, anyone can execute\n        ERC20_TO_ERC721_PARTIAL_OPEN,\n\n        // 10: no partial fills, only offerer or zone can execute\n        ERC20_TO_ERC721_FULL_RESTRICTED,\n\n        // 11: partial fills supported, only offerer or zone can execute\n        ERC20_TO_ERC721_PARTIAL_RESTRICTED,\n\n        // 12: no partial fills, anyone can execute\n        ERC20_TO_ERC1155_FULL_OPEN,\n\n        // 13: partial fills supported, anyone can execute\n        ERC20_TO_ERC1155_PARTIAL_OPEN,\n\n        // 14: no partial fills, only offerer or zone can execute\n        ERC20_TO_ERC1155_FULL_RESTRICTED,\n\n        // 15: partial fills supported, only offerer or zone can execute\n        ERC20_TO_ERC1155_PARTIAL_RESTRICTED,\n\n        // 16: no partial fills, anyone can execute\n        ERC721_TO_ERC20_FULL_OPEN,\n\n        // 17: partial fills supported, anyone can execute\n        ERC721_TO_ERC20_PARTIAL_OPEN,\n\n        // 18: no partial fills, only offerer or zone can execute\n        ERC721_TO_ERC20_FULL_RESTRICTED,\n\n        // 19: partial fills supported, only offerer or zone can execute\n        ERC721_TO_ERC20_PARTIAL_RESTRICTED,\n\n        // 20: no partial fills, anyone can execute\n        ERC1155_TO_ERC20_FULL_OPEN,\n\n        // 21: partial fills supported, anyone can execute\n        ERC1155_TO_ERC20_PARTIAL_OPEN,\n\n        // 22: no partial fills, only offerer or zone can execute\n        ERC1155_TO_ERC20_FULL_RESTRICTED,\n\n        // 23: partial fills supported, only offerer or zone can execute\n        ERC1155_TO_ERC20_PARTIAL_RESTRICTED\n    }\n\n    /**\n     * @dev The full set of order components, with the exception of the counter,\n     *      must be supplied when fulfilling more sophisticated orders or groups of\n     *      orders. The total number of original consideration items must also be\n     *      supplied, as the caller may specify additional consideration items.\n     */\n    struct OrderParameters {\n        address offerer; // 0x00\n        address zone; // 0x20\n        OfferItem[] offer; // 0x40\n        ConsiderationItem[] consideration; // 0x60\n        OrderType orderType; // 0x80\n        uint256 startTime; // 0xa0\n        uint256 endTime; // 0xc0\n        bytes32 zoneHash; // 0xe0\n        uint256 salt; // 0x100\n        bytes32 conduitKey; // 0x120\n        uint256 totalOriginalConsiderationItems; // 0x140\n        // offer.length                          // 0x160\n    }\n\n    /**\n     * @dev Orders require a signature in addition to the other order parameters.\n     */\n    struct Order {\n        OrderParameters parameters;\n        bytes signature;\n    }\n\n    struct AdvancedOrder {\n        OrderParameters parameters;\n        uint120 numerator;\n        uint120 denominator;\n        bytes signature;\n        bytes extraData;\n    }\n\n    struct OfferItem {\n        ItemType itemType;\n        address token;\n        uint256 identifierOrCriteria;\n        uint256 startAmount;\n        uint256 endAmount;\n    }\n\n    /**\n     * @dev A consideration item has the same five components as an offer item and\n     *      an additional sixth component designating the required recipient of the\n     *      item.\n     */\n    struct ConsiderationItem {\n        ItemType itemType;\n        address token;\n        uint256 identifierOrCriteria;\n        uint256 startAmount;\n        uint256 endAmount;\n        address payable recipient;\n    }\n\n    // prettier-ignore\n    enum OrderType {\n        // 0: no partial fills, anyone can execute\n        FULL_OPEN,\n\n        // 1: partial fills supported, anyone can execute\n        PARTIAL_OPEN,\n\n        // 2: no partial fills, only offerer or zone can execute\n        FULL_RESTRICTED,\n\n        // 3: partial fills supported, only offerer or zone can execute\n        PARTIAL_RESTRICTED\n    }\n\n    // prettier-ignore\n    enum ItemType {\n        // 0: ETH on mainnet, MATIC on polygon, etc.\n        NATIVE,\n\n        // 1: ERC20 items (ERC777 and ERC20 analogues could also technically work)\n        ERC20,\n\n        // 2: ERC721 items\n        ERC721,\n\n        // 3: ERC1155 items\n        ERC1155,\n\n        // 4: ERC721 items where a number of tokenIds are supported\n        ERC721_WITH_CRITERIA,\n\n        // 5: ERC1155 items where a number of ids are supported\n        ERC1155_WITH_CRITERIA\n    }\n\n    /**\n     * @dev A fulfillment is applied to a group of orders. It decrements a series of\n     *      offer and consideration items, then generates a single execution\n     *      element. A given fulfillment can be applied to as many offer and\n     *      consideration items as desired, but must contain at least one offer and\n     *      at least one consideration that match. The fulfillment must also remain\n     *      consistent on all key parameters across all offer items (same offerer,\n     *      token, type, tokenId, and conduit preference) as well as across all\n     *      consideration items (token, type, tokenId, and recipient).\n     */\n    struct Fulfillment {\n        FulfillmentComponent[] offerComponents;\n        FulfillmentComponent[] considerationComponents;\n    }\n\n    /**\n     * @dev Each fulfillment component contains one index referencing a specific\n     *      order and another referencing a specific offer or consideration item.\n     */\n    struct FulfillmentComponent {\n        uint256 orderIndex;\n        uint256 itemIndex;\n    }\n\n    /**\n     * @dev An execution is triggered once all consideration items have been zeroed\n     *      out. It sends the item in question from the offerer to the item's\n     *      recipient, optionally sourcing approvals from either this contract\n     *      directly or from the offerer's chosen conduit if one is specified. An\n     *      execution is not provided as an argument, but rather is derived via\n     *      orders, criteria resolvers, and fulfillments (where the total number of\n     *      executions will be less than or equal to the total number of indicated\n     *      fulfillments) and returned as part of `matchOrders`.\n     */\n    struct Execution {\n        ReceivedItem item;\n        address offerer;\n        bytes32 conduitKey;\n    }\n\n    /**\n     * @dev A received item is translated from a utilized consideration item and has\n     *      the same four components as a spent item, as well as an additional fifth\n     *      component designating the required recipient of the item.\n     */\n    struct ReceivedItem {\n        ItemType itemType;\n        address token;\n        uint256 identifier;\n        uint256 amount;\n        address payable recipient;\n    }\n\n    struct CriteriaResolver {\n        uint256 orderIndex;\n        Side side;\n        uint256 index;\n        uint256 identifier;\n        bytes32[] criteriaProof;\n    }\n\n    // prettier-ignore\n    enum Side {\n        // 0: Items that can be spent\n        OFFER,\n\n        // 1: Items that must be received\n        CONSIDERATION\n    }\n}\n"
    },
    "src/exchange-wrapper/librairies/OrderStructs.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nenum Side {\n    Buy,\n    Sell\n}\nenum SignatureVersion {\n    Single,\n    Bulk\n}\nenum AssetType {\n    ERC721,\n    ERC1155\n}\n\nstruct Fee {\n    uint16 rate;\n    address payable recipient;\n}\n\nstruct Order {\n    address trader;\n    Side side;\n    address matchingPolicy;\n    address collection;\n    uint256 tokenId;\n    uint256 amount;\n    address paymentToken;\n    uint256 price;\n    uint256 listingTime;\n    /* Order expiration timestamp - 0 for oracle cancellations. */\n    uint256 expirationTime;\n    Fee[] fees;\n    uint256 salt;\n    bytes extraParams;\n}\n\nstruct Input {\n    Order order;\n    uint8 v;\n    bytes32 r;\n    bytes32 s;\n    bytes extraSignature;\n    SignatureVersion signatureVersion;\n    uint256 blockNumber;\n}\n\nstruct Execution {\n    Input sell;\n    Input buy;\n}\n"
    },
    "src/exchange-wrapper/tests/LooksRareTestHelper.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport {LibLooksRare} from \"../librairies/LibLooksRare.sol\";\n\ninterface IExecutionStrategy {\n    function canExecuteTakerAsk(\n        LibLooksRare.TakerOrder calldata takerAsk,\n        LibLooksRare.MakerOrder calldata makerBid\n    ) external view returns (bool, uint256, uint256);\n\n    function canExecuteTakerBid(\n        LibLooksRare.TakerOrder calldata takerBid,\n        LibLooksRare.MakerOrder calldata makerAsk\n    ) external view returns (bool, uint256, uint256);\n\n    function viewProtocolFee() external view returns (uint256);\n}\n\n/**\n * @title StrategyStandardSaleForFixedPrice\n * @notice Strategy that executes an order at a fixed price that\n * can be taken either by a bid or an ask.\n */\ncontract LooksRareTestHelper is IExecutionStrategy {\n    uint256 public immutable protocolFee;\n\n    /**\n     * @notice Constructor\n     * @param _protocolFee protocol fee (200 --> 2%, 400 --> 4%)\n     */\n    constructor(uint256 _protocolFee) {\n        protocolFee = _protocolFee;\n    }\n\n    /**\n     * @notice Check whether a taker ask order can be executed against a maker bid\n     * @param takerAsk taker ask order\n     * @param makerBid maker bid order\n     * @return (whether strategy can be executed, tokenId to execute, amount of tokens to execute)\n     */\n    function canExecuteTakerAsk(\n        LibLooksRare.TakerOrder calldata takerAsk,\n        LibLooksRare.MakerOrder calldata makerBid\n    ) external view override returns (bool, uint256, uint256) {\n        return (\n            ((makerBid.price == takerAsk.price) &&\n                (makerBid.tokenId == takerAsk.tokenId) &&\n                (makerBid.startTime <= block.timestamp) &&\n                (makerBid.endTime >= block.timestamp)),\n            makerBid.tokenId,\n            makerBid.amount\n        );\n    }\n\n    /**\n     * @notice Check whether a taker bid order can be executed against a maker ask\n     * @param takerBid taker bid order\n     * @param makerAsk maker ask order\n     * @return (whether strategy can be executed, tokenId to execute, amount of tokens to execute)\n     */\n    function canExecuteTakerBid(\n        LibLooksRare.TakerOrder calldata takerBid,\n        LibLooksRare.MakerOrder calldata makerAsk\n    ) external view override returns (bool, uint256, uint256) {\n        return (\n            ((makerAsk.price == takerBid.price) &&\n                (makerAsk.tokenId == takerBid.tokenId) &&\n                (makerAsk.startTime <= block.timestamp) &&\n                (makerAsk.endTime >= block.timestamp)),\n            makerAsk.tokenId,\n            makerAsk.amount\n        );\n    }\n\n    function viewProtocolFee() external pure override returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "src/exchange-wrapper/tests/MockUniswapV2Router.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport {IERC20, SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {ISwapRouterV2} from \"../interfaces/ISwapRouterV2.sol\";\n\ncontract MockUniswapV2Router is ISwapRouterV2 {\n    using SafeERC20 for IERC20;\n\n    function swapExactTokensForTokens(\n        uint,\n        uint,\n        address[] calldata,\n        address,\n        uint\n    ) external pure returns (uint[] memory amounts) {\n        uint[] memory amts = new uint[](1);\n        amts[0] = 0;\n\n        return amts;\n    }\n\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMaximum,\n        address[] calldata path,\n        address,\n        uint\n    ) external virtual returns (uint[] memory amounts) {\n        address tokenIn = path[0];\n        address tokenOut = path[path.length - 1];\n        IERC20(tokenIn).safeTransferFrom(msg.sender, address(this), amountInMaximum);\n        IERC20(tokenOut).transfer(msg.sender, amountOut);\n        uint[] memory amts = new uint[](1);\n        amts[0] = amountInMaximum;\n\n        return amts;\n    }\n\n    function swapExactETHForTokens(\n        uint,\n        address[] calldata,\n        address,\n        uint\n    ) external payable override returns (uint amountOut) {\n        return amountOut;\n    }\n\n    function swapTokensForExactETH(\n        uint amountOut,\n        uint amountInMaximum,\n        address[] calldata path,\n        address payable,\n        uint\n    ) external override returns (uint[] memory amounts) {\n        address tokenIn = path[0];\n        IERC20(tokenIn).safeTransferFrom(msg.sender, address(this), amountInMaximum);\n        msg.sender.call{value: amountOut}(\"\");\n        uint[] memory amts = new uint[](1);\n        amts[0] = amountInMaximum;\n\n        return amts;\n    }\n\n    function swapExactTokensForETH(\n        uint,\n        uint,\n        address[] calldata,\n        address,\n        uint\n    ) external pure returns (uint[] memory amounts) {\n        uint[] memory amts = new uint[](1);\n        amts[0] = 0;\n\n        return amts;\n    }\n\n    function swapETHForExactTokens(\n        uint amountOut,\n        address[] calldata path,\n        address,\n        uint\n    ) external payable override returns (uint[] memory amounts) {\n        address tokenOut = path[path.length - 1];\n        IERC20(tokenOut).transfer(msg.sender, amountOut);\n        uint[] memory amts = new uint[](1);\n        amts[0] = amountOut;\n\n        return amts;\n    }\n\n    // avalanche\n    function swapExactTokensForTokens(\n        uint,\n        uint,\n        uint[] calldata,\n        address[] calldata,\n        address,\n        uint\n    ) external pure returns (uint[] memory amounts) {\n        uint[] memory amts = new uint[](1);\n        amts[0] = 0;\n\n        return amts;\n    }\n\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMaximum,\n        uint[] calldata,\n        address[] calldata path,\n        address,\n        uint\n    ) external override returns (uint[] memory amounts) {\n        address tokenIn = path[0];\n        address tokenOut = path[path.length - 1];\n        IERC20(tokenIn).safeTransferFrom(msg.sender, address(this), amountInMaximum);\n        IERC20(tokenOut).transfer(msg.sender, amountOut);\n        uint[] memory amts = new uint[](1);\n        amts[0] = amountInMaximum;\n\n        return amts;\n    }\n\n    function swapExactAVAXForTokens(\n        uint,\n        uint[] calldata,\n        address[] calldata,\n        address,\n        uint\n    ) external payable override returns (uint amountOut) {\n        return amountOut;\n    }\n\n    function swapTokensForExactAVAX(\n        uint amountOut,\n        uint amountInMaximum,\n        uint[] calldata,\n        address[] calldata path,\n        address payable,\n        uint\n    ) external override returns (uint[] memory amounts) {\n        address tokenIn = path[0];\n        IERC20(tokenIn).safeTransferFrom(msg.sender, address(this), amountInMaximum);\n        msg.sender.call{value: amountOut}(\"\");\n        uint[] memory amts = new uint[](1);\n        amts[0] = amountInMaximum;\n\n        return amts;\n    }\n\n    function swapExactTokensForAVAX(\n        uint,\n        uint,\n        uint[] calldata,\n        address[] calldata,\n        address,\n        uint\n    ) external pure returns (uint[] memory amounts) {\n        uint[] memory amts = new uint[](1);\n        amts[0] = 0;\n\n        return amts;\n    }\n\n    function swapAVAXForExactTokens(\n        uint amountOut,\n        uint[] calldata,\n        address[] calldata path,\n        address,\n        uint\n    ) external payable override returns (uint[] memory amounts) {\n        address tokenOut = path[path.length - 1];\n        IERC20(tokenOut).transfer(msg.sender, amountOut);\n        uint[] memory amts = new uint[](1);\n        amts[0] = amountOut;\n\n        return amts;\n    }\n\n    receive() external payable {}\n}\n"
    },
    "src/exchange-wrapper/tests/MockUniswapV3Router.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport {IERC20, SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {ISwapRouterV3} from \"../interfaces/ISwapRouterV3.sol\";\n\ncontract MockUniswapV3Router is ISwapRouterV3 {\n    using SafeERC20 for IERC20;\n\n    function exactOutput(ExactOutputParams calldata params) external payable override returns (uint256 amountIn) {\n        address tokenIn;\n        address tokenOut;\n        bytes memory _path = params.path;\n        uint _start = _path.length - 20;\n        assembly {\n            tokenIn := div(mload(add(add(_path, 0x20), _start)), 0x1000000000000000000000000)\n            tokenOut := div(mload(add(add(_path, 0x20), 0)), 0x1000000000000000000000000)\n        }\n\n        IERC20(tokenIn).safeTransferFrom(msg.sender, address(this), params.amountInMaximum);\n        IERC20(tokenOut).transfer(msg.sender, params.amountOut);\n\n        return params.amountInMaximum;\n    }\n\n    function exactInput(ExactInputParams calldata) external payable override returns (uint256 amountIn) {\n        return 0;\n    }\n\n    function uniswapV3SwapCallback(int256, int256, bytes calldata) external pure {\n        return;\n    }\n\n    function refundETH() external payable override {\n        return;\n    }\n\n    receive() external payable {}\n}\n"
    },
    "src/exchange-wrapper/tests/TestDummyERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\";\n\ncontract TestDummyERC1155 is ERC1155Upgradeable {\n    function mint(address to, uint tokenId, uint amount) external {\n        _mint(to, tokenId, amount, \"\");\n    }\n}\n"
    },
    "src/exchange-wrapper/tests/TestDummyERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\n\ncontract TestDummyERC20 is ERC20Upgradeable {\n    function mint(address to, uint amount) external {\n        _mint(to, amount);\n    }\n\n    function init() external {\n        __ERC20_init(\"TestERC20\", \"TE20\");\n    }\n}\n"
    },
    "src/exchange-wrapper/tests/TestDummyERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\";\n\ncontract TestDummyERC721 is ERC721Upgradeable {\n    function mint(address to, uint tokenId) external {\n        _mint(to, tokenId);\n    }\n}\n"
    },
    "src/exchange-wrapper/tests/TestHelper.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport {TestHelper} from \"../../exchange/tests/TestHelper.sol\";\n"
    },
    "src/exchange-wrapper/tests/WrapperHelper.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport {IERC721Upgradeable} from \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\";\nimport {IERC1155Upgradeable} from \"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\";\n\nimport {IWyvernExchange} from \"../interfaces/IWyvernExchange.sol\";\nimport {IExchangeV2} from \"../interfaces/IExchangeV2.sol\";\nimport {LibOrder} from \"../ExchangeWrapper.sol\";\nimport {LibDirectTransfer} from \"../ExchangeWrapper.sol\";\n\nimport {LibSeaPort} from \"../librairies/LibSeaPort.sol\";\nimport {ISeaPort} from \"../interfaces/ISeaPort.sol\";\nimport {Ix2y2} from \"../interfaces/Ix2y2.sol\";\nimport {LibLooksRare} from \"../librairies/LibLooksRare.sol\";\nimport {ILooksRare} from \"../interfaces/ILooksRare.sol\";\nimport {ILSSVMRouter} from \"../interfaces/ILSSVMRouter.sol\";\nimport {LibBlur} from \"../librairies/LibBlur.sol\";\n\ninterface IERC1155 {\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\n}\n\ninterface IERC721 {\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n}\n\ninterface IMatchERC721 {\n    function matchERC721UsingCriteria(\n        address from,\n        address to,\n        IERC721 token,\n        uint256 tokenId,\n        bytes32 root,\n        bytes32[] calldata proof\n    ) external returns (bool);\n}\n\ninterface IMatchERC1155 {\n    /*This method  Merkle validator https://etherscan.io/address/0xbaf2127b49fc93cbca6269fade0f7f31df4c88a7#code\n     */\n    function matchERC1155UsingCriteria(\n        address from,\n        address to,\n        IERC1155 token,\n        uint256 tokenId,\n        uint256 amount,\n        bytes32 root,\n        bytes32[] calldata proof\n    ) external returns (bool);\n}\n\n/*Interface with error*/\ninterface IWyvernExchangeError {\n    /*method is not exist in WyvernBulkExchange contract*/\n    function atomicMatchError_(\n        address[14] memory addrs,\n        uint[18] memory uints,\n        uint8[8] memory feeMethodsSidesKindsHowToCalls,\n        bytes memory calldataBuy,\n        bytes memory calldataSell,\n        bytes memory replacementPatternBuy,\n        bytes memory replacementPatternSell,\n        bytes memory staticExtradataBuy,\n        bytes memory staticExtradataSell,\n        uint8[2] memory vs,\n        bytes32[5] memory rssMetadata\n    ) external payable;\n}\n\ncontract WrapperHelper {\n    struct WyvernOrders {\n        address[14] addrs;\n        uint[18] uints;\n        uint8[8] feeMethodsSidesKindsHowToCalls;\n        bytes calldataBuy;\n        bytes calldataSell;\n        bytes replacementPatternBuy;\n        bytes replacementPatternSell;\n        bytes staticExtradataBuy;\n        bytes staticExtradataSell;\n        uint8[2] vs;\n        bytes32[5] rssMetadata;\n    }\n\n    struct RaribleBuy {\n        LibOrder.Order orderLeft;\n        bytes signatureLeft;\n        LibOrder.Order orderRight;\n        bytes signatureRight;\n    }\n\n    struct AdditionalData {\n        bytes data;\n        uint[] additionalRoyalties;\n    }\n\n    function getDataWyvernAtomicMatch(WyvernOrders memory _openSeaBuy) external pure returns (bytes memory _data) {\n        _data = abi.encodeWithSelector(\n            IWyvernExchange.atomicMatch_.selector,\n            _openSeaBuy.addrs,\n            _openSeaBuy.uints,\n            _openSeaBuy.feeMethodsSidesKindsHowToCalls,\n            _openSeaBuy.calldataBuy,\n            _openSeaBuy.calldataSell,\n            _openSeaBuy.replacementPatternBuy,\n            _openSeaBuy.replacementPatternSell,\n            _openSeaBuy.staticExtradataBuy,\n            _openSeaBuy.staticExtradataSell,\n            _openSeaBuy.vs,\n            _openSeaBuy.rssMetadata\n        );\n    }\n\n    function getDataWyvernAtomicMatchWithError(\n        WyvernOrders memory _openSeaBuy\n    ) external pure returns (bytes memory _data) {\n        _data = abi.encodeWithSelector(\n            IWyvernExchangeError.atomicMatchError_.selector,\n            _openSeaBuy.addrs,\n            _openSeaBuy.uints,\n            _openSeaBuy.feeMethodsSidesKindsHowToCalls,\n            _openSeaBuy.calldataBuy,\n            _openSeaBuy.calldataSell,\n            _openSeaBuy.replacementPatternBuy,\n            _openSeaBuy.replacementPatternSell,\n            _openSeaBuy.staticExtradataBuy,\n            _openSeaBuy.staticExtradataSell,\n            _openSeaBuy.vs,\n            _openSeaBuy.rssMetadata\n        );\n    }\n\n    function getDataERC721UsingCriteria(\n        address from,\n        address to,\n        IERC721Upgradeable token,\n        uint256 tokenId\n    ) external pure returns (bytes memory _data) {\n        _data = abi.encodeWithSelector(IMatchERC721.matchERC721UsingCriteria.selector, from, to, token, tokenId);\n    }\n\n    function getDataERC1155UsingCriteria(\n        address from,\n        address to,\n        IERC1155Upgradeable token,\n        uint256 tokenId,\n        uint256 amount\n    ) external pure returns (bytes memory _data) {\n        _data = abi.encodeWithSelector(\n            IMatchERC1155.matchERC1155UsingCriteria.selector,\n            from,\n            to,\n            token,\n            tokenId,\n            amount\n        );\n    }\n\n    function encodeOriginFeeIntoUint(address account, uint96 value) external pure returns (uint) {\n        return (uint(value) << 160) + uint(uint160(account));\n    }\n\n    function getDataDirectPurchase(LibDirectTransfer.Purchase memory data) external pure returns (bytes memory result) {\n        result = abi.encodeWithSelector(IExchangeV2.directPurchase.selector, data);\n    }\n\n    function getDataSeaPortFulfillAdvancedOrder(\n        LibSeaPort.AdvancedOrder memory _advancedOrder,\n        LibSeaPort.CriteriaResolver[] memory _criteriaResolvers,\n        bytes32 _fulfillerConduitKey,\n        address _recipient\n    ) external pure returns (bytes memory _data) {\n        _data = abi.encodeWithSelector(\n            ISeaPort.fulfillAdvancedOrder.selector,\n            _advancedOrder,\n            _criteriaResolvers,\n            _fulfillerConduitKey,\n            _recipient\n        );\n    }\n\n    function getDataSeaPortFulfillAvailableAdvancedOrders(\n        LibSeaPort.AdvancedOrder[] memory _orders,\n        LibSeaPort.CriteriaResolver[] memory _criteriaResolvers,\n        LibSeaPort.FulfillmentComponent[][] memory _offerFulfillments,\n        LibSeaPort.FulfillmentComponent[][] memory _considerationFulfillments,\n        bytes32 _fulfillerConduitKey,\n        address _recipient,\n        uint256 _maximumFulfilled\n    ) external pure returns (bytes memory _data) {\n        _data = abi.encodeWithSelector(\n            ISeaPort.fulfillAvailableAdvancedOrders.selector,\n            _orders,\n            _criteriaResolvers,\n            _offerFulfillments,\n            _considerationFulfillments,\n            _fulfillerConduitKey,\n            _recipient,\n            _maximumFulfilled\n        );\n    }\n\n    function getDataSeaPortBasic(\n        LibSeaPort.BasicOrderParameters calldata seaPortBasic,\n        bytes4 typeNft\n    ) external pure returns (bytes memory _data) {\n        _data = abi.encode(seaPortBasic, typeNft);\n    }\n\n    function encodeData(Ix2y2.Pair721[] calldata data) external pure returns (bytes memory) {\n        return abi.encode(data);\n    }\n\n    function encodeData1155(Ix2y2.Pair1155[] calldata data) external pure returns (bytes memory) {\n        return abi.encode(data);\n    }\n\n    function hashItem(Ix2y2.Order memory order, Ix2y2.OrderItem memory item) external pure returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(\n                    order.salt,\n                    order.user,\n                    order.network,\n                    order.intent,\n                    order.delegateType,\n                    order.deadline,\n                    order.currency,\n                    order.dataMask,\n                    item\n                )\n            );\n    }\n\n    function encodeX2Y2Call(Ix2y2.RunInput calldata data) external pure returns (bytes memory) {\n        return abi.encode(data);\n    }\n\n    function getDataWrapperMatchAskWithTakerBidUsingETHAndWETH(\n        LibLooksRare.TakerOrder calldata _takerBid,\n        LibLooksRare.MakerOrder calldata _makerAsk,\n        bytes4 typeNft\n    ) external pure returns (bytes memory _data) {\n        _data = abi.encode(_takerBid, _makerAsk, typeNft);\n    }\n\n    function encodeFees(uint first, uint second) external pure returns (uint) {\n        return (uint(uint16(first)) << 16) + uint(uint16(second));\n    }\n\n    function encodeFeesPlusDataType(uint dataType, uint first, uint second) external pure returns (uint) {\n        return (uint(uint16(dataType)) << 32) + (uint(uint16(first)) << 16) + uint(uint16(second));\n    }\n\n    function encodeDataPlusRoyalties(AdditionalData calldata data) external pure returns (bytes memory) {\n        return abi.encode(data);\n    }\n\n    function encodeBpPlusAccount(uint bp, address account) external pure returns (uint) {\n        return (uint(bp) << 160) + uint(uint160(account));\n    }\n\n    function decodeFees(uint data) external pure returns (uint, uint) {\n        uint first = uint(uint16(data >> 16));\n        uint second = uint(uint16(data));\n        return (first, second);\n    }\n\n    function encodeSudoSwapCall(\n        ILSSVMRouter.PairSwapSpecific[] calldata swapList,\n        address payable ethRecipient,\n        address nftRecipient,\n        uint256 deadline\n    ) external pure returns (bytes memory _data) {\n        _data = abi.encodeWithSelector(\n            ILSSVMRouter.swapETHForSpecificNFTs.selector,\n            swapList,\n            ethRecipient,\n            nftRecipient,\n            deadline\n        );\n    }\n\n    function encodeDataBlur(\n        LibBlur.Input calldata buy,\n        LibBlur.Input calldata sell\n    ) external pure returns (bytes memory) {\n        return abi.encode(buy, sell);\n    }\n}\n"
    },
    "src/exchange/ExchangeV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"./ExchangeV2Core.sol\";\nimport \"../transfer-manager/GhostMarketTransferManager.sol\";\n\ncontract ExchangeV2 is ExchangeV2Core, GhostMarketTransferManager {\n    function __ExchangeV2_init(\n        address _transferProxy,\n        address _erc20TransferProxy,\n        uint newProtocolFee,\n        address newDefaultFeeReceiver,\n        IRoyaltiesProvider newRoyaltiesProvider\n    ) external initializer {\n        __Context_init_unchained();\n        __Ownable_init_unchained();\n        __TransferExecutor_init_unchained(_transferProxy, _erc20TransferProxy);\n        __GhostMarketTransferManager_init_unchained(newProtocolFee, newDefaultFeeReceiver, newRoyaltiesProvider);\n        __OrderValidator_init_unchained();\n    }\n}\n"
    },
    "src/exchange/ExchangeV2Core.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"../librairies/LibFill.sol\";\nimport \"../librairies/LibOrderData.sol\";\nimport \"../librairies/LibDirectTransfer.sol\";\nimport \"./OrderValidator.sol\";\nimport \"../custom-matcher/AssetMatcher.sol\";\n\nimport \"../transfer-manager/TransferExecutor.sol\";\nimport \"../interfaces/ITransferManager.sol\";\nimport \"../librairies/LibDeal.sol\";\n\nabstract contract ExchangeV2Core is\n    Initializable,\n    OwnableUpgradeable,\n    AssetMatcher,\n    TransferExecutor,\n    OrderValidator,\n    ITransferManager\n{\n    using LibTransfer for address;\n\n    //dev @deprecated\n    address private matchAndTransferAdmin;\n\n    uint256 private constant UINT256_MAX = type(uint256).max;\n\n    //state of the orders\n    mapping(bytes32 => uint256) public fills;\n\n    //events\n    event OrderCancelled(\n        bytes32 indexed hash,\n        address indexed maker,\n        LibAsset.AssetType makeAssetType,\n        LibAsset.AssetType takeAssetType\n    );\n    event OrderFilled(\n        bytes32 indexed leftHash,\n        bytes32 indexed rightHash,\n        address indexed leftMaker,\n        address rightMaker,\n        uint newLeftFill,\n        uint newRightFill,\n        LibAsset.AssetType leftAsset,\n        LibAsset.AssetType rightAsset\n    );\n\n    function cancel(LibOrder.Order memory order) external {\n        require(_msgSender() == order.maker, \"not a maker\");\n        require(order.salt != 0, \"0 salt can't be used\");\n        bytes32 orderKeyHash = LibOrder.hashKey(order);\n        fills[orderKeyHash] = UINT256_MAX;\n        emit OrderCancelled(orderKeyHash, order.maker, order.makeAsset.assetType, order.takeAsset.assetType);\n    }\n\n    function bulkCancelOrders(LibOrder.Order[] memory orders) external {\n        uint256 length = orders.length;\n        for (uint256 i; i < length; ++i) {\n            // we can't call this.cancel function as the _msgSender() is changed to the contract address\n            // and the _msgSender() == order.maker check fails\n            require(_msgSender() == orders[i].maker, \"not a maker\");\n            require(orders[i].salt != 0, \"0 salt can't be used\");\n            bytes32 orderKeyHash = LibOrder.hashKey(orders[i]);\n            fills[orderKeyHash] = UINT256_MAX;\n            emit OrderCancelled(\n                orderKeyHash,\n                orders[i].maker,\n                orders[i].makeAsset.assetType,\n                orders[i].takeAsset.assetType\n            );\n        }\n    }\n\n    /**\n     * @dev function, generate sellOrder and buyOrder from parameters and call validateAndMatch() for purchase transaction\n     * @param direct struct with parameters for purchase operation\n     */\n    function directPurchase(LibDirectTransfer.Purchase calldata direct) external payable {\n        LibAsset.AssetType memory paymentAssetType = getPaymentAssetType(direct.paymentToken);\n\n        LibOrder.Order memory sellOrder = LibOrder.Order(\n            direct.sellOrderMaker,\n            LibAsset.Asset(LibAsset.AssetType(direct.nftAssetClass, direct.nftData), direct.sellOrderNftAmount),\n            address(0),\n            LibAsset.Asset(paymentAssetType, direct.sellOrderPaymentAmount),\n            direct.sellOrderSalt,\n            direct.sellOrderStart,\n            direct.sellOrderEnd,\n            direct.sellOrderDataType,\n            direct.sellOrderData\n        );\n\n        LibOrder.Order memory buyOrder = LibOrder.Order(\n            address(0),\n            LibAsset.Asset(paymentAssetType, direct.buyOrderPaymentAmount),\n            address(0),\n            LibAsset.Asset(LibAsset.AssetType(direct.nftAssetClass, direct.nftData), direct.buyOrderNftAmount),\n            0,\n            0,\n            0,\n            getOtherOrderType(direct.sellOrderDataType),\n            direct.buyOrderData\n        );\n\n        validateFull(sellOrder, direct.sellOrderSignature);\n        matchAndTransfer(sellOrder, buyOrder);\n    }\n\n    /**\n     * @dev function, generate sellOrder and buyOrder from parameters and call validateAndMatch() for accept bid transaction\n     * @param direct struct with parameters for accept bid operation\n     */\n    function directAcceptBid(LibDirectTransfer.AcceptBid calldata direct) external payable {\n        LibAsset.AssetType memory paymentAssetType = getPaymentAssetType(direct.paymentToken);\n\n        LibOrder.Order memory buyOrder = LibOrder.Order(\n            direct.bidMaker,\n            LibAsset.Asset(paymentAssetType, direct.bidPaymentAmount),\n            address(0),\n            LibAsset.Asset(LibAsset.AssetType(direct.nftAssetClass, direct.nftData), direct.bidNftAmount),\n            direct.bidSalt,\n            direct.bidStart,\n            direct.bidEnd,\n            direct.bidDataType,\n            direct.bidData\n        );\n\n        LibOrder.Order memory sellOrder = LibOrder.Order(\n            address(0),\n            LibAsset.Asset(LibAsset.AssetType(direct.nftAssetClass, direct.nftData), direct.sellOrderNftAmount),\n            address(0),\n            LibAsset.Asset(paymentAssetType, direct.sellOrderPaymentAmount),\n            0,\n            0,\n            0,\n            getOtherOrderType(direct.bidDataType),\n            direct.sellOrderData\n        );\n\n        validateFull(buyOrder, direct.bidSignature);\n        matchAndTransfer(sellOrder, buyOrder);\n    }\n\n    /**\n     * @dev function, match orders\n     * @param orderLeft left order\n     * @param signatureLeft order left signature\n     * @param orderRight right order\n     * @param signatureRight order right signature\n     */\n    function matchOrders(\n        LibOrder.Order memory orderLeft,\n        bytes memory signatureLeft,\n        LibOrder.Order memory orderRight,\n        bytes memory signatureRight\n    ) external payable {\n        validateOrders(orderLeft, signatureLeft, orderRight, signatureRight);\n        matchAndTransfer(orderLeft, orderRight);\n    }\n\n    /**\n     * @dev function, validate orders\n     * @param orderLeft left order\n     * @param signatureLeft order left signature\n     * @param orderRight right order\n     * @param signatureRight order right signature\n     */\n    function validateOrders(\n        LibOrder.Order memory orderLeft,\n        bytes memory signatureLeft,\n        LibOrder.Order memory orderRight,\n        bytes memory signatureRight\n    ) internal view {\n        validateFull(orderLeft, signatureLeft);\n        validateFull(orderRight, signatureRight);\n        if (orderLeft.taker != address(0)) {\n            if (orderRight.maker != address(0))\n                require(orderRight.maker == orderLeft.taker, \"leftOrder.taker verification failed\");\n        }\n        if (orderRight.taker != address(0)) {\n            if (orderLeft.maker != address(0))\n                require(orderRight.taker == orderLeft.maker, \"rightOrder.taker verification failed\");\n        }\n    }\n\n    /**\n        @notice matches valid orders and transfers their assets\n        @param orderLeft the left order of the match\n        @param orderRight the right order of the match\n    */\n    function matchAndTransfer(LibOrder.Order memory orderLeft, LibOrder.Order memory orderRight) internal {\n        (LibAsset.AssetType memory makeMatch, LibAsset.AssetType memory takeMatch) = matchAssets(orderLeft, orderRight);\n\n        (\n            LibOrderData.GenericOrderData memory leftOrderData,\n            LibOrderData.GenericOrderData memory rightOrderData,\n            LibFill.FillResult memory newFill\n        ) = parseOrdersSetFillEmitMatch(orderLeft, orderRight);\n\n        (uint totalMakeValue, uint totalTakeValue) = doTransfers(\n            LibDeal.DealSide({\n                asset: LibAsset.Asset({assetType: makeMatch, value: newFill.leftValue}),\n                payouts: leftOrderData.payouts,\n                originFees: leftOrderData.originFees,\n                proxy: proxies[makeMatch.assetClass],\n                from: orderLeft.maker\n            }),\n            LibDeal.DealSide({\n                asset: LibAsset.Asset(takeMatch, newFill.rightValue),\n                payouts: rightOrderData.payouts,\n                originFees: rightOrderData.originFees,\n                proxy: proxies[takeMatch.assetClass],\n                from: orderRight.maker\n            }),\n            getDealData(\n                makeMatch.assetClass,\n                takeMatch.assetClass,\n                orderLeft.dataType,\n                orderRight.dataType,\n                leftOrderData,\n                rightOrderData\n            )\n        );\n        if (makeMatch.assetClass == LibAsset.ETH_ASSET_CLASS) {\n            require(takeMatch.assetClass != LibAsset.ETH_ASSET_CLASS, \"wrong takeMatch.assetClass\");\n            require(msg.value >= totalMakeValue, \"not enough eth\");\n            if (msg.value > totalMakeValue) {\n                address(msg.sender).transferEth(msg.value - (totalMakeValue));\n            }\n        } else if (takeMatch.assetClass == LibAsset.ETH_ASSET_CLASS) {\n            require(msg.value >= totalTakeValue, \"not enough eth\");\n            if (msg.value > totalTakeValue) {\n                address(msg.sender).transferEth(msg.value - (totalTakeValue));\n            }\n        }\n\n        bytes32 leftOrderKeyHash = LibOrder.hashKey(orderLeft);\n        bytes32 rightOrderKeyHash = LibOrder.hashKey(orderRight);\n        emit OrderFilled(\n            leftOrderKeyHash,\n            rightOrderKeyHash,\n            orderLeft.maker,\n            orderRight.maker,\n            newFill.rightValue,\n            newFill.leftValue,\n            makeMatch,\n            takeMatch\n        );\n    }\n\n    function parseOrdersSetFillEmitMatch(\n        LibOrder.Order memory orderLeft,\n        LibOrder.Order memory orderRight\n    )\n        internal\n        returns (\n            LibOrderData.GenericOrderData memory leftOrderData,\n            LibOrderData.GenericOrderData memory rightOrderData,\n            LibFill.FillResult memory newFill\n        )\n    {\n        bytes32 leftOrderKeyHash = LibOrder.hashKey(orderLeft);\n        bytes32 rightOrderKeyHash = LibOrder.hashKey(orderRight);\n\n        address msgSender = _msgSender();\n        if (orderLeft.maker == address(0)) {\n            orderLeft.maker = msgSender;\n        }\n        if (orderRight.maker == address(0)) {\n            orderRight.maker = msgSender;\n        }\n\n        leftOrderData = LibOrderData.parse(orderLeft);\n        rightOrderData = LibOrderData.parse(orderRight);\n\n        newFill = setFillEmitMatch(\n            orderLeft,\n            orderRight,\n            leftOrderKeyHash,\n            rightOrderKeyHash,\n            leftOrderData.isMakeFill,\n            rightOrderData.isMakeFill\n        );\n    }\n\n    function getDealData(\n        bytes4 makeMatchAssetClass,\n        bytes4 takeMatchAssetClass,\n        bytes4 leftDataType,\n        bytes4 rightDataType,\n        LibOrderData.GenericOrderData memory leftOrderData,\n        LibOrderData.GenericOrderData memory rightOrderData\n    ) internal pure returns (LibDeal.DealData memory dealData) {\n        dealData.feeSide = LibFeeSide.getFeeSide(makeMatchAssetClass, takeMatchAssetClass);\n        dealData.maxFeesBasePoint = getMaxFee(\n            leftDataType,\n            rightDataType,\n            leftOrderData,\n            rightOrderData,\n            dealData.feeSide\n        );\n    }\n\n    /**\n        @notice determines the max amount of fees for the match\n        @param dataTypeLeft data type of the left order\n        @param dataTypeRight data type of the right order\n        @param leftOrderData data of the left order\n        @param rightOrderData data of the right order\n        @param feeSide fee side of the match\n        @return max fee amount in base points\n    */\n    function getMaxFee(\n        bytes4 dataTypeLeft,\n        bytes4 dataTypeRight,\n        LibOrderData.GenericOrderData memory leftOrderData,\n        LibOrderData.GenericOrderData memory rightOrderData,\n        LibFeeSide.FeeSide feeSide\n    ) internal pure returns (uint) {\n        if (\n            dataTypeLeft != LibOrderDataV3.V3_SELL &&\n            dataTypeRight != LibOrderDataV3.V3_SELL &&\n            dataTypeLeft != LibOrderDataV3.V3_BUY &&\n            dataTypeRight != LibOrderDataV3.V3_BUY\n        ) {\n            return 0;\n        }\n\n        uint matchFees = getSumFees(leftOrderData.originFees, rightOrderData.originFees);\n        uint maxFee;\n        if (feeSide == LibFeeSide.FeeSide.LEFT) {\n            maxFee = rightOrderData.maxFeesBasePoint;\n            require(dataTypeLeft == LibOrderDataV3.V3_BUY && dataTypeRight == LibOrderDataV3.V3_SELL, \"wrong V3 type1\");\n        } else if (feeSide == LibFeeSide.FeeSide.RIGHT) {\n            maxFee = leftOrderData.maxFeesBasePoint;\n            require(dataTypeRight == LibOrderDataV3.V3_BUY && dataTypeLeft == LibOrderDataV3.V3_SELL, \"wrong V3 type2\");\n        } else {\n            return 0;\n        }\n        require(maxFee > 0 && maxFee >= matchFees && maxFee <= 1000, \"wrong maxFee\");\n\n        return maxFee;\n    }\n\n    /**\n        @notice calculates amount of fees for the match\n        @param originLeft origin fees of the left order\n        @param originRight origin fees of the right order\n        @return sum of all fees for the match (protcolFee + leftOrder.originFees + rightOrder.originFees)\n     */\n    function getSumFees(\n        LibPart.Part[] memory originLeft,\n        LibPart.Part[] memory originRight\n    ) internal pure returns (uint) {\n        uint result = 0;\n\n        //adding left origin fees\n        for (uint i; i < originLeft.length; i++) {\n            result = result + originLeft[i].value;\n        }\n\n        //adding right origin fees\n        for (uint i; i < originRight.length; i++) {\n            result = result + originRight[i].value;\n        }\n\n        return result;\n    }\n\n    /**\n        @notice calculates fills for the matched orders and set them in \"fills\" mapping\n        @param orderLeft left order of the match\n        @param orderRight right order of the match\n        @param leftMakeFill true if the left orders uses make-side fills, false otherwise\n        @param rightMakeFill true if the right orders uses make-side fills, false otherwise\n        @return returns change in orders' fills by the match \n    */\n    function setFillEmitMatch(\n        LibOrder.Order memory orderLeft,\n        LibOrder.Order memory orderRight,\n        bytes32 leftOrderKeyHash,\n        bytes32 rightOrderKeyHash,\n        bool leftMakeFill,\n        bool rightMakeFill\n    ) internal returns (LibFill.FillResult memory) {\n        uint leftOrderFill = getOrderFill(orderLeft.salt, leftOrderKeyHash);\n        uint rightOrderFill = getOrderFill(orderRight.salt, rightOrderKeyHash);\n        LibFill.FillResult memory newFill = LibFill.fillOrder(\n            orderLeft,\n            orderRight,\n            leftOrderFill,\n            rightOrderFill,\n            leftMakeFill,\n            rightMakeFill\n        );\n\n        require(newFill.rightValue > 0 && newFill.leftValue > 0, \"nothing to fill\");\n\n        if (orderLeft.salt != 0) {\n            if (leftMakeFill) {\n                fills[leftOrderKeyHash] = leftOrderFill + (newFill.leftValue);\n            } else {\n                fills[leftOrderKeyHash] = leftOrderFill + (newFill.rightValue);\n            }\n        }\n\n        if (orderRight.salt != 0) {\n            if (rightMakeFill) {\n                fills[rightOrderKeyHash] = rightOrderFill + (newFill.rightValue);\n            } else {\n                fills[rightOrderKeyHash] = rightOrderFill + (newFill.leftValue);\n            }\n        }\n\n        return newFill;\n    }\n\n    function getOrderFill(uint salt, bytes32 hash) internal view returns (uint fill) {\n        if (salt == 0) {\n            fill = 0;\n        } else {\n            fill = fills[hash];\n        }\n    }\n\n    function matchAssets(\n        LibOrder.Order memory orderLeft,\n        LibOrder.Order memory orderRight\n    ) internal view returns (LibAsset.AssetType memory makeMatch, LibAsset.AssetType memory takeMatch) {\n        makeMatch = matchAssets(orderLeft.makeAsset.assetType, orderRight.takeAsset.assetType);\n        require(makeMatch.assetClass != 0, \"assets don't match\");\n        takeMatch = matchAssets(orderLeft.takeAsset.assetType, orderRight.makeAsset.assetType);\n        require(takeMatch.assetClass != 0, \"assets don't match\");\n    }\n\n    function validateFull(LibOrder.Order memory order, bytes memory signature) internal view {\n        LibOrder.validateOrderTime(order);\n        validate(order, signature);\n    }\n\n    function getPaymentAssetType(address token) internal pure returns (LibAsset.AssetType memory) {\n        LibAsset.AssetType memory result;\n        if (token == address(0)) {\n            result.assetClass = LibAsset.ETH_ASSET_CLASS;\n        } else {\n            result.assetClass = LibAsset.ERC20_ASSET_CLASS;\n            result.data = abi.encode(token);\n        }\n        return result;\n    }\n\n    function getOtherOrderType(bytes4 dataType) internal pure returns (bytes4) {\n        if (dataType == LibOrderDataV3.V3_SELL) {\n            return LibOrderDataV3.V3_BUY;\n        }\n        if (dataType == LibOrderDataV3.V3_BUY) {\n            return LibOrderDataV3.V3_SELL;\n        }\n        return dataType;\n    }\n\n    uint256[49] private __gap;\n}\n"
    },
    "src/exchange/OrderValidator.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"../interfaces/IERC1271.sol\";\nimport \"../librairies/LibOrder.sol\";\nimport \"../librairies/LibSignature.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol\";\n\nabstract contract OrderValidator is Initializable, ContextUpgradeable, EIP712Upgradeable {\n    using LibSignature for bytes32;\n    using AddressUpgradeable for address;\n\n    bytes4 internal constant MAGICVALUE = 0x1626ba7e;\n\n    function __OrderValidator_init_unchained() internal initializer {\n        __EIP712_init_unchained(\"GhostMarket\", \"2\");\n    }\n\n    function validate(LibOrder.Order memory order, bytes memory signature) internal view {\n        if (order.salt == 0) {\n            if (order.maker != address(0)) {\n                require(_msgSender() == order.maker, \"maker is not tx sender\");\n            }\n        } else {\n            if (_msgSender() != order.maker) {\n                bytes32 hash = LibOrder.hash(order);\n                // if maker is contract checking ERC1271 signature\n                if (order.maker.isContract()) {\n                    require(\n                        IERC1271(order.maker).isValidSignature(_hashTypedDataV4(hash), signature) == MAGICVALUE,\n                        \"contract order signature verification error\"\n                    );\n                } else {\n                    // if maker is not contract then checking ECDSA signature\n                    if (_hashTypedDataV4(hash).recover(signature) != order.maker) {\n                        revert(\"order signature verification error\");\n                    } else {\n                        require(order.maker != address(0), \"no maker\");\n                    }\n                }\n            }\n        }\n    }\n\n    uint256[50] private __gap;\n}\n"
    },
    "src/exchange/tests/ExchangeV10.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"../ExchangeV2.sol\";\n\ncontract ExchangeV10 is ExchangeV2 {\n    function getSomething() external pure returns (uint) {\n        return 10;\n    }\n}\n"
    },
    "src/exchange/tests/OrderValidatorTest.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"../OrderValidator.sol\";\n\ncontract OrderValidatorTest is OrderValidator {\n    function __OrderValidatorTest_init() external initializer {\n        __OrderValidator_init_unchained();\n    }\n\n    function validateOrderTest(LibOrder.Order calldata order, bytes calldata signature) external view {\n        return validate(order, signature);\n    }\n}\n"
    },
    "src/exchange/tests/TestExchangeV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"../ExchangeV2.sol\";\nimport \"../ExchangeV2Core.sol\";\nimport \"../../transfer-manager/GhostMarketTransferManager.sol\";\n\ncontract TestExchangeV2 is ExchangeV2 {\n    function matchAndTransferExternal(\n        LibOrder.Order memory orderLeft,\n        LibOrder.Order memory orderRight\n    ) public payable {\n        matchAndTransfer(orderLeft, orderRight);\n    }\n\n    uint256[50] private __gap;\n}\n"
    },
    "src/exchange/tests/TestHelper.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"../ExchangeV2.sol\";\n\ncontract TestHelper {\n    function encode(LibOrderDataV1.DataV1 memory data) external pure returns (bytes memory) {\n        return abi.encode(data);\n    }\n\n    function encodeV2(LibOrderDataV2.DataV2 memory data) external pure returns (bytes memory) {\n        return abi.encode(data);\n    }\n\n    function encodeV3_SELL(LibOrderDataV3.DataV3_SELL memory data) external pure returns (bytes memory) {\n        return abi.encode(data);\n    }\n\n    function encodeV3_BUY(LibOrderDataV3.DataV3_BUY memory data) external pure returns (bytes memory) {\n        return abi.encode(data);\n    }\n\n    function encodeOriginFeeIntoUint(address account, uint96 value) external pure returns (uint256) {\n        return (uint256(value) << 160) + uint256(uint160(account));\n    }\n\n    function hashKey(LibOrder.Order calldata order) external pure returns (bytes32) {\n        return LibOrder.hashKey(order);\n    }\n\n    function hashV2(\n        address maker,\n        LibAsset.Asset memory makeAsset,\n        LibAsset.Asset memory takeAsset,\n        uint256 salt,\n        bytes memory data\n    ) public pure returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(maker, LibAsset.hash(makeAsset.assetType), LibAsset.hash(takeAsset.assetType), salt, data)\n            );\n    }\n}\n"
    },
    "src/interfaces/IAssetMatcher.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"../librairies/LibAsset.sol\";\n\ninterface IAssetMatcher {\n    function matchAssets(\n        LibAsset.AssetType memory leftAssetType,\n        LibAsset.AssetType memory rightAssetType\n    ) external view returns (LibAsset.AssetType memory);\n}\n"
    },
    "src/interfaces/IERC1155LazyMint.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"../interfaces/IERC1155Upgradeable.sol\";\nimport \"../librairies/LibERC1155LazyMint.sol\";\n\ninterface IERC1155LazyMint is IERC1155Upgradeable {\n    function mintAndTransfer(LibERC1155LazyMint.Mint1155Data memory data, address to, uint256 _amount) external;\n\n    function transferFromOrMint(\n        LibERC1155LazyMint.Mint1155Data memory data,\n        address from,\n        address to,\n        uint256 amount\n    ) external;\n}\n"
    },
    "src/interfaces/IERC1155Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155Upgradeable is IERC165Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(\n        address[] calldata accounts,\n        uint256[] calldata ids\n    ) external view returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "src/interfaces/IERC1271.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nabstract contract IERC1271 {\n    /**\n     * @dev Should return whether the signature provided is valid for the provided data\n     * @param _hash Hash of the data signed on the behalf of address(this)\n     * @param _signature Signature byte array associated with _data\n     *\n     * MUST return the bytes4 magic value 0x1626ba7e when function passes.\n     * MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5)\n     * MUST allow external calls\n     */\n    function isValidSignature(\n        bytes32 _hash,\n        bytes calldata _signature\n    ) external view virtual returns (bytes4 magicValue);\n}\n"
    },
    "src/interfaces/IERC20TransferProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\n\ninterface IERC20TransferProxy {\n    function erc20safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) external;\n}\n"
    },
    "src/interfaces/IERC2981.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"../librairies/LibPart.sol\";\n\n///\n/// @dev Interface for the NFT Royalty Standard\n///\n//interface IERC2981 is IERC165 {\ninterface IERC2981 {\n    /// ERC165 bytes to add to interface array - set in parent contract\n    /// implementing this standard\n    ///\n    /// bytes4(keccak256(\"royaltyInfo(uint256,uint256)\")) == 0x2a55205a\n    /// bytes4 private constant _INTERFACE_ID_ERC2981 = 0x2a55205a;\n    /// _registerInterface(_INTERFACE_ID_ERC2981);\n\n    /// @notice Called with the sale price to determine how much royalty\n    //          is owed and to whom.\n    /// @param _tokenId - the NFT asset queried for royalty information\n    /// @param _salePrice - the sale price of the NFT asset specified by _tokenId\n    /// @return receiver - address of who should be sent the royalty payment\n    /// @return royaltyAmount - the royalty payment amount for _salePrice\n    function royaltyInfo(\n        uint256 _tokenId,\n        uint256 _salePrice\n    ) external view returns (address receiver, uint256 royaltyAmount);\n}\n"
    },
    "src/interfaces/IERC2981Royalties.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\n/// @title IERC2981Royalties\n/// @dev Interface for the ERC2981 - Token Royalty standard\ninterface IERC2981Royalties {\n    /// @notice Called with the sale price to determine how much royalty\n    //          is owed and to whom.\n    /// @param _tokenId - the NFT asset queried for royalty information\n    /// @param _value - the sale price of the NFT asset specified by _tokenId\n    /// @return _receiver - address of who should be sent the royalty payment\n    /// @return _royaltyAmount - the royalty payment amount for value sale price\n    function royaltyInfo(\n        uint256 _tokenId,\n        uint256 _value\n    ) external view returns (address _receiver, uint256 _royaltyAmount);\n}\n"
    },
    "src/interfaces/IERC721LazyMint.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"../interfaces/IERC721Upgradeable.sol\";\nimport \"../librairies/LibERC721LazyMint.sol\";\n\ninterface IERC721LazyMint is IERC721Upgradeable {\n    function mintAndTransfer(LibERC721LazyMint.Mint721Data memory data, address to) external;\n\n    function transferFromOrMint(LibERC721LazyMint.Mint721Data memory data, address from, address to) external;\n}\n"
    },
    "src/interfaces/IERC721Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721Upgradeable is IERC165Upgradeable {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n}\n"
    },
    "src/interfaces/IExchangeV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nabstract contract IExchangeV2 {\n    function setAssetMatcher(bytes4 assetType, address matcher) external virtual;\n}\n"
    },
    "src/interfaces/INftTransferProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\";\n\ninterface INftTransferProxy {\n    function erc721safeTransferFrom(IERC721Upgradeable token, address from, address to, uint256 tokenId) external;\n\n    function erc1155safeTransferFrom(\n        IERC1155Upgradeable token,\n        address from,\n        address to,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "src/interfaces/IRoyaltiesProvider.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"../librairies/LibPart.sol\";\n\ninterface IRoyaltiesProvider {\n    function getRoyalties(address token, uint256 tokenId) external returns (LibPart.Part[] memory);\n}\n"
    },
    "src/interfaces/ITransferExecutor.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"../librairies/LibAsset.sol\";\n\nabstract contract ITransferExecutor {\n    function transfer(LibAsset.Asset memory asset, address from, address to, address proxy) internal virtual;\n}\n"
    },
    "src/interfaces/ITransferManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"../librairies/LibDeal.sol\";\nimport \"./ITransferExecutor.sol\";\n\nabstract contract ITransferManager is ITransferExecutor {\n    function doTransfers(\n        LibDeal.DealSide memory left,\n        LibDeal.DealSide memory right,\n        LibDeal.DealData memory dealData\n    ) internal virtual returns (uint totalMakeValue, uint totalTakeValue);\n}\n"
    },
    "src/interfaces/ITransferProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"../librairies/LibAsset.sol\";\n\ninterface ITransferProxy {\n    function transfer(LibAsset.Asset calldata asset, address from, address to) external;\n}\n"
    },
    "src/librairies/BpLibrary.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nlibrary BpLibrary {\n    function bp(uint256 value, uint256 bpValue) internal pure returns (uint256) {\n        return (value * (bpValue)) / (10000);\n    }\n}\n"
    },
    "src/librairies/ERC1271.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nabstract contract ERC1271 {\n    // bytes4(keccak256(\"isValidSignature(bytes,bytes)\")\n    bytes4 internal constant MAGICVALUE = 0x1626ba7e;\n\n    /**\n     * @dev Should return whether the signature provided is valid for the provided data\n     * @param _hash Hash of the data signed on the behalf of address(this)\n     * @param _signature Signature byte array associated with _data\n     *\n     * MUST return the bytes4 magic value 0x1626ba7e when function passes.\n     * MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5)\n     * MUST allow external calls\n     */\n    function isValidSignature(\n        bytes32 _hash,\n        bytes calldata _signature\n    ) external view virtual returns (bytes4 magicValue);\n}\n"
    },
    "src/librairies/LibAsset.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nlibrary LibAsset {\n    bytes4 public constant ETH_ASSET_CLASS = bytes4(keccak256(\"ETH\"));\n    bytes4 public constant ERC20_ASSET_CLASS = bytes4(keccak256(\"ERC20\"));\n    bytes4 public constant ERC721_ASSET_CLASS = bytes4(keccak256(\"ERC721\"));\n    bytes4 public constant ERC1155_ASSET_CLASS = bytes4(keccak256(\"ERC1155\"));\n    bytes4 public constant COLLECTION = bytes4(keccak256(\"COLLECTION\"));\n    bytes4 public constant CRYPTO_PUNKS = bytes4(keccak256(\"CRYPTO_PUNKS\"));\n\n    bytes32 public constant ASSET_TYPE_TYPEHASH = keccak256(\"AssetType(bytes4 assetClass,bytes data)\");\n\n    bytes32 public constant ASSET_TYPEHASH =\n        keccak256(\"Asset(AssetType assetType,uint256 value)AssetType(bytes4 assetClass,bytes data)\");\n\n    struct AssetType {\n        bytes4 assetClass;\n        bytes data;\n    }\n\n    struct Asset {\n        AssetType assetType;\n        uint256 value;\n    }\n\n    function hash(AssetType memory assetType) internal pure returns (bytes32) {\n        return keccak256(abi.encode(ASSET_TYPE_TYPEHASH, assetType.assetClass, keccak256(assetType.data)));\n    }\n\n    function hash(Asset memory asset) internal pure returns (bytes32) {\n        return keccak256(abi.encode(ASSET_TYPEHASH, hash(asset.assetType), asset.value));\n    }\n}\n"
    },
    "src/librairies/LibDeal.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"./LibPart.sol\";\nimport \"./LibAsset.sol\";\nimport \"./LibFeeSide.sol\";\n\nlibrary LibDeal {\n    struct DealSide {\n        LibAsset.Asset asset;\n        LibPart.Part[] payouts;\n        LibPart.Part[] originFees;\n        address proxy;\n        address from;\n    }\n\n    struct DealData {\n        uint maxFeesBasePoint;\n        LibFeeSide.FeeSide feeSide;\n    }\n}\n"
    },
    "src/librairies/LibDirectTransfer.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"./LibAsset.sol\";\n\nlibrary LibDirectTransfer {\n    //LibDirectTransfers\n    /*All buy parameters need for create buyOrder and sellOrder*/\n    struct Purchase {\n        address sellOrderMaker; //\n        uint256 sellOrderNftAmount;\n        bytes4 nftAssetClass;\n        bytes nftData;\n        uint256 sellOrderPaymentAmount;\n        address paymentToken;\n        uint256 sellOrderSalt;\n        uint sellOrderStart;\n        uint sellOrderEnd;\n        bytes4 sellOrderDataType;\n        bytes sellOrderData;\n        bytes sellOrderSignature;\n        uint256 buyOrderPaymentAmount;\n        uint256 buyOrderNftAmount;\n        bytes buyOrderData;\n    }\n\n    /*All accept bid parameters need for create buyOrder and sellOrder*/\n    struct AcceptBid {\n        address bidMaker; //\n        uint256 bidNftAmount;\n        bytes4 nftAssetClass;\n        bytes nftData;\n        uint256 bidPaymentAmount;\n        address paymentToken;\n        uint256 bidSalt;\n        uint bidStart;\n        uint bidEnd;\n        bytes4 bidDataType;\n        bytes bidData;\n        bytes bidSignature;\n        uint256 sellOrderPaymentAmount;\n        uint256 sellOrderNftAmount;\n        bytes sellOrderData;\n    }\n}\n"
    },
    "src/librairies/LibERC1155LazyMint.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"./LibPart.sol\";\n\nlibrary LibERC1155LazyMint {\n    bytes4 public constant ERC1155_LAZY_ASSET_CLASS = bytes4(keccak256(\"ERC1155_LAZY\"));\n\n    struct Mint1155Data {\n        uint tokenId;\n        string tokenURI;\n        uint amount;\n        address minter;\n        LibPart.Part[] royalties;\n        bytes signature;\n    }\n\n    bytes32 public constant MINT_AND_TRANSFER_TYPEHASH =\n        keccak256(\n            \"Mint1155(uint256 tokenId,string tokenURI,uint256 amount,address minter,Part[] royalties)Part(address recipient,uint256 value)\"\n        );\n\n    function hash(Mint1155Data memory data) internal pure returns (bytes32) {\n        bytes32[] memory royaltiesBytes = new bytes32[](data.royalties.length);\n        uint length = data.royalties.length;\n        for (uint i; i < length; ++i) {\n            royaltiesBytes[i] = LibPart.hash(data.royalties[i]);\n        }\n        return\n            keccak256(\n                abi.encode(\n                    MINT_AND_TRANSFER_TYPEHASH,\n                    data.tokenId,\n                    keccak256(bytes(data.tokenURI)),\n                    data.amount,\n                    data.minter,\n                    keccak256(abi.encodePacked(royaltiesBytes))\n                )\n            );\n    }\n}\n"
    },
    "src/librairies/LibERC721LazyMint.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"./LibPart.sol\";\n\nlibrary LibERC721LazyMint {\n    bytes4 public constant ERC721_LAZY_ASSET_CLASS = bytes4(keccak256(\"ERC721_LAZY\"));\n\n    struct Mint721Data {\n        uint tokenId;\n        string tokenURI;\n        address minter;\n        LibPart.Part[] royalties;\n        bytes signature;\n    }\n\n    bytes32 public constant MINT_AND_TRANSFER_TYPEHASH =\n        keccak256(\n            \"Mint721(uint256 tokenId,string tokenURI,address minter,Part[] royalties)Part(address recipient,uint256 value)\"\n        );\n\n    function hash(Mint721Data memory data) internal pure returns (bytes32) {\n        bytes32[] memory royaltiesBytes = new bytes32[](data.royalties.length);\n        uint length = data.royalties.length;\n        for (uint i; i < length; ++i) {\n            royaltiesBytes[i] = LibPart.hash(data.royalties[i]);\n        }\n        return\n            keccak256(\n                abi.encode(\n                    MINT_AND_TRANSFER_TYPEHASH,\n                    data.tokenId,\n                    keccak256(bytes(data.tokenURI)),\n                    data.minter,\n                    keccak256(abi.encodePacked(royaltiesBytes))\n                )\n            );\n    }\n}\n"
    },
    "src/librairies/LibFeeSide.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"./LibAsset.sol\";\n\nlibrary LibFeeSide {\n    enum FeeSide {\n        NONE,\n        LEFT,\n        RIGHT\n    }\n\n    function getFeeSide(bytes4 leftClass, bytes4 rightClass) internal pure returns (FeeSide) {\n        if (leftClass == LibAsset.ETH_ASSET_CLASS) {\n            return FeeSide.LEFT;\n        }\n        if (rightClass == LibAsset.ETH_ASSET_CLASS) {\n            return FeeSide.RIGHT;\n        }\n        if (leftClass == LibAsset.ERC20_ASSET_CLASS) {\n            return FeeSide.LEFT;\n        }\n        if (rightClass == LibAsset.ERC20_ASSET_CLASS) {\n            return FeeSide.RIGHT;\n        }\n        if (leftClass == LibAsset.ERC1155_ASSET_CLASS) {\n            return FeeSide.LEFT;\n        }\n        if (rightClass == LibAsset.ERC1155_ASSET_CLASS) {\n            return FeeSide.RIGHT;\n        }\n        return FeeSide.NONE;\n    }\n}\n"
    },
    "src/librairies/LibFill.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"./LibOrder.sol\";\n\nlibrary LibFill {\n    struct FillResult {\n        uint leftValue;\n        uint rightValue;\n    }\n\n    struct IsMakeFill {\n        bool leftMake;\n        bool rightMake;\n    }\n\n    /**\n     * @dev Should return filled values\n     * @param leftOrder left order\n     * @param rightOrder right order\n     * @param leftOrderFill current fill of the left order (0 if order is unfilled)\n     * @param rightOrderFill current fill of the right order (0 if order is unfilled)\n     * @param leftIsMakeFill true if left orders fill is calculated from the make side, false if from the take side\n     * @param rightIsMakeFill true if right orders fill is calculated from the make side, false if from the take side\n     */\n    function fillOrder(\n        LibOrder.Order memory leftOrder,\n        LibOrder.Order memory rightOrder,\n        uint leftOrderFill,\n        uint rightOrderFill,\n        bool leftIsMakeFill,\n        bool rightIsMakeFill\n    ) internal pure returns (FillResult memory) {\n        (uint leftMakeValue, uint leftTakeValue) = LibOrder.calculateRemaining(\n            leftOrder,\n            leftOrderFill,\n            leftIsMakeFill\n        );\n        (uint rightMakeValue, uint rightTakeValue) = LibOrder.calculateRemaining(\n            rightOrder,\n            rightOrderFill,\n            rightIsMakeFill\n        );\n\n        //We have 3 cases here:\n        if (rightTakeValue > leftMakeValue) {\n            //1nd: left order should be fully filled\n            return fillLeft(leftMakeValue, leftTakeValue, rightOrder.makeAsset.value, rightOrder.takeAsset.value);\n        } //2st: right order should be fully filled or 3d: both should be fully filled if required values are the same\n        return fillRight(leftOrder.makeAsset.value, leftOrder.takeAsset.value, rightMakeValue, rightTakeValue);\n    }\n\n    function fillRight(\n        uint leftMakeValue,\n        uint leftTakeValue,\n        uint rightMakeValue,\n        uint rightTakeValue\n    ) internal pure returns (FillResult memory result) {\n        uint makerValue = LibMath.safeGetPartialAmountFloor(rightTakeValue, leftMakeValue, leftTakeValue);\n        require(makerValue <= rightMakeValue, \"fillRight: unable to fill\");\n        return FillResult(rightTakeValue, makerValue);\n    }\n\n    function fillLeft(\n        uint leftMakeValue,\n        uint leftTakeValue,\n        uint rightMakeValue,\n        uint rightTakeValue\n    ) internal pure returns (FillResult memory result) {\n        uint rightTake = LibMath.safeGetPartialAmountFloor(leftTakeValue, rightMakeValue, rightTakeValue);\n        require(rightTake <= leftMakeValue, \"fillLeft: unable to fill\");\n        return FillResult(leftMakeValue, leftTakeValue);\n    }\n}\n"
    },
    "src/librairies/LibMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nlibrary LibMath {\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    ///      Reverts if rounding error is >= 0.1%\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount value of target rounded down.\n    function safeGetPartialAmountFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    ) internal pure returns (uint256 partialAmount) {\n        if (isRoundingErrorFloor(numerator, denominator, target)) {\n            revert(\"rounding error\");\n        }\n        partialAmount = (numerator * (target)) / (denominator);\n    }\n\n    /// @dev Checks if rounding error >= 0.1% when rounding down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to multiply with numerator/denominator.\n    /// @return isError Rounding error is present.\n    function isRoundingErrorFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    ) internal pure returns (bool isError) {\n        if (denominator == 0) {\n            revert(\"division by zero\");\n        }\n\n        // The absolute rounding error is the difference between the rounded\n        // value and the ideal value. The relative rounding error is the\n        // absolute rounding error divided by the absolute value of the\n        // ideal value. This is undefined when the ideal value is zero.\n        //\n        // The ideal value is `numerator * target / denominator`.\n        // Let's call `numerator * target % denominator` the remainder.\n        // The absolute error is `remainder / denominator`.\n        //\n        // When the ideal value is zero, we require the absolute error to\n        // be zero. Fortunately, this is always the case. The ideal value is\n        // zero iff `numerator == 0` and/or `target == 0`. In this case the\n        // remainder and absolute error are also zero.\n        if (target == 0 || numerator == 0) {\n            return false;\n        }\n\n        // Otherwise, we want the relative rounding error to be strictly\n        // less than 0.1%.\n        // The relative error is `remainder / (numerator * target)`.\n        // We want the relative error less than 1 / 1000:\n        //        remainder / (numerator * target)  <  1 / 1000\n        // or equivalently:\n        //        1000 * remainder  <  numerator * target\n        // so we have a rounding error iff:\n        //        1000 * remainder  >=  numerator * target\n        uint256 remainder = mulmod(target, numerator, denominator);\n        isError = remainder * (1000) >= numerator * (target);\n    }\n\n    function safeGetPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    ) internal pure returns (uint256 partialAmount) {\n        if (isRoundingErrorCeil(numerator, denominator, target)) {\n            revert(\"rounding error\");\n        }\n        partialAmount = (numerator * (target)) + (denominator - (1)) / (denominator);\n    }\n\n    /// @dev Checks if rounding error >= 0.1% when rounding up.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to multiply with numerator/denominator.\n    /// @return isError Rounding error is present.\n    function isRoundingErrorCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    ) internal pure returns (bool isError) {\n        if (denominator == 0) {\n            revert(\"division by zero\");\n        }\n\n        // See the comments in `isRoundingError`.\n        if (target == 0 || numerator == 0) {\n            // When either is zero, the ideal value and rounded value are zero\n            // and there is no rounding error. (Although the relative error\n            // is undefined.)\n            return false;\n        }\n        // Compute remainder as before\n        uint256 remainder = mulmod(target, numerator, denominator);\n        remainder = denominator - ((remainder) % denominator);\n        isError = remainder * (1000) >= numerator * (target);\n        return isError;\n    }\n}\n"
    },
    "src/librairies/LibOrder.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"./LibAsset.sol\";\nimport \"./LibMath.sol\";\nimport \"./LibOrderDataV3.sol\";\nimport \"./LibOrderDataV2.sol\";\nimport \"./LibOrderDataV1.sol\";\n\nlibrary LibOrder {\n    bytes32 public constant ORDER_TYPEHASH =\n        keccak256(\n            \"Order(address maker,Asset makeAsset,address taker,Asset takeAsset,uint256 salt,uint256 start,uint256 end,bytes4 dataType,bytes data)Asset(AssetType assetType,uint256 value)AssetType(bytes4 assetClass,bytes data)\"\n        );\n\n    bytes4 public constant DEFAULT_ORDER_TYPE = 0xffffffff;\n\n    struct Order {\n        address maker;\n        LibAsset.Asset makeAsset;\n        address taker;\n        LibAsset.Asset takeAsset;\n        uint salt;\n        uint start;\n        uint end;\n        bytes4 dataType;\n        bytes data;\n    }\n\n    function calculateRemaining(\n        Order memory order,\n        uint fill,\n        bool isMakeFill\n    ) internal pure returns (uint makeValue, uint takeValue) {\n        if (isMakeFill) {\n            makeValue = order.makeAsset.value - (fill);\n            takeValue = LibMath.safeGetPartialAmountFloor(order.takeAsset.value, order.makeAsset.value, makeValue);\n        } else {\n            takeValue = order.takeAsset.value - (fill);\n            makeValue = LibMath.safeGetPartialAmountFloor(order.makeAsset.value, order.takeAsset.value, takeValue);\n        }\n    }\n\n    function hashKey(Order memory order) internal pure returns (bytes32) {\n        if (order.dataType == LibOrderDataV1.V1 || order.dataType == DEFAULT_ORDER_TYPE) {\n            return\n                keccak256(\n                    abi.encode(\n                        order.maker,\n                        LibAsset.hash(order.makeAsset.assetType),\n                        LibAsset.hash(order.takeAsset.assetType),\n                        order.salt\n                    )\n                );\n        } else {\n            //order.data is in hash for V2, V3 and all new order\n            return\n                keccak256(\n                    abi.encode(\n                        order.maker,\n                        LibAsset.hash(order.makeAsset.assetType),\n                        LibAsset.hash(order.takeAsset.assetType),\n                        order.salt,\n                        order.data\n                    )\n                );\n        }\n    }\n\n    function hash(Order memory order) internal pure returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(\n                    ORDER_TYPEHASH,\n                    order.maker,\n                    LibAsset.hash(order.makeAsset),\n                    order.taker,\n                    LibAsset.hash(order.takeAsset),\n                    order.salt,\n                    order.start,\n                    order.end,\n                    order.dataType,\n                    keccak256(order.data)\n                )\n            );\n    }\n\n    function validateOrderTime(LibOrder.Order memory order) internal view {\n        require(order.start == 0 || order.start < block.timestamp, \"Order start validation failed\");\n        require(order.end == 0 || order.end > block.timestamp, \"Order end validation failed\");\n    }\n}\n"
    },
    "src/librairies/LibOrderData.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"./LibOrder.sol\";\n\nlibrary LibOrderData {\n    struct GenericOrderData {\n        LibPart.Part[] payouts;\n        LibPart.Part[] originFees;\n        bool isMakeFill;\n        uint maxFeesBasePoint;\n    }\n\n    function parse(LibOrder.Order memory order) internal pure returns (GenericOrderData memory dataOrder) {\n        if (order.dataType == LibOrderDataV1.V1) {\n            LibOrderDataV1.DataV1 memory data = abi.decode(order.data, (LibOrderDataV1.DataV1));\n            dataOrder.payouts = data.payouts;\n            dataOrder.originFees = data.originFees;\n        } else if (order.dataType == LibOrderDataV2.V2) {\n            LibOrderDataV2.DataV2 memory data = abi.decode(order.data, (LibOrderDataV2.DataV2));\n            dataOrder.payouts = data.payouts;\n            dataOrder.originFees = data.originFees;\n            dataOrder.isMakeFill = data.isMakeFill;\n        } else if (order.dataType == LibOrderDataV3.V3_SELL) {\n            LibOrderDataV3.DataV3_SELL memory data = abi.decode(order.data, (LibOrderDataV3.DataV3_SELL));\n            dataOrder.payouts = parsePayouts(data.payouts);\n            dataOrder.originFees = parseOriginFeeData(data.originFeeFirst, data.originFeeSecond);\n            dataOrder.isMakeFill = true;\n            dataOrder.maxFeesBasePoint = data.maxFeesBasePoint;\n        } else if (order.dataType == LibOrderDataV3.V3_BUY) {\n            LibOrderDataV3.DataV3_BUY memory data = abi.decode(order.data, (LibOrderDataV3.DataV3_BUY));\n            dataOrder.payouts = parsePayouts(data.payouts);\n            dataOrder.originFees = parseOriginFeeData(data.originFeeFirst, data.originFeeSecond);\n            dataOrder.isMakeFill = false;\n        } else if (order.dataType == 0xffffffff) {} else {\n            revert(\"Unknown Order data type\");\n        }\n        if (dataOrder.payouts.length == 0) {\n            dataOrder.payouts = payoutSet(order.maker);\n        }\n    }\n\n    function payoutSet(address orderAddress) internal pure returns (LibPart.Part[] memory) {\n        LibPart.Part[] memory payout = new LibPart.Part[](1);\n        payout[0].account = payable(orderAddress);\n        payout[0].value = 10000;\n        return payout;\n    }\n\n    function parseOriginFeeData(uint dataFirst, uint dataSecond) internal pure returns (LibPart.Part[] memory) {\n        LibPart.Part[] memory originFee;\n\n        if (dataFirst > 0 && dataSecond > 0) {\n            originFee = new LibPart.Part[](2);\n\n            originFee[0] = uintToLibPart(dataFirst);\n            originFee[1] = uintToLibPart(dataSecond);\n        }\n\n        if (dataFirst > 0 && dataSecond == 0) {\n            originFee = new LibPart.Part[](1);\n\n            originFee[0] = uintToLibPart(dataFirst);\n        }\n\n        if (dataFirst == 0 && dataSecond > 0) {\n            originFee = new LibPart.Part[](1);\n\n            originFee[0] = uintToLibPart(dataSecond);\n        }\n\n        return originFee;\n    }\n\n    function parsePayouts(uint data) internal pure returns (LibPart.Part[] memory) {\n        LibPart.Part[] memory payouts;\n\n        if (data > 0) {\n            payouts = new LibPart.Part[](1);\n            payouts[0] = uintToLibPart(data);\n        }\n\n        return payouts;\n    }\n\n    /**\n        @notice converts uint to LibPart.Part\n        @param data address and value encoded in uint (first 12 bytes )\n        @return result LibPart.Part \n     */\n    function uintToLibPart(uint data) internal pure returns (LibPart.Part memory result) {\n        if (data > 0) {\n            result.account = payable(address(uint160(data)));\n            result.value = uint96(data >> 160);\n        }\n    }\n}\n"
    },
    "src/librairies/LibOrderDataV1.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"./LibPart.sol\";\n\nlibrary LibOrderDataV1 {\n    bytes4 public constant V1 = bytes4(keccak256(\"V1\"));\n\n    struct DataV1 {\n        LibPart.Part[] payouts;\n        LibPart.Part[] originFees;\n    }\n}\n"
    },
    "src/librairies/LibOrderDataV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"./LibPart.sol\";\n\nlibrary LibOrderDataV2 {\n    bytes4 public constant V2 = bytes4(keccak256(\"V2\"));\n\n    struct DataV2 {\n        LibPart.Part[] payouts;\n        LibPart.Part[] originFees;\n        bool isMakeFill;\n    }\n}\n"
    },
    "src/librairies/LibOrderDataV3.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"./LibPart.sol\";\n\nlibrary LibOrderDataV3 {\n    bytes4 public constant V3_SELL = bytes4(keccak256(\"V3_SELL\"));\n    bytes4 public constant V3_BUY = bytes4(keccak256(\"V3_BUY\"));\n\n    struct DataV3_SELL {\n        uint payouts;\n        uint originFeeFirst;\n        uint originFeeSecond;\n        uint maxFeesBasePoint;\n        bytes32 marketplaceMarker;\n    }\n\n    struct DataV3_BUY {\n        uint payouts;\n        uint originFeeFirst;\n        uint originFeeSecond;\n        bytes32 marketplaceMarker;\n    }\n}\n"
    },
    "src/librairies/LibPart.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nlibrary LibPart {\n    bytes32 public constant TYPE_HASH = keccak256(\"Part(address account,uint96 value)\");\n\n    struct Part {\n        address payable account;\n        uint96 value;\n    }\n\n    function hash(Part memory part) internal pure returns (bytes32) {\n        return keccak256(abi.encode(TYPE_HASH, part.account, part.value));\n    }\n}\n"
    },
    "src/librairies/LibSignature.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nlibrary LibSignature {\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        // Check the signature length\n        if (signature.length != 65) {\n            revert(\"ECDSA: invalid signature length\");\n        }\n\n        // Divide the signature in r, s and v variables\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n\n        // ecrecover takes the signature parameters, and the only way to get them\n        // currently is to use assembly.\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            r := mload(add(signature, 0x20))\n            s := mload(add(signature, 0x40))\n            v := byte(0, mload(add(signature, 0x60)))\n        }\n\n        return recover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover-bytes32-bytes-} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (281): 0 < s < secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        require(\n            uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0,\n            \"ECDSA: invalid signature 's' value\"\n        );\n\n        // If the signature is valid (and not malleable), return the signer address\n        // v > 30 is a special case, we need to adjust hash with \"\\x19Ethereum Signed Message:\\n32\"\n        // and v = v - 4\n        address signer;\n        if (v > 30) {\n            require(v - 4 == 27 || v - 4 == 28, \"ECDSA: invalid signature 'v' value\");\n            signer = ecrecover(toEthSignedMessageHash(hash), v - 4, r, s);\n        } else {\n            require(v == 27 || v == 28, \"ECDSA: invalid signature 'v' value\");\n            signer = ecrecover(hash, v, r, s);\n        }\n\n        require(signer != address(0), \"ECDSA: invalid signature\");\n\n        return signer;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * replicates the behavior of the\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\n     * JSON-RPC method.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n}\n"
    },
    "src/librairies/LibTransfer.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nlibrary LibTransfer {\n    function transferEth(address to, uint256 value) internal {\n        (bool success, ) = to.call{value: value}(\"\");\n        require(success, \"LibTransfer BaseCurrency transfer failed\");\n    }\n}\n"
    },
    "src/librairies/tests/LibFeeSideTest.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"../LibFeeSide.sol\";\n\ncontract LibFeeSideTest {\n    function getFeeSideTest(bytes4 maker, bytes4 taker) external pure returns (LibFeeSide.FeeSide) {\n        return LibFeeSide.getFeeSide(maker, taker);\n    }\n}\n"
    },
    "src/librairies/tests/LibFillTest.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"../LibOrder.sol\";\nimport \"../LibFill.sol\";\n\ncontract LibFillTest {\n    function fillOrder(\n        LibOrder.Order calldata leftOrder,\n        LibOrder.Order calldata rightOrder,\n        uint leftOrderFill,\n        uint rightOrderFill,\n        bool leftIsMakeFill,\n        bool rightIsMakeFill\n    ) external pure returns (LibFill.FillResult memory) {\n        return LibFill.fillOrder(leftOrder, rightOrder, leftOrderFill, rightOrderFill, leftIsMakeFill, rightIsMakeFill);\n    }\n}\n"
    },
    "src/librairies/tests/LibOrderTest.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"../LibOrder.sol\";\n\ncontract LibOrderTest {\n    function calculateRemaining(\n        LibOrder.Order calldata order,\n        uint fill,\n        bool isMakeFill\n    ) external pure returns (uint makeAmount, uint takeAmount) {\n        return LibOrder.calculateRemaining(order, fill, isMakeFill);\n    }\n\n    function hashKey(LibOrder.Order calldata order) external pure returns (bytes32) {\n        return LibOrder.hashKey(order);\n    }\n\n    function hashKeyOnChain(LibOrder.Order calldata order) external pure returns (bytes32) {\n        return LibOrder.hashKey(order);\n    }\n\n    function validate(LibOrder.Order calldata order) external view {\n        LibOrder.validateOrderTime(order);\n    }\n\n    function hashV2(\n        address maker,\n        LibAsset.Asset memory makeAsset,\n        LibAsset.Asset memory takeAsset,\n        uint salt,\n        bytes memory data\n    ) public pure returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(maker, LibAsset.hash(makeAsset.assetType), LibAsset.hash(takeAsset.assetType), salt, data)\n            );\n    }\n\n    function hashV1(\n        address maker,\n        LibAsset.Asset memory makeAsset,\n        LibAsset.Asset memory takeAsset,\n        uint salt\n    ) public pure returns (bytes32) {\n        return\n            keccak256(abi.encode(maker, LibAsset.hash(makeAsset.assetType), LibAsset.hash(takeAsset.assetType), salt));\n    }\n}\n"
    },
    "src/librairies/tests/LibSignatureTest.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"../LibSignature.sol\";\n\ncontract LibSignatureTest {\n    using LibSignature for bytes32;\n\n    function recoverFromSigTest(bytes32 hash, bytes memory signature) external pure returns (address) {\n        return hash.recover(signature);\n    }\n\n    function recoverFromParamsTest(bytes32 hash, uint8 v, bytes32 r, bytes32 s) external pure returns (address) {\n        return hash.recover(v, r, s);\n    }\n\n    function getKeccak(string memory message) external pure returns (bytes32) {\n        return keccak256(bytes(message));\n    }\n}\n"
    },
    "src/mint/ERC1155PresetMinterPauserUpgradeableCustom.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"./extensions/ERC1155BurnableUpgradeable.sol\";\nimport \"./extensions/ERC1155PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\n/**\n * @dev {ERC1155} token, including:\n *\n *  - ability for holders to burn (destroy) their tokens\n *  - a minter role that allows for token minting (creation)\n *  - a pauser role that allows to stop all token transfers\n *\n * This contract uses {AccessControl} to lock permissioned functions using the\n * different roles - head to its documentation for details.\n *\n * The account that deploys the contract will be granted the minter and pauser\n * roles, as well as the default admin role, which will let it grant both minter\n * and pauser roles to other accounts.\n */\ncontract ERC1155PresetMinterPauserUpgradeableCustom is\n    Initializable,\n    ContextUpgradeable,\n    AccessControlEnumerableUpgradeable,\n    ERC1155BurnableUpgradeable,\n    ERC1155PausableUpgradeable\n{\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n    bytes32 public constant PAUSER_ROLE = keccak256(\"PAUSER_ROLE\");\n\n    /**\n     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE`, and `PAUSER_ROLE` to the account that\n     * deploys the contract.\n     */\n    function __ERC1155PresetMinterPauser_init(string memory uri) internal initializer {\n        __Context_init_unchained();\n        __ERC165_init_unchained();\n        __AccessControl_init_unchained();\n        __AccessControlEnumerable_init_unchained();\n        __ERC1155_init_unchained(uri);\n        __ERC1155Burnable_init_unchained();\n        __Pausable_init_unchained();\n        __ERC1155Pausable_init_unchained();\n        __ERC1155PresetMinterPauser_init_unchained();\n    }\n\n    function __ERC1155PresetMinterPauser_init_unchained() internal initializer {\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\n        _setupRole(MINTER_ROLE, _msgSender());\n        _setupRole(PAUSER_ROLE, _msgSender());\n    }\n\n    function setURI(string memory uri_) external {\n        require(\n            hasRole(DEFAULT_ADMIN_ROLE, _msgSender()),\n            \"ERC1155PresetMinterPauser: must have admin role to set new uri\"\n        );\n        _setURI(uri_);\n    }\n\n    /**\n     * @dev Creates `amount` new tokens for `to`, of token type `id`.\n     *\n     * See {ERC1155-_mint}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `MINTER_ROLE`.\n     */\n    function mint(address to, uint256 id, uint256 amount, bytes memory data) internal virtual {\n        _mint(to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] variant of {mint}.\n     */\n    function mintBatch(address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) internal virtual {\n        require(hasRole(MINTER_ROLE, _msgSender()), \"ERC1155PresetMinterPauser: must have minter role to mint\");\n\n        _mintBatch(to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Pauses all token transfers.\n     *\n     * See {ERC1155Pausable} and {Pausable-_pause}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `PAUSER_ROLE`.\n     */\n    function pause() public virtual {\n        require(hasRole(PAUSER_ROLE, _msgSender()), \"ERC1155PresetMinterPauser: must have pauser role to pause\");\n        _pause();\n    }\n\n    /**\n     * @dev Unpauses all token transfers.\n     *\n     * See {ERC1155Pausable} and {Pausable-_unpause}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `PAUSER_ROLE`.\n     */\n    function unpause() public virtual {\n        require(hasRole(PAUSER_ROLE, _msgSender()), \"ERC1155PresetMinterPauser: must have pauser role to unpause\");\n        _unpause();\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(\n        bytes4 interfaceId\n    ) public view virtual override(AccessControlEnumerableUpgradeable, ERC1155Upgradeable) returns (bool) {\n        return super.supportsInterface(interfaceId);\n    }\n\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual override(ERC1155Upgradeable, ERC1155PausableUpgradeable) {\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\n    }\n\n    uint256[50] private __gap;\n}\n"
    },
    "src/mint/ERC1155Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"../interfaces/IERC1155Upgradeable.sol\";\nimport \"./extensions/IERC1155ReceiverUpgradeable.sol\";\nimport \"./extensions/IERC1155MetadataURIUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the basic standard multi-token.\n * See https://eips.ethereum.org/EIPS/eip-1155\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\n *\n * _Available since v3.1._\n */\ncontract ERC1155Upgradeable is\n    Initializable,\n    ContextUpgradeable,\n    ERC165Upgradeable,\n    IERC1155Upgradeable,\n    IERC1155MetadataURIUpgradeable\n{\n    using AddressUpgradeable for address;\n\n    // Mapping from token ID to account balances\n    mapping(uint256 => mapping(address => uint256)) private _balances;\n\n    // Mapping from account to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\n    string private _uri;\n\n    // custom\n    // Mapping from token ID to supply\n    mapping(uint => uint) private supply;\n    // custom\n    // Mapping from token ID to minted\n    mapping(uint => uint) private minted;\n\n    /**\n     * @dev See {_setURI}.\n     */\n    function __ERC1155_init(string memory uri_) internal initializer {\n        __Context_init_unchained();\n        __ERC165_init_unchained();\n        __ERC1155_init_unchained(uri_);\n    }\n\n    function __ERC1155_init_unchained(string memory uri_) internal initializer {\n        _setURI(uri_);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(\n        bytes4 interfaceId\n    ) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\n        return\n            interfaceId == type(IERC1155Upgradeable).interfaceId ||\n            interfaceId == type(IERC1155MetadataURIUpgradeable).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC1155MetadataURI-uri}.\n     *\n     * This implementation returns the same URI for *all* token types. It relies\n     * on the token type ID substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * Clients calling this function must replace the `\\{id\\}` substring with the\n     * actual token type ID.\n     */\n    function uri(uint256) public view virtual override returns (string memory) {\n        return _uri;\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\n        require(account != address(0), \"ERC1155: balance query for the zero address\");\n        return _balances[id][account];\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOfBatch}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(\n        address[] memory accounts,\n        uint256[] memory ids\n    ) public view virtual override returns (uint256[] memory) {\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\n\n        uint256[] memory batchBalances = new uint256[](accounts.length);\n\n        for (uint256 i = 0; i < accounts.length; ++i) {\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\n        }\n\n        return batchBalances;\n    }\n\n    /**\n     * @dev See {IERC1155-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        require(_msgSender() != operator, \"ERC1155: setting approval status for self\");\n\n        _operatorApprovals[_msgSender()][operator] = approved;\n        emit ApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC1155-isApprovedForAll}.\n     */\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[account][operator];\n    }\n\n    /**\n     * @dev See {IERC1155-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n        _balances[id][from] = fromBalance - amount;\n        _balances[id][to] += amount;\n\n        emit TransferSingle(operator, from, to, id, amount);\n\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\n    }\n\n    /**\n     * @dev See {IERC1155-safeBatchTransferFrom}.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; ++i) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n            _balances[id][from] = fromBalance - amount;\n            _balances[id][to] += amount;\n        }\n\n        emit TransferBatch(operator, from, to, ids, amounts);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Sets a new URI for all token types, by relying on the token type ID\n     * substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\n     * clients with the token type ID.\n     *\n     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\n     * interpreted by clients as\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\n     * for token type ID 0x4cce0.\n     *\n     * See {uri}.\n     *\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\n     * this function emits no events.\n     */\n    function _setURI(string memory newuri) internal virtual {\n        _uri = newuri;\n    }\n\n    /**\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `account`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - If `account` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _mint(address account, uint256 id, uint256 amount, bytes memory data) internal virtual {\n        // custom\n        if (minted[id] > 0 && supply[id] > 0) {\n            uint newMinted = amount + minted[id];\n            require(newMinted <= supply[id], \"more than supply\");\n            minted[id] = newMinted;\n        } else {\n            minted[id] = amount;\n        }\n\n        require(account != address(0), \"ERC1155: mint to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), account, _asSingletonArray(id), _asSingletonArray(amount), data);\n\n        _balances[id][account] += amount;\n        // custom - removed and handled in GhostMarketERC1155.sol\n        // emit TransferSingle(operator, address(0), account, id, amount);\n\n        _doSafeTransferAcceptanceCheck(operator, address(0), account, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _mintBatch(\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        for (uint i = 0; i < ids.length; ++i) {\n            _balances[ids[i]][to] += amounts[i];\n        }\n\n        emit TransferBatch(operator, address(0), to, ids, amounts);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens of token type `id` from `account`\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens of token type `id`.\n     */\n    function _burn(address account, uint256 id, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC1155: burn from the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, account, address(0), _asSingletonArray(id), _asSingletonArray(amount), \"\");\n\n        uint256 accountBalance = _balances[id][account];\n        require(accountBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n        _balances[id][account] = accountBalance - amount;\n\n        emit TransferSingle(operator, account, address(0), id, amount);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     */\n    function _burnBatch(address account, uint256[] memory ids, uint256[] memory amounts) internal virtual {\n        require(account != address(0), \"ERC1155: burn from the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, account, address(0), ids, amounts, \"\");\n\n        for (uint i = 0; i < ids.length; ++i) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 accountBalance = _balances[id][account];\n            require(accountBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n            _balances[id][account] = accountBalance - amount;\n        }\n\n        emit TransferBatch(operator, account, address(0), ids, amounts);\n    }\n\n    // custom\n    /**\n     * @dev lazy burn a NFT, set minted\n     */\n    function _burnLazy(uint256 id, uint256 amount) internal returns (uint256 leftToBurn, uint256 lazyToBurn) {\n        leftToBurn = amount;\n        lazyToBurn = 0;\n        address creator = address(uint160(id >> 96));\n        if (creator == _msgSender()) {\n            lazyToBurn = amount;\n            if (supply[id] != 0) {\n                //calculate Lazy amount available for burn\n                uint256 lazyBalance = supply[id] - minted[id];\n                if (amount > lazyBalance) {\n                    //need to burn more than available\n                    lazyToBurn = lazyBalance;\n                }\n            }\n            minted[id] += amount;\n            leftToBurn = amount - lazyToBurn;\n        }\n    }\n\n    // custom\n    /**\n     * @dev save supply of a NFT\n     */\n    function _saveSupply(uint tokenId, uint _supply) internal {\n        if (supply[tokenId] == 0) {\n            supply[tokenId] = _supply;\n        }\n        // emit Supply(tokenId, _supply);\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `id` and `amount` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    function _doSafeTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155ReceiverUpgradeable(to).onERC1155Received(operator, from, id, amount, data) returns (\n                bytes4 response\n            ) {\n                if (response != IERC1155ReceiverUpgradeable(to).onERC1155Received.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _doSafeBatchTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\n                bytes4 response\n            ) {\n                if (response != IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\n        uint256[] memory array = new uint256[](1);\n        array[0] = element;\n\n        return array;\n    }\n\n    uint256[45] private __gap;\n}\n"
    },
    "src/mint/ERC1271.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nabstract contract ERC1271 {\n    bytes4 public constant ERC1271_INTERFACE_ID = 0xfb855dc9;\n\n    bytes4 public constant ERC1271_RETURN_VALID_SIGNATURE = 0x1626ba7e;\n    bytes4 public constant ERC1271_RETURN_INVALID_SIGNATURE = 0x00000000;\n\n    /**\n     * @dev Function must be implemented by deriving contract\n     * @param _hash Arbitrary length data signed on the behalf of address(this)\n     * @param _signature Signature byte array associated with _data\n     * @return A bytes4 magic value 0x1626ba7e if the signature check passes, 0x00000000 if not\n     *\n     * MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5)\n     * MUST allow external calls\n     */\n    function isValidSignature(bytes32 _hash, bytes memory _signature) public view virtual returns (bytes4);\n\n    function returnIsValidSignatureMagicNumber(bool isValid) internal pure returns (bytes4) {\n        return isValid ? ERC1271_RETURN_VALID_SIGNATURE : ERC1271_RETURN_INVALID_SIGNATURE;\n    }\n}\n"
    },
    "src/mint/ERC1271Validator.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"./ERC1271.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\";\n\nabstract contract ERC1271Validator is EIP712Upgradeable {\n    using AddressUpgradeable for address;\n    using ECDSAUpgradeable for bytes32;\n\n    string private constant SIGNATURE_ERROR = \"signature verification error\";\n    bytes4 internal constant MAGICVALUE = 0x1626ba7e;\n\n    function validate1271(address signer, bytes32 structHash, bytes memory signature) internal view {\n        bytes32 hash = _hashTypedDataV4(structHash);\n\n        address signerFromSig;\n        if (signature.length == 65) {\n            signerFromSig = hash.recover(signature);\n        }\n        if (signerFromSig != signer) {\n            if (signer.isContract()) {\n                require(ERC1271(signer).isValidSignature(hash, signature) == MAGICVALUE, SIGNATURE_ERROR);\n            } else {\n                revert(SIGNATURE_ERROR);\n            }\n        }\n    }\n\n    uint256[50] private __gap;\n}\n"
    },
    "src/mint/ERC721PresetMinterPauserAutoIdUpgradeableCustom.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"./extensions/ERC721URIStorageUpgradeable.sol\";\nimport \"./extensions/ERC721EnumerableUpgradeable.sol\";\nimport \"./extensions/ERC721BurnableUpgradeable.sol\";\nimport \"./extensions/ERC721PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\n/**\n * @dev {ERC721} token, including:\n *\n *  - ability for holders to burn (destroy) their tokens\n *  - a minter role that allows for token minting (creation)\n *  - a pauser role that allows to stop all token transfers\n *  - token ID and URI autogeneration\n *\n * This contract uses {AccessControl} to lock permissioned functions using the\n * different roles - head to its documentation for details.\n *\n * The account that deploys the contract will be granted the minter and pauser\n * roles, as well as the default admin role, which will let it grant both minter\n * and pauser roles to other accounts.\n */\ncontract ERC721PresetMinterPauserAutoIdUpgradeableCustom is\n    Initializable,\n    ContextUpgradeable,\n    AccessControlEnumerableUpgradeable,\n    ERC721EnumerableUpgradeable,\n    ERC721BurnableUpgradeable,\n    ERC721PausableUpgradeable,\n    ERC721URIStorageUpgradeable\n{\n    function initialize(\n        string memory name,\n        string memory symbol,\n        string memory baseTokenURI\n    ) public virtual initializer {\n        __ERC721PresetMinterPauserAutoId_init(name, symbol, baseTokenURI);\n    }\n\n    using CountersUpgradeable for CountersUpgradeable.Counter;\n\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n    bytes32 public constant PAUSER_ROLE = keccak256(\"PAUSER_ROLE\");\n\n    CountersUpgradeable.Counter private _tokenIdTracker;\n\n    string private _baseTokenURI;\n\n    /**\n     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the\n     * account that deploys the contract.\n     *\n     * Token URIs will be autogenerated based on `baseURI` and their token IDs.\n     * See {ERC721-tokenURI}.\n     */\n    function __ERC721PresetMinterPauserAutoId_init(\n        string memory name,\n        string memory symbol,\n        string memory baseTokenURI\n    ) internal initializer {\n        __Context_init_unchained();\n        __ERC165_init_unchained();\n        __AccessControl_init_unchained();\n        __AccessControlEnumerable_init_unchained();\n        __ERC721_init_unchained(name, symbol);\n        __ERC721Enumerable_init_unchained();\n        __ERC721Burnable_init_unchained();\n        __Pausable_init_unchained();\n        __ERC721Pausable_init_unchained();\n        __ERC721PresetMinterPauserAutoId_init_unchained(baseTokenURI);\n        __ERC721URIStorage_init_unchained();\n    }\n\n    function __ERC721PresetMinterPauserAutoId_init_unchained(string memory baseTokenURI) internal initializer {\n        _baseTokenURI = baseTokenURI;\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\n        _setupRole(MINTER_ROLE, _msgSender());\n        _setupRole(PAUSER_ROLE, _msgSender());\n        _tokenIdTracker.increment();\n    }\n\n    function _baseURI() internal view virtual override returns (string memory) {\n        return _baseTokenURI;\n    }\n\n    /**\n     * @dev Creates a new token for `to`. Its token ID will be automatically\n     * assigned (and available on the emitted {IERC721-Transfer} event), and the token\n     * URI autogenerated based on the base URI passed at construction.\n     *\n     * See {ERC721-_mint}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `MINTER_ROLE`.\n     */\n    function mint(address to) internal virtual {\n        // We cannot just use balanceOf to create the new tokenId because tokens\n        // can be burned (destroyed), so we need a separate counter.\n        _mint(to, _tokenIdTracker.current());\n        _tokenIdTracker.increment();\n    }\n\n    function _burn(uint256 tokenId) internal override(ERC721URIStorageUpgradeable, ERC721Upgradeable) {\n        ERC721URIStorageUpgradeable._burn(tokenId);\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(\n        uint256 tokenId\n    ) public view virtual override(ERC721URIStorageUpgradeable, ERC721Upgradeable) returns (string memory) {\n        return ERC721URIStorageUpgradeable.tokenURI(tokenId);\n    }\n\n    function _safeMint(address to, uint256 tokenId) internal virtual override {\n        super._safeMint(to, tokenId);\n    }\n\n    /**\n     * @dev update tokenURI\n     */\n    function _setTokenURI(uint256 tokenId, string memory tokenUri) internal virtual override {\n        ERC721URIStorageUpgradeable._setTokenURI(tokenId, tokenUri);\n    }\n\n    function getCurrentCounter() public view returns (uint256) {\n        return _tokenIdTracker.current();\n    }\n\n    function getLastTokenID() public view returns (uint256) {\n        if (_tokenIdTracker.current() == 1) {\n            return _tokenIdTracker.current();\n        } else return _tokenIdTracker.current() - 1;\n    }\n\n    function setBaseTokenURI(string memory baseTokenURI) public {\n        require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), \"must have ADMIN role to change this\");\n        _baseTokenURI = baseTokenURI;\n    }\n\n    /**\n     * @dev Pauses all token transfers.\n     *\n     * See {ERC721Pausable} and {Pausable-_pause}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `PAUSER_ROLE`.\n     */\n    function pause() public virtual {\n        require(hasRole(PAUSER_ROLE, _msgSender()), \"ERC721PresetMinterPauserAutoId: must have pauser role to pause\");\n        _pause();\n    }\n\n    /**\n     * @dev Unpauses all token transfers.\n     *\n     * See {ERC721Pausable} and {Pausable-_unpause}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `PAUSER_ROLE`.\n     */\n    function unpause() public virtual {\n        require(hasRole(PAUSER_ROLE, _msgSender()), \"ERC721PresetMinterPauserAutoId: must have pauser role to unpause\");\n        _unpause();\n    }\n\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual override(ERC721Upgradeable, ERC721EnumerableUpgradeable, ERC721PausableUpgradeable) {\n        super._beforeTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(\n        bytes4 interfaceId\n    )\n        public\n        view\n        virtual\n        override(AccessControlEnumerableUpgradeable, ERC721Upgradeable, ERC721EnumerableUpgradeable)\n        returns (bool)\n    {\n        return super.supportsInterface(interfaceId);\n    }\n\n    uint256[50] private __gap;\n}\n"
    },
    "src/mint/ERC721Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\";\nimport \"./extensions/IERC721MetadataUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721Upgradeable is\n    Initializable,\n    ContextUpgradeable,\n    ERC165Upgradeable,\n    IERC721Upgradeable,\n    IERC721MetadataUpgradeable\n{\n    using AddressUpgradeable for address;\n    using StringsUpgradeable for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    // custom\n    // Mapping from token ID to flag == true, means token already burned\n    mapping(uint256 => bool) private _burnedTokens;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    function __ERC721_init(string memory name_, string memory symbol_) internal initializer {\n        __Context_init_unchained();\n        __ERC165_init_unchained();\n        __ERC721_init_unchained(name_, symbol_);\n    }\n\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal initializer {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(\n        bytes4 interfaceId\n    ) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\n        return\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. Empty by default, can be overriden\n     * in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\n\n        _operatorApprovals[_msgSender()][operator] = approved;\n        emit ApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        // custom\n        require(!_burned(tokenId), \"token already burned\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        address minter = address(uint160(tokenId >> 96));\n        if (minter != to) {\n            emit Transfer(address(0), minter, tokenId);\n            emit Transfer(minter, to, tokenId);\n        } else {\n            emit Transfer(address(0), to, tokenId);\n        }\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        // custom\n        _setBurned(tokenId);\n\n        emit Transfer(owner, address(0), tokenId);\n    }\n\n    // custom\n    /**\n     * @dev Returns true if token with tokenId already burned\n     */\n    function _burned(uint256 tokenId) internal view returns (bool) {\n        return _burnedTokens[tokenId];\n    }\n\n    // custom\n    /**\n     * @dev Set token with tokenId burned\n     */\n    function _setBurned(uint256 tokenId) internal {\n        _burnedTokens[tokenId] = true;\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (\n                bytes4 retval\n            ) {\n                return retval == IERC721ReceiverUpgradeable(to).onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    // solhint-disable-next-line no-inline-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual {}\n\n    uint256[43] private __gap;\n}\n"
    },
    "src/mint/extensions/ERC1155BurnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"../ERC1155Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\n/**\n * @dev Extension of {ERC1155} that allows token holders to destroy both their\n * own tokens and those that they have been approved to use.\n *\n * _Available since v3.1._\n */\nabstract contract ERC1155BurnableUpgradeable is Initializable, ERC1155Upgradeable {\n    function __ERC1155Burnable_init() internal initializer {\n        __Context_init_unchained();\n        __ERC165_init_unchained();\n        __ERC1155Burnable_init_unchained();\n    }\n\n    function __ERC1155Burnable_init_unchained() internal initializer {}\n\n    function burn(address account, uint256 id, uint256 value) public virtual {\n        require(\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n\n        _burn(account, id, value);\n    }\n\n    function burnBatch(address account, uint256[] memory ids, uint256[] memory values) public virtual {\n        require(\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n\n        _burnBatch(account, ids, values);\n    }\n\n    uint256[50] private __gap;\n}\n"
    },
    "src/mint/extensions/ERC1155PausableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"../ERC1155Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\n/**\n * @dev ERC1155 token with pausable token transfers, minting and burning.\n *\n * Useful for scenarios such as preventing trades until the end of an evaluation\n * period, or having an emergency switch for freezing all token transfers in the\n * event of a large bug.\n *\n * _Available since v3.1._\n */\nabstract contract ERC1155PausableUpgradeable is Initializable, ERC1155Upgradeable, PausableUpgradeable {\n    function __ERC1155Pausable_init() internal initializer {\n        __Context_init_unchained();\n        __ERC165_init_unchained();\n        __Pausable_init_unchained();\n        __ERC1155Pausable_init_unchained();\n    }\n\n    function __ERC1155Pausable_init_unchained() internal initializer {}\n\n    /**\n     * @dev See {ERC1155-_beforeTokenTransfer}.\n     *\n     * Requirements:\n     *\n     * - the contract must not be paused.\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual override {\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        require(!paused(), \"ERC1155Pausable: token transfer while paused\");\n    }\n\n    uint256[50] private __gap;\n}\n"
    },
    "src/mint/extensions/ERC721BurnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"../ERC721Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\n/**\n * @title ERC721 Burnable Token\n * @dev ERC721 Token that can be irreversibly burned (destroyed).\n */\nabstract contract ERC721BurnableUpgradeable is Initializable, ContextUpgradeable, ERC721Upgradeable {\n    function __ERC721Burnable_init() internal initializer {\n        __Context_init_unchained();\n        __ERC165_init_unchained();\n        __ERC721Burnable_init_unchained();\n    }\n\n    function __ERC721Burnable_init_unchained() internal initializer {}\n\n    // custom\n    /**\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\n     *\n     * Requirements:\n     *\n     * - The caller must own `tokenId` or be an approved operator.\n     */\n    function burn(uint256 tokenId) public virtual {\n        if (!_exists(tokenId)) {\n            address owner = address(uint160(tokenId >> 96));\n            require(owner == _msgSender(), \"ERC721Burnable: caller is not owner, not burn\");\n            _setBurned(tokenId);\n        } else {\n            //solhint-disable-next-line max-line-length\n            require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721Burnable: caller is not owner nor approved\");\n            _burn(tokenId);\n        }\n    }\n\n    uint256[50] private __gap;\n}\n"
    },
    "src/mint/extensions/ERC721EnumerableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"../ERC721Upgradeable.sol\";\nimport \"./IERC721EnumerableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\n/**\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\n * enumerability of all the token ids in the contract as well as all token ids owned by each\n * account.\n */\nabstract contract ERC721EnumerableUpgradeable is Initializable, ERC721Upgradeable, IERC721EnumerableUpgradeable {\n    function __ERC721Enumerable_init() internal initializer {\n        __Context_init_unchained();\n        __ERC165_init_unchained();\n        __ERC721Enumerable_init_unchained();\n    }\n\n    function __ERC721Enumerable_init_unchained() internal initializer {}\n\n    // Mapping from owner to list of owned token IDs\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\n\n    // Mapping from token ID to index of the owner tokens list\n    mapping(uint256 => uint256) private _ownedTokensIndex;\n\n    // Array with all token ids, used for enumeration\n    uint256[] private _allTokens;\n\n    // Mapping from token id to position in the allTokens array\n    mapping(uint256 => uint256) private _allTokensIndex;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(\n        bytes4 interfaceId\n    ) public view virtual override(IERC165Upgradeable, ERC721Upgradeable) returns (bool) {\n        return interfaceId == type(IERC721EnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721Upgradeable.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\n        return _ownedTokens[owner][index];\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _allTokens.length;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenByIndex}.\n     */\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721EnumerableUpgradeable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\n        return _allTokens[index];\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual override {\n        super._beforeTokenTransfer(from, to, tokenId);\n\n        if (from == address(0)) {\n            _addTokenToAllTokensEnumeration(tokenId);\n        } else if (from != to) {\n            _removeTokenFromOwnerEnumeration(from, tokenId);\n        }\n        if (to == address(0)) {\n            _removeTokenFromAllTokensEnumeration(tokenId);\n        } else if (to != from) {\n            _addTokenToOwnerEnumeration(to, tokenId);\n        }\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\n     * @param to address representing the new owner of the given token ID\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n     */\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\n        uint256 length = ERC721Upgradeable.balanceOf(to);\n        _ownedTokens[to][length] = tokenId;\n        _ownedTokensIndex[tokenId] = length;\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's token tracking data structures.\n     * @param tokenId uint256 ID of the token to be added to the tokens list\n     */\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\n        _allTokensIndex[tokenId] = _allTokens.length;\n        _allTokens.push(tokenId);\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\n     * @param from address representing the previous owner of the given token ID\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n     */\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = ERC721Upgradeable.balanceOf(from) - 1;\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary\n        if (tokenIndex != lastTokenIndex) {\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\n\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n        }\n\n        // This also deletes the contents at the last position of the array\n        delete _ownedTokensIndex[tokenId];\n        delete _ownedTokens[from][lastTokenIndex];\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's token tracking data structures.\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\n     */\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = _allTokens.length - 1;\n        uint256 tokenIndex = _allTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\n\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n\n        // This also deletes the contents at the last position of the array\n        delete _allTokensIndex[tokenId];\n        _allTokens.pop();\n    }\n\n    uint256[46] private __gap;\n}\n"
    },
    "src/mint/extensions/ERC721PausableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"../ERC721Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\n/**\n * @dev ERC721 token with pausable token transfers, minting and burning.\n *\n * Useful for scenarios such as preventing trades until the end of an evaluation\n * period, or having an emergency switch for freezing all token transfers in the\n * event of a large bug.\n */\nabstract contract ERC721PausableUpgradeable is Initializable, ERC721Upgradeable, PausableUpgradeable {\n    function __ERC721Pausable_init() internal initializer {\n        __Context_init_unchained();\n        __ERC165_init_unchained();\n        __Pausable_init_unchained();\n        __ERC721Pausable_init_unchained();\n    }\n\n    function __ERC721Pausable_init_unchained() internal initializer {}\n\n    /**\n     * @dev See {ERC721-_beforeTokenTransfer}.\n     *\n     * Requirements:\n     *\n     * - the contract must not be paused.\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual override {\n        super._beforeTokenTransfer(from, to, tokenId);\n\n        require(!paused(), \"ERC721Pausable: token transfer while paused\");\n    }\n\n    uint256[50] private __gap;\n}\n"
    },
    "src/mint/extensions/ERC721URIStorageUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"../ERC721Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\n/**\n * @dev ERC721 token with storage based token URI management.\n */\nabstract contract ERC721URIStorageUpgradeable is Initializable, ERC721Upgradeable {\n    function __ERC721URIStorage_init() internal initializer {\n        __Context_init_unchained();\n        __ERC165_init_unchained();\n        __ERC721URIStorage_init_unchained();\n    }\n\n    function __ERC721URIStorage_init_unchained() internal initializer {}\n\n    using StringsUpgradeable for uint256;\n\n    // Optional mapping for token URIs\n    mapping(uint256 => string) private _tokenURIs;\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721URIStorage: URI query for nonexistent token\");\n\n        string memory _tokenURI = _tokenURIs[tokenId];\n        string memory base = _baseURI();\n\n        // If there is no base URI, return the token URI.\n        if (bytes(base).length == 0) {\n            return _tokenURI;\n        }\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\n        if (bytes(_tokenURI).length > 0) {\n            return string(abi.encodePacked(base, _tokenURI));\n        }\n\n        return super.tokenURI(tokenId);\n    }\n\n    /**\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\n        require(_exists(tokenId), \"ERC721URIStorage: URI set of nonexistent token\");\n        _tokenURIs[tokenId] = _tokenURI;\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual override {\n        super._burn(tokenId);\n\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\n            delete _tokenURIs[tokenId];\n        }\n    }\n\n    uint256[49] private __gap;\n}\n"
    },
    "src/mint/extensions/IERC1155MetadataURIUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"../../interfaces/IERC1155Upgradeable.sol\";\n\n/**\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155MetadataURIUpgradeable is IERC1155Upgradeable {\n    /**\n     * @dev Returns the URI for token type `id`.\n     *\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\n     * clients with the actual token type ID.\n     */\n    function uri(uint256 id) external view returns (string memory);\n}\n"
    },
    "src/mint/extensions/IERC1155ReceiverUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\n    /**\n        @dev Handles the receipt of a single ERC1155 token type. This function is\n        called at the end of a `safeTransferFrom` after the balance has been updated.\n        To accept the transfer, this must return\n        `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n        (i.e. 0xf23a6e61, or its own function selector).\n        @param operator The address which initiated the transfer (i.e. msg.sender)\n        @param from The address which previously owned the token\n        @param id The ID of the token being transferred\n        @param value The amount of tokens being transferred\n        @param data Additional data with no specified format\n        @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n    */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\n        is called at the end of a `safeBatchTransferFrom` after the balances have\n        been updated. To accept the transfer(s), this must return\n        `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n        (i.e. 0xbc197c81, or its own function selector).\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\n        @param from The address which previously owned the token\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\n        @param data Additional data with no specified format\n        @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n    */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "src/mint/extensions/IERC721EnumerableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"../../interfaces/IERC721Upgradeable.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721EnumerableUpgradeable is IERC721Upgradeable {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
    },
    "src/mint/extensions/IERC721MetadataUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"../../interfaces/IERC721Upgradeable.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "src/mint/GhostMarketERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"./GhostMarketERC1155Storage.sol\";\nimport \"./Mint1155Validator.sol\";\n\n/// @notice GhostMarket ERC1155 contract with minting, burning, pause, royalties & lock content functions.\ncontract GhostMarketERC1155 is GhostMarketERC1155Storage, Mint1155Validator {\n    // events\n    /// @notice This event is emitted when a token locked content is viewed\n    /// @param msgSender user that triggered it\n    /// @param tokenId token id queried\n    /// @param lockedContent locked content queried\n    event LockedContentViewed(address indexed msgSender, uint256 indexed tokenId, string lockedContent);\n\n    /// @notice This event is emitted when a token is minted\n    /// @param toAddress recipient of the mint\n    /// @param tokenId token id of the mint\n    /// @param tokenURI token uri of the token minted\n    /// @param amount amount of token minted\n    event Minted(address indexed toAddress, uint256 indexed tokenId, string tokenURI, uint256 amount);\n\n    /// @notice This event is emitted when a lazy minted token is burned\n    /// @param operator operator used to burn\n    /// @param account address used to burn\n    /// @param id token id of token burned\n    /// @param amount amount of token burned\n    event BurnLazy(address indexed operator, address indexed account, uint256 id, uint256 amount);\n\n    /// @notice This event is emitted when multiple lazy minted tokens are burned\n    /// @param operator operator used to burn\n    /// @param account address used to burn\n    /// @param ids token ids of tokens burned\n    /// @param amounts amounts of tokens burned\n    event BurnLazyBatch(address indexed operator, address indexed account, uint256[] ids, uint256[] amounts);\n\n    using CountersUpgradeable for CountersUpgradeable.Counter;\n\n    /// @notice Initialize the contract\n    /// @param _name contract name\n    /// @param _symbol contract symbol\n    /// @param uri contract uri\n    function initialize(string memory _name, string memory _symbol, string memory uri) public initializer {\n        __Context_init_unchained();\n        __ERC165_init_unchained();\n        __AccessControl_init_unchained();\n        __AccessControlEnumerable_init_unchained();\n        __ERC1155_init_unchained(uri);\n        __ERC1155Burnable_init_unchained();\n        __Pausable_init_unchained();\n        __ERC1155Pausable_init_unchained();\n        __ERC1155PresetMinterPauser_init_unchained();\n        __Ownable_init_unchained();\n        _registerInterface(_GHOSTMARKET_NFT_ROYALTIES);\n        name = _name;\n        symbol = _symbol;\n        _tokenIdTracker.increment();\n        __Mint1155Validator_init_unchained();\n    }\n\n    /// @notice Return interface support for an interface id\n    /// @dev See {IERC165-supportsInterface}.\n    /// @param interfaceId interface id to query\n    /// @return status interface id support status\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return super.supportsInterface(interfaceId);\n    }\n\n    /// @notice Return if msg.sender is owner of token id\n    /// @return owner status of token id\n    function _ownerOf(uint256 tokenId) internal view returns (bool) {\n        return balanceOf(msg.sender, tokenId) != 0;\n    }\n\n    /// @notice Set a token royalties\n    /// @dev fee basis points 10000 = 100%\n    /// @param tokenId token to set\n    /// @param royalties royalties to set\n    function _saveRoyalties(uint256 tokenId, LibPart.Part[] memory royalties) internal {\n        uint256 totalValue;\n        uint length = royalties.length;\n        for (uint256 i; i < length; ++i) {\n            require(royalties[i].recipient != address(0x0), \"Recipient should be present\");\n            require(royalties[i].value > 0, \"Royalties value should be positive\");\n            totalValue += royalties[i].value;\n            _royalties[tokenId].push(royalties[i]);\n        }\n        require(totalValue <= 5000, \"Royalty total value should be < 50%\");\n    }\n\n    /// @notice Set a token locked content\n    /// @param tokenId token to set\n    function _setLockedContent(uint256 tokenId, string memory content) internal {\n        require(bytes(content).length < 200, \"Lock content bytes length should be < 200\");\n        _lockedContent[tokenId] = content;\n    }\n\n    /// @notice Increment a token locked content view count\n    /// @param tokenId token to set\n    function _incrementCurrentLockedContentViewTracker(uint256 tokenId) internal {\n        _lockedContentViewTracker[tokenId] = _lockedContentViewTracker[tokenId] + 1;\n    }\n\n    /// @notice Transfer (if exists) or mint (if non existing) token(s)\n    /// @param data lazyMintData for token\n    /// @param from source for token\n    /// @param to recipient for token\n    /// @param amount amount of token\n    function transferFromOrMint(\n        LibERC1155LazyMint.Mint1155Data memory data,\n        address from,\n        address to,\n        uint256 amount\n    ) external {\n        uint balance = balanceOf(from, data.tokenId);\n        uint left = amount;\n        if (balance != 0) {\n            uint transfer = amount;\n            if (balance < amount) {\n                transfer = balance;\n            }\n            safeTransferFrom(from, to, data.tokenId, transfer, \"\");\n            left = amount - transfer;\n        }\n        if (left > 0) {\n            require(from == data.minter, \"wrong order maker\");\n            mintAndTransfer(data, to, left);\n        }\n    }\n\n    /// @notice Lazy mint token\n    /// @param lazyMintData lazyMintData for token(s)\n    /// @param to recipient for token(s)\n    /// @param _amount amount of token(s)\n    function mintAndTransfer(\n        LibERC1155LazyMint.Mint1155Data memory lazyMintData,\n        address to,\n        uint256 _amount\n    ) public virtual {\n        require(\n            keccak256(abi.encodePacked(lazyMintData.tokenURI)) != keccak256(abi.encodePacked(\"\")),\n            \"tokenURI can't be empty\"\n        );\n        address minter = address(uint160(lazyMintData.tokenId >> 96));\n        address sender = _msgSender();\n        require(minter == sender || isApprovedForAll(minter, sender), \"ERC1155: transfer caller is not approved\");\n        require(_amount > 0, \"amount incorrect\");\n\n        if (lazyMintData.minter != _msgSender()) {\n            validate(lazyMintData.minter, LibERC1155LazyMint.hash(lazyMintData), lazyMintData.signature);\n        }\n        if (lazyMintData.royalties.length > 0) {\n            _saveRoyalties(lazyMintData.tokenId, lazyMintData.royalties);\n        }\n        _saveSupply(lazyMintData.tokenId, lazyMintData.amount);\n\n        mint(to, lazyMintData.tokenId, _amount, \"\");\n\n        if (minter != to) {\n            emit TransferSingle(sender, address(0), minter, lazyMintData.tokenId, _amount);\n            emit TransferSingle(sender, minter, to, lazyMintData.tokenId, _amount);\n        } else {\n            emit TransferSingle(sender, address(0), to, lazyMintData.tokenId, _amount);\n        }\n        emit Minted(to, lazyMintData.tokenId, lazyMintData.tokenURI, _amount);\n    }\n\n    /// @notice Mint token(s)\n    /// @param to recipient for token(s)\n    /// @param amount royalties for token(s)\n    /// @param data royalties for token(s)\n    /// @param royalties royalties for token(s)\n    /// @param tokenURI tokenURI for token(s)\n    /// @param lockedcontent lockedcontent for token(s)\n    function mintGhost(\n        address to,\n        uint256 amount,\n        bytes memory data,\n        LibPart.Part[] memory royalties,\n        string memory tokenURI,\n        string memory lockedcontent\n    ) external payable nonReentrant {\n        require(to != address(0x0), \"to can't be empty\");\n        require(keccak256(abi.encodePacked(tokenURI)) != keccak256(abi.encodePacked(\"\")), \"tokenURI can't be empty\");\n        mint(to, _tokenIdTracker.current(), amount, data);\n        if (royalties.length > 0) {\n            _saveRoyalties(_tokenIdTracker.current(), royalties);\n        }\n        if (keccak256(abi.encodePacked(lockedcontent)) != keccak256(abi.encodePacked(\"\"))) {\n            _setLockedContent(_tokenIdTracker.current(), lockedcontent);\n        }\n        emit TransferSingle(_msgSender(), address(0), to, _tokenIdTracker.current(), amount);\n        emit Minted(to, _tokenIdTracker.current(), tokenURI, amount);\n        _tokenIdTracker.increment();\n    }\n\n    /// @notice Bulk burn tokens\n    /// @param account account used to burn\n    /// @param ids tokens to burn\n    /// @param amounts amounts of tokens to burn\n    function burnBatch(address account, uint256[] memory ids, uint256[] memory amounts) public virtual override {\n        require(ids.length == amounts.length, \"ids != amounts\");\n        uint256[] memory leftToBurns = new uint256[](ids.length);\n        uint256[] memory lazyToBurns = new uint256[](ids.length);\n        for (uint i = 0; i < ids.length; ++i) {\n            (leftToBurns[i], lazyToBurns[i]) = ERC1155Upgradeable._burnLazy(ids[i], amounts[i]);\n        }\n        ERC1155BurnableUpgradeable.burnBatch(account, ids, leftToBurns);\n        emit BurnLazyBatch(_msgSender(), account, ids, lazyToBurns);\n    }\n\n    /// @notice Burn token\n    /// @param account account used to burn\n    /// @param id token to burn\n    /// @param amount amount of tokens to burn\n    function burn(address account, uint256 id, uint256 amount) public virtual override {\n        (uint256 leftToBurn, uint256 lazyToBurn) = ERC1155Upgradeable._burnLazy(id, amount);\n        if (leftToBurn > 0) {\n            ERC1155BurnableUpgradeable.burn(account, id, leftToBurn);\n        }\n        if (lazyToBurn > 0) {\n            emit BurnLazy(_msgSender(), account, id, lazyToBurn);\n        }\n    }\n\n    /// @notice Trigger locked content event for a token\n    /// @param tokenId token to query\n    function getLockedContent(uint256 tokenId) external {\n        require(_ownerOf(tokenId), \"Caller must be the owner of the token\");\n        _incrementCurrentLockedContentViewTracker(tokenId);\n        emit LockedContentViewed(msg.sender, tokenId, _lockedContent[tokenId]);\n    }\n\n    /// @notice Return locked content view count for a token\n    /// @param tokenId token to query\n    /// @return locked content view count\n    function getCurrentLockedContentViewTracker(uint256 tokenId) external view returns (uint256) {\n        return _lockedContentViewTracker[tokenId];\n    }\n\n    /// @notice Return royalties for a token\n    /// @param tokenId token to query\n    /// @return token royalties details\n    function getRoyalties(uint256 tokenId) external view returns (LibPart.Part[] memory) {\n        return _royalties[tokenId];\n    }\n\n    /// @notice Return royalties recipients for a token\n    /// @param tokenId token to query\n    /// @return token royalties recipients details\n    function getRoyaltiesRecipients(uint256 tokenId) external view returns (address payable[] memory) {\n        LibPart.Part[] memory royalties = _royalties[tokenId];\n        address payable[] memory result = new address payable[](royalties.length);\n        uint length = royalties.length;\n        for (uint256 i; i < length; ++i) {\n            result[i] = royalties[i].recipient;\n        }\n        return result;\n    }\n\n    /// @notice Return royalties bps for a token\n    /// @dev fee basis points 10000 = 100%\n    /// @param tokenId token to query\n    /// @return token royalties bps details\n    function getRoyaltiesBps(uint256 tokenId) external view returns (uint256[] memory) {\n        LibPart.Part[] memory royalties = _royalties[tokenId];\n        uint256[] memory result = new uint256[](royalties.length);\n        uint length = royalties.length;\n        for (uint256 i; i < length; ++i) {\n            result[i] = royalties[i].value;\n        }\n        return result;\n    }\n\n    /// @notice Return current token counter\n    /// @return current token conter\n    function getCurrentCounter() external view returns (uint256) {\n        return _tokenIdTracker.current();\n    }\n}\n"
    },
    "src/mint/GhostMarketERC1155Storage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"./ERC1155PresetMinterPauserUpgradeableCustom.sol\";\nimport \"./Mint1155Validator.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165StorageUpgradeable.sol\";\n\n/// @notice GhostMarket ERC1155 contract with minting, burning, pause, royalties & lock content functions.\ncontract GhostMarketERC1155Storage is\n    Initializable,\n    ERC1155PresetMinterPauserUpgradeableCustom,\n    ReentrancyGuardUpgradeable,\n    OwnableUpgradeable,\n    ERC165StorageUpgradeable\n{\n    /// @notice contract name\n    string public name;\n\n    /// @notice contract symbol\n    string public symbol;\n\n    // dev @deprecated\n    struct Royalty {\n        address payable recipient;\n        uint256 value;\n    }\n\n    /// @notice tokenId to royalties mapping\n    mapping(uint256 => LibPart.Part[]) internal _royalties;\n\n    /// @notice tokenId to locked content mapping\n    mapping(uint256 => string) internal _lockedContent;\n\n    /// @notice tokenId to locked content view counter mapping\n    mapping(uint256 => uint256) internal _lockedContentViewTracker;\n\n    // @dev deprecated\n    mapping(uint256 => string) internal _metadataJson;\n\n    // @dev deprecated\n    uint256 internal _payedMintFeesBalance;\n\n    // @dev deprecated\n    uint256 internal _ghostmarketMintFees;\n\n    // @dev deprecated\n    bytes4 public constant _INTERFACE_ID_ERC1155_GHOSTMARKET = bytes4(keccak256(\"_INTERFACE_ID_ERC1155_GHOSTMARKET\"));\n\n    /**\n     * bytes4(keccak256(_GHOSTMARKET_NFT_ROYALTIES)) == 0xe42093a6\n     */\n    bytes4 public constant _GHOSTMARKET_NFT_ROYALTIES = bytes4(keccak256(\"_GHOSTMARKET_NFT_ROYALTIES\"));\n\n    using CountersUpgradeable for CountersUpgradeable.Counter;\n\n    // _tokenIdTracker to generate automated token IDs\n    CountersUpgradeable.Counter internal _tokenIdTracker;\n\n    /// @notice Return interface support for an interface id\n    /// @dev See {IERC165-supportsInterface}.\n    /// @param interfaceId interface id to query\n    /// @return status interface id support status\n    function supportsInterface(\n        bytes4 interfaceId\n    )\n        public\n        view\n        virtual\n        override(ERC1155PresetMinterPauserUpgradeableCustom, ERC165StorageUpgradeable)\n        returns (bool)\n    {\n        return super.supportsInterface(interfaceId);\n    }\n\n    uint256[50] private __gap;\n}\n"
    },
    "src/mint/GhostMarketERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"./GhostMarketERC721Storage.sol\";\nimport \"./Mint721Validator.sol\";\n\n/// @notice GhostMarket ERC721 contract with minting, burning, pause, royalties & lock content functions.\ncontract GhostMarketERC721 is GhostMarketERC721Storage, Mint721Validator {\n    // events\n    /// @notice This event is emitted when a token locked content is viewed\n    /// @param msgSender user that triggered it\n    /// @param tokenId token id queried\n    /// @param lockedContent locked content queried\n    event LockedContentViewed(address indexed msgSender, uint256 indexed tokenId, string lockedContent);\n\n    /// @notice This event is emitted when a token is minted\n    /// @param toAddress recipient of the mint\n    /// @param tokenId token id of the mint\n    /// @param tokenURI token uri of the token minted\n    event Minted(address indexed toAddress, uint256 indexed tokenId, string tokenURI);\n\n    /// @notice Initialize the contract\n    /// @param name contract name\n    /// @param symbol contract symbol\n    /// @param uri contract uri\n    function initialize(string memory name, string memory symbol, string memory uri) public override initializer {\n        __Context_init_unchained();\n        __ERC165_init_unchained();\n        __AccessControl_init_unchained();\n        __AccessControlEnumerable_init_unchained();\n        __ERC721Enumerable_init_unchained();\n        __ERC721Burnable_init_unchained();\n        __Pausable_init_unchained();\n        __ERC721Pausable_init_unchained();\n        __ERC721URIStorage_init_unchained();\n        __ERC721_init_unchained(name, symbol);\n        __ERC721PresetMinterPauserAutoId_init_unchained(uri);\n        __Ownable_init_unchained();\n        _registerInterface(_GHOSTMARKET_NFT_ROYALTIES);\n        __Mint721Validator_init_unchained();\n    }\n\n    /// @notice Return interface support for an interface id\n    /// @dev See {IERC165-supportsInterface}.\n    /// @param interfaceId interface id to query\n    /// @return status interface id support status\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return super.supportsInterface(interfaceId);\n    }\n\n    /// @notice Transfer (if exists) or mint (if non existing) a token\n    /// @param data lazyMintData for token\n    /// @param from source for token\n    /// @param to recipient for token\n    function transferFromOrMint(LibERC721LazyMint.Mint721Data memory data, address from, address to) external {\n        if (_exists(data.tokenId)) {\n            safeTransferFrom(from, to, data.tokenId);\n        } else {\n            require(from == data.minter, \"wrong order maker\");\n            mintAndTransfer(data, to);\n        }\n    }\n\n    /// @notice Lazy mint token\n    /// @param lazyMintData lazyMintData for token\n    /// @param to recipient for token\n    function mintAndTransfer(LibERC721LazyMint.Mint721Data memory lazyMintData, address to) public virtual {\n        require(\n            keccak256(abi.encodePacked(lazyMintData.tokenURI)) != keccak256(abi.encodePacked(\"\")),\n            \"tokenURI can't be empty\"\n        );\n        address minter = address(uint160(lazyMintData.tokenId >> 96));\n        address sender = _msgSender();\n        require(\n            minter == sender || isApprovedForAll(minter, sender),\n            \"ERC721: transfer caller is not owner nor approved\"\n        );\n\n        _mint(to, lazyMintData.tokenId);\n        if (lazyMintData.minter != _msgSender()) {\n            validate(lazyMintData.minter, LibERC721LazyMint.hash(lazyMintData), lazyMintData.signature);\n        }\n        if (lazyMintData.royalties.length > 0) {\n            _saveRoyalties(lazyMintData.tokenId, lazyMintData.royalties);\n        }\n        emit Minted(to, lazyMintData.tokenId, lazyMintData.tokenURI);\n    }\n\n    /// @notice Set a token royalties\n    /// @dev fee basis points 10000 = 100%\n    /// @param tokenId token to set\n    /// @param royalties royalties to set\n    function _saveRoyalties(uint256 tokenId, LibPart.Part[] memory royalties) internal {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n        uint256 totalValue;\n        uint length = royalties.length;\n        for (uint256 i; i < length; ++i) {\n            require(royalties[i].recipient != address(0x0), \"Recipient should be present\");\n            require(royalties[i].value > 0, \"Royalties value should be positive\");\n            totalValue += royalties[i].value;\n            _royalties[tokenId].push(royalties[i]);\n        }\n        require(totalValue <= 5000, \"Royalty total value should be < 50%\");\n    }\n\n    /// @notice Set a token locked content\n    /// @param tokenId token to set\n    function _setLockedContent(uint256 tokenId, string memory content) internal {\n        require(bytes(content).length < 200, \"Lock content bytes length should be < 200\");\n        _lockedContent[tokenId] = content;\n    }\n\n    /// @notice Increment a token locked content view count\n    /// @param tokenId token to set\n    function _incrementCurrentLockedContentViewTracker(uint256 tokenId) internal {\n        _lockedContentViewTracker[tokenId] = _lockedContentViewTracker[tokenId] + 1;\n    }\n\n    /// @notice Mint token\n    /// @param to recipient for token\n    /// @param royalties royalties for token\n    /// @param tokenURI tokenURI for token\n    /// @param lockedcontent lockedcontent for token\n    function mintGhost(\n        address to,\n        LibPart.Part[] memory royalties,\n        string memory tokenURI,\n        string memory lockedcontent\n    ) external payable nonReentrant {\n        require(to != address(0x0), \"to can't be empty\");\n        require(keccak256(abi.encodePacked(tokenURI)) != keccak256(abi.encodePacked(\"\")), \"tokenURI can't be empty\");\n        mint(to);\n        uint256 tokenId = getLastTokenID();\n        if (royalties.length > 0) {\n            _saveRoyalties(tokenId, royalties);\n        }\n        if (keccak256(abi.encodePacked(lockedcontent)) != keccak256(abi.encodePacked(\"\"))) {\n            _setLockedContent(tokenId, lockedcontent);\n        }\n        emit Minted(to, tokenId, tokenURI);\n    }\n\n    /// @notice Bulk burn tokens\n    /// @param tokensId tokens to burn\n    function burnBatch(uint256[] memory tokensId) external {\n        uint length = tokensId.length;\n        for (uint256 i; i < length; ++i) {\n            burn(tokensId[i]);\n        }\n    }\n\n    /// @notice Trigger locked content event for a token\n    /// @param tokenId token to query\n    function getLockedContent(uint256 tokenId) external {\n        require(ownerOf(tokenId) == msg.sender, \"Caller must be the owner of the token\");\n        _incrementCurrentLockedContentViewTracker(tokenId);\n        emit LockedContentViewed(msg.sender, tokenId, _lockedContent[tokenId]);\n    }\n\n    /// @notice Return locked content view count for a token\n    /// @param tokenId token to query\n    /// @return count locked content view count\n    function getCurrentLockedContentViewTracker(uint256 tokenId) external view returns (uint256) {\n        return _lockedContentViewTracker[tokenId];\n    }\n\n    /// @notice Return royalties for a token\n    /// @param tokenId token to query\n    /// @return royalties token royalties details\n    function getRoyalties(uint256 tokenId) external view returns (LibPart.Part[] memory) {\n        return _royalties[tokenId];\n    }\n\n    /// @notice Return royalties recipients for a token\n    /// @param tokenId token to query\n    /// @return recipient token royalties recipients details\n    function getRoyaltiesRecipients(uint256 tokenId) external view returns (address payable[] memory) {\n        LibPart.Part[] memory royalties = _royalties[tokenId];\n        address payable[] memory result = new address payable[](royalties.length);\n        uint length = royalties.length;\n        for (uint256 i; i < length; ++i) {\n            result[i] = royalties[i].recipient;\n        }\n        return result;\n    }\n\n    /// @notice Return royalties bps for a token\n    /// @dev fee basis points 10000 = 100%\n    /// @param tokenId token to query\n    /// @return bps token royalties bps details\n    function getRoyaltiesBps(uint256 tokenId) external view returns (uint256[] memory) {\n        LibPart.Part[] memory royalties = _royalties[tokenId];\n        uint256[] memory result = new uint256[](royalties.length);\n        uint length = royalties.length;\n        for (uint256 i; i < length; ++i) {\n            result[i] = royalties[i].value;\n        }\n        return result;\n    }\n}\n"
    },
    "src/mint/GhostMarketERC721Storage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"./ERC721PresetMinterPauserAutoIdUpgradeableCustom.sol\";\nimport \"./Mint721Validator.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165StorageUpgradeable.sol\";\n\n/// @notice GhostMarket ERC721 contract with minting, burning, pause, royalties & lock content functions.\ncontract GhostMarketERC721Storage is\n    Initializable,\n    ERC721PresetMinterPauserAutoIdUpgradeableCustom,\n    ReentrancyGuardUpgradeable,\n    OwnableUpgradeable,\n    ERC165StorageUpgradeable\n{\n    // dev @deprecated\n    struct Royalty {\n        address payable recipient;\n        uint256 value;\n    }\n\n    /// @notice tokenId to royalties mapping\n    mapping(uint256 => LibPart.Part[]) internal _royalties;\n\n    /// @notice tokenId to locked content mapping\n    mapping(uint256 => string) internal _lockedContent;\n\n    /// @notice tokenId to locked content view counter mapping\n    mapping(uint256 => uint256) internal _lockedContentViewTracker;\n\n    // @dev deprecated\n    mapping(uint256 => string) internal _metadataJson;\n\n    // @dev deprecated\n    uint256 internal _payedMintFeesBalance;\n\n    // @dev deprecated\n    uint256 internal _ghostmarketMintFees;\n\n    // @dev deprecated\n    bytes4 public constant _INTERFACE_ID_ERC721_GHOSTMARKET = bytes4(keccak256(\"_INTERFACE_ID_ERC721_GHOSTMARKET\"));\n\n    /**\n     * bytes4(keccak256(_GHOSTMARKET_NFT_ROYALTIES)) == 0xe42093a6\n     */\n    bytes4 public constant _GHOSTMARKET_NFT_ROYALTIES = bytes4(keccak256(\"_GHOSTMARKET_NFT_ROYALTIES\"));\n\n    /// @notice Return interface support for an interface id\n    /// @dev See {IERC165-supportsInterface}.\n    /// @param interfaceId interface id to query\n    /// @return status interface id support status\n    function supportsInterface(\n        bytes4 interfaceId\n    )\n        public\n        view\n        virtual\n        override(ERC721PresetMinterPauserAutoIdUpgradeableCustom, ERC165StorageUpgradeable)\n        returns (bool)\n    {\n        return super.supportsInterface(interfaceId);\n    }\n\n    uint256[50] private __gap;\n}\n"
    },
    "src/mint/librairies/LibERC1155LazyMint.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"./LibPart.sol\";\n\nlibrary LibERC1155LazyMint {\n    bytes4 public constant ERC1155_LAZY_ASSET_CLASS = bytes4(keccak256(\"ERC1155_LAZY\"));\n\n    struct Mint1155Data {\n        uint tokenId;\n        string tokenURI;\n        uint amount;\n        address minter;\n        LibPart.Part[] royalties;\n        bytes signature;\n    }\n\n    bytes32 public constant MINT_AND_TRANSFER_TYPEHASH =\n        keccak256(\n            \"Mint1155(uint256 tokenId,string tokenURI,uint256 amount,address minter,Part[] royalties)Part(address recipient,uint256 value)\"\n        );\n\n    function hash(Mint1155Data memory data) internal pure returns (bytes32) {\n        bytes32[] memory royaltiesBytes = new bytes32[](data.royalties.length);\n        for (uint i = 0; i < data.royalties.length; ++i) {\n            royaltiesBytes[i] = LibPart.hash(data.royalties[i]);\n        }\n        return\n            keccak256(\n                abi.encode(\n                    MINT_AND_TRANSFER_TYPEHASH,\n                    data.tokenId,\n                    keccak256(bytes(data.tokenURI)),\n                    data.amount,\n                    data.minter,\n                    keccak256(abi.encodePacked(royaltiesBytes))\n                )\n            );\n    }\n}\n"
    },
    "src/mint/librairies/LibERC721LazyMint.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"./LibPart.sol\";\n\nlibrary LibERC721LazyMint {\n    bytes4 public constant ERC721_LAZY_ASSET_CLASS = bytes4(keccak256(\"ERC721_LAZY\"));\n\n    struct Mint721Data {\n        uint tokenId;\n        string tokenURI;\n        address minter;\n        LibPart.Part[] royalties;\n        bytes signature;\n    }\n\n    bytes32 public constant MINT_AND_TRANSFER_TYPEHASH =\n        keccak256(\n            \"Mint721(uint256 tokenId,string tokenURI,address minter,Part[] royalties)Part(address recipient,uint256 value)\"\n        );\n\n    function hash(Mint721Data memory data) internal pure returns (bytes32) {\n        bytes32[] memory royaltiesBytes = new bytes32[](data.royalties.length);\n        for (uint i = 0; i < data.royalties.length; ++i) {\n            royaltiesBytes[i] = LibPart.hash(data.royalties[i]);\n        }\n        return\n            keccak256(\n                abi.encode(\n                    MINT_AND_TRANSFER_TYPEHASH,\n                    data.tokenId,\n                    keccak256(bytes(data.tokenURI)),\n                    data.minter,\n                    keccak256(abi.encodePacked(royaltiesBytes))\n                )\n            );\n    }\n}\n"
    },
    "src/mint/librairies/LibPart.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nlibrary LibPart {\n    bytes32 public constant TYPE_HASH = keccak256(\"Part(address recipient,uint256 value)\");\n\n    struct Part {\n        address payable recipient;\n        uint256 value;\n    }\n\n    function hash(Part memory part) internal pure returns (bytes32) {\n        return keccak256(abi.encode(TYPE_HASH, part.recipient, part.value));\n    }\n}\n"
    },
    "src/mint/Mint1155Validator.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"./ERC1271Validator.sol\";\nimport \"./librairies/LibERC1155LazyMint.sol\";\n\ncontract Mint1155Validator is ERC1271Validator {\n    function __Mint1155Validator_init_unchained() internal {\n        __EIP712_init_unchained(\"Mint1155\", \"1\");\n    }\n\n    function validate(address account, bytes32 hash, bytes memory signature) internal view {\n        validate1271(account, hash, signature);\n    }\n\n    uint256[48] private __gap;\n}\n"
    },
    "src/mint/Mint721Validator.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"./ERC1271Validator.sol\";\nimport \"./librairies/LibERC721LazyMint.sol\";\n\ncontract Mint721Validator is ERC1271Validator {\n    function __Mint721Validator_init_unchained() internal {\n        __EIP712_init_unchained(\"Mint721\", \"1\");\n    }\n\n    function validate(address account, bytes32 hash, bytes memory signature) internal view {\n        validate1271(account, hash, signature);\n    }\n\n    uint256[48] private __gap;\n}\n"
    },
    "src/mint/tests/ERC1155LazyMintTest.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"../ERC1155Upgradeable.sol\";\nimport \"../../interfaces/IERC1155LazyMint.sol\";\nimport \"../../librairies/LibERC1155LazyMint.sol\";\n\ncontract ERC1155LazyMintTest is IERC1155LazyMint, ERC1155Upgradeable {\n    function mintAndTransfer(\n        LibERC1155LazyMint.Mint1155Data memory data,\n        address to,\n        uint256 _amount\n    ) external override {\n        _mint(to, data.tokenId, _amount, \"\");\n    }\n\n    function transferFromOrMint(\n        LibERC1155LazyMint.Mint1155Data memory data,\n        address from,\n        address to,\n        uint256 amount\n    ) external override {\n        uint256 balance = balanceOf(from, data.tokenId);\n        if (balance != 0) {\n            safeTransferFrom(from, to, data.tokenId, amount, \"\");\n        } else {\n            this.mintAndTransfer(data, to, amount);\n        }\n    }\n\n    function encode(LibERC1155LazyMint.Mint1155Data memory data) external view returns (bytes memory) {\n        return abi.encode(address(this), data);\n    }\n}\n"
    },
    "src/mint/tests/ERC1155Test.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"../../librairies/LibERC1155LazyMint.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\";\n\ncontract ERC1155Test is EIP712Upgradeable {\n    using AddressUpgradeable for address;\n    using ECDSAUpgradeable for bytes32;\n\n    function __ERC1155Test_init() external initializer {\n        __EIP712_init(\"Mint1155\", \"1\");\n    }\n\n    function recover(\n        LibERC1155LazyMint.Mint1155Data memory data,\n        bytes memory signature\n    ) external view returns (address) {\n        bytes32 structHash = LibERC1155LazyMint.hash(data);\n        bytes32 hash = _hashTypedDataV4(structHash);\n        return hash.recover(signature);\n    }\n}\n"
    },
    "src/mint/tests/ERC1271Test.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"../ERC1271.sol\";\n\ncontract ERC1271Test is ERC1271 {\n    bool private returnSuccessfulValidSignature;\n\n    function setReturnSuccessfulValidSignature(bool value) public {\n        returnSuccessfulValidSignature = value;\n    }\n\n    function isValidSignature(bytes32, bytes memory) public view override returns (bytes4) {\n        return returnSuccessfulValidSignature ? ERC1271_RETURN_VALID_SIGNATURE : ERC1271_RETURN_INVALID_SIGNATURE;\n    }\n}\n"
    },
    "src/mint/tests/ERC721LazyMintTest.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"../ERC721Upgradeable.sol\";\nimport \"../../interfaces/IERC721LazyMint.sol\";\n\ncontract ERC721LazyMintTest is IERC721LazyMint, ERC721Upgradeable {\n    function mintAndTransfer(LibERC721LazyMint.Mint721Data memory data, address to) external override {\n        _mint(to, data.tokenId);\n    }\n\n    function transferFromOrMint(LibERC721LazyMint.Mint721Data memory data, address from, address to) external override {\n        if (_exists(data.tokenId)) {\n            safeTransferFrom(from, to, data.tokenId);\n        } else {\n            this.mintAndTransfer(data, to);\n        }\n    }\n\n    function encode(LibERC721LazyMint.Mint721Data memory data) external view returns (bytes memory) {\n        return abi.encode(address(this), data);\n    }\n}\n"
    },
    "src/mint/tests/ERC721Test.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"../../librairies/LibERC721LazyMint.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\";\n\ncontract ERC721Test is EIP712Upgradeable {\n    using AddressUpgradeable for address;\n    using ECDSAUpgradeable for bytes32;\n\n    function __ERC721Test_init() external initializer {\n        __EIP712_init(\"Mint721\", \"1\");\n    }\n\n    function recover(\n        LibERC721LazyMint.Mint721Data memory data,\n        bytes memory signature\n    ) external view returns (address) {\n        bytes32 structHash = LibERC721LazyMint.hash(data);\n        bytes32 hash = _hashTypedDataV4(structHash);\n        return hash.recover(signature);\n    }\n}\n"
    },
    "src/mint/tests/GhostMarketERC1155V10.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"../GhostMarketERC1155Storage.sol\";\nimport \"../Mint1155Validator.sol\";\n\n/// @notice GhostMarket ERC1155 contract with minting, burning, pause, royalties & lock content functions.\ncontract GhostMarketERC1155V10 is GhostMarketERC1155Storage, Mint1155Validator {\n    // events\n    /// @notice This event is emitted when a token locked content is viewed\n    /// @param msgSender user that triggered it\n    /// @param tokenId token id queried\n    /// @param lockedContent locked content queried\n    event LockedContentViewed(address indexed msgSender, uint256 indexed tokenId, string lockedContent);\n\n    /// @notice This event is emitted when a token is minted\n    /// @param toAddress recipient of the mint\n    /// @param tokenId token id of the mint\n    /// @param tokenURI token uri of the token minted\n    /// @param amount amount of token minted\n    event Minted(address indexed toAddress, uint256 indexed tokenId, string tokenURI, uint256 amount);\n\n    /// @notice This event is emitted when a lazy minted token is burned\n    /// @param operator operator used to burn\n    /// @param account address used to burn\n    /// @param id token id of token burned\n    /// @param amount amount of token burned\n    event BurnLazy(address indexed operator, address indexed account, uint256 id, uint256 amount);\n\n    /// @notice This event is emitted when multiple lazy minted tokens are burned\n    /// @param operator operator used to burn\n    /// @param account address used to burn\n    /// @param ids token ids of tokens burned\n    /// @param amounts amounts of tokens burned\n    event BurnLazyBatch(address indexed operator, address indexed account, uint256[] ids, uint256[] amounts);\n\n    using CountersUpgradeable for CountersUpgradeable.Counter;\n\n    /// @notice Initialize the contract\n    /// @param _name contract name\n    /// @param _symbol contract symbol\n    /// @param uri contract uri\n    function initialize(string memory _name, string memory _symbol, string memory uri) public initializer {\n        __Context_init_unchained();\n        __ERC165_init_unchained();\n        __AccessControl_init_unchained();\n        __AccessControlEnumerable_init_unchained();\n        __ERC1155_init_unchained(uri);\n        __ERC1155Burnable_init_unchained();\n        __Pausable_init_unchained();\n        __ERC1155Pausable_init_unchained();\n        __ERC1155PresetMinterPauser_init_unchained();\n        __Ownable_init_unchained();\n        _registerInterface(_GHOSTMARKET_NFT_ROYALTIES);\n        name = _name;\n        symbol = _symbol;\n        _tokenIdTracker.increment();\n        __Mint1155Validator_init_unchained();\n    }\n\n    function getSomething() external pure returns (uint) {\n        return 10;\n    }\n\n    /// @notice Return interface support for an interface id\n    /// @dev See {IERC165-supportsInterface}.\n    /// @param interfaceId interface id to query\n    /// @return status interface id support status\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return super.supportsInterface(interfaceId);\n    }\n\n    /// @notice Return if msg.sender is owner of token id\n    /// @return owner status of token id\n    function _ownerOf(uint256 tokenId) internal view returns (bool) {\n        return balanceOf(msg.sender, tokenId) != 0;\n    }\n\n    /// @notice Set a token royalties\n    /// @dev fee basis points 10000 = 100%\n    /// @param tokenId token to set\n    /// @param royalties royalties to set\n    function _saveRoyalties(uint256 tokenId, LibPart.Part[] memory royalties) internal {\n        uint256 totalValue;\n        uint length = royalties.length;\n        for (uint256 i; i < length; ++i) {\n            require(royalties[i].recipient != address(0x0), \"Recipient should be present\");\n            require(royalties[i].value > 0, \"Royalties value should be positive\");\n            totalValue += royalties[i].value;\n            _royalties[tokenId].push(royalties[i]);\n        }\n        require(totalValue <= 5000, \"Royalty total value should be < 50%\");\n    }\n\n    /// @notice Set a token locked content\n    /// @param tokenId token to set\n    function _setLockedContent(uint256 tokenId, string memory content) internal {\n        require(bytes(content).length < 200, \"Lock content bytes length should be < 200\");\n        _lockedContent[tokenId] = content;\n    }\n\n    /// @notice Increment a token locked content view count\n    /// @param tokenId token to set\n    function _incrementCurrentLockedContentViewTracker(uint256 tokenId) internal {\n        _lockedContentViewTracker[tokenId] = _lockedContentViewTracker[tokenId] + 1;\n    }\n\n    /// @notice Transfer (if exists) or mint (if non existing) token(s)\n    /// @param data lazyMintData for token\n    /// @param from source for token\n    /// @param to recipient for token\n    /// @param amount amount of token\n    function transferFromOrMint(\n        LibERC1155LazyMint.Mint1155Data memory data,\n        address from,\n        address to,\n        uint256 amount\n    ) external {\n        uint balance = balanceOf(from, data.tokenId);\n        uint left = amount;\n        if (balance != 0) {\n            uint transfer = amount;\n            if (balance < amount) {\n                transfer = balance;\n            }\n            safeTransferFrom(from, to, data.tokenId, transfer, \"\");\n            left = amount - transfer;\n        }\n        if (left > 0) {\n            require(from == data.minter, \"wrong order maker\");\n            mintAndTransfer(data, to, left);\n        }\n    }\n\n    /// @notice Lazy mint token\n    /// @param lazyMintData lazyMintData for token(s)\n    /// @param to recipient for token(s)\n    /// @param _amount amount of token(s)\n    function mintAndTransfer(\n        LibERC1155LazyMint.Mint1155Data memory lazyMintData,\n        address to,\n        uint256 _amount\n    ) public virtual {\n        require(\n            keccak256(abi.encodePacked(lazyMintData.tokenURI)) != keccak256(abi.encodePacked(\"\")),\n            \"tokenURI can't be empty\"\n        );\n        address minter = address(uint160(lazyMintData.tokenId >> 96));\n        address sender = _msgSender();\n        require(minter == sender || isApprovedForAll(minter, sender), \"ERC1155: transfer caller is not approved\");\n        require(_amount > 0, \"amount incorrect\");\n\n        if (lazyMintData.minter != _msgSender()) {\n            validate(lazyMintData.minter, LibERC1155LazyMint.hash(lazyMintData), lazyMintData.signature);\n        }\n        if (lazyMintData.royalties.length > 0) {\n            _saveRoyalties(lazyMintData.tokenId, lazyMintData.royalties);\n        }\n        _saveSupply(lazyMintData.tokenId, lazyMintData.amount);\n\n        mint(to, lazyMintData.tokenId, _amount, \"\");\n\n        if (minter != to) {\n            emit TransferSingle(sender, address(0), minter, lazyMintData.tokenId, _amount);\n            emit TransferSingle(sender, minter, to, lazyMintData.tokenId, _amount);\n        } else {\n            emit TransferSingle(sender, address(0), to, lazyMintData.tokenId, _amount);\n        }\n        emit Minted(to, lazyMintData.tokenId, lazyMintData.tokenURI, _amount);\n    }\n\n    /// @notice Mint token(s)\n    /// @param to recipient for token(s)\n    /// @param amount royalties for token(s)\n    /// @param data royalties for token(s)\n    /// @param royalties royalties for token(s)\n    /// @param tokenURI tokenURI for token(s)\n    /// @param lockedcontent lockedcontent for token(s)\n    function mintGhost(\n        address to,\n        uint256 amount,\n        bytes memory data,\n        LibPart.Part[] memory royalties,\n        string memory tokenURI,\n        string memory lockedcontent\n    ) external payable nonReentrant {\n        require(to != address(0x0), \"to can't be empty\");\n        require(keccak256(abi.encodePacked(tokenURI)) != keccak256(abi.encodePacked(\"\")), \"tokenURI can't be empty\");\n        mint(to, _tokenIdTracker.current(), amount, data);\n        if (royalties.length > 0) {\n            _saveRoyalties(_tokenIdTracker.current(), royalties);\n        }\n        if (keccak256(abi.encodePacked(lockedcontent)) != keccak256(abi.encodePacked(\"\"))) {\n            _setLockedContent(_tokenIdTracker.current(), lockedcontent);\n        }\n        emit TransferSingle(_msgSender(), address(0), to, _tokenIdTracker.current(), amount);\n        emit Minted(to, _tokenIdTracker.current(), tokenURI, amount);\n        _tokenIdTracker.increment();\n    }\n\n    /// @notice Bulk burn tokens\n    /// @param account account used to burn\n    /// @param ids tokens to burn\n    /// @param amounts amounts of tokens to burn\n    function burnBatch(address account, uint256[] memory ids, uint256[] memory amounts) public virtual override {\n        require(ids.length == amounts.length, \"ids != amounts\");\n        uint256[] memory leftToBurns = new uint256[](ids.length);\n        uint256[] memory lazyToBurns = new uint256[](ids.length);\n        for (uint i = 0; i < ids.length; ++i) {\n            (leftToBurns[i], lazyToBurns[i]) = ERC1155Upgradeable._burnLazy(ids[i], amounts[i]);\n        }\n        ERC1155BurnableUpgradeable.burnBatch(account, ids, leftToBurns);\n        emit BurnLazyBatch(_msgSender(), account, ids, lazyToBurns);\n    }\n\n    /// @notice Burn token\n    /// @param account account used to burn\n    /// @param id token to burn\n    /// @param amount amount of tokens to burn\n    function burn(address account, uint256 id, uint256 amount) public virtual override {\n        (uint256 leftToBurn, uint256 lazyToBurn) = ERC1155Upgradeable._burnLazy(id, amount);\n        if (leftToBurn > 0) {\n            ERC1155BurnableUpgradeable.burn(account, id, leftToBurn);\n        }\n        if (lazyToBurn > 0) {\n            emit BurnLazy(_msgSender(), account, id, lazyToBurn);\n        }\n    }\n\n    /// @notice Trigger locked content event for a token\n    /// @param tokenId token to query\n    function getLockedContent(uint256 tokenId) external {\n        require(_ownerOf(tokenId), \"Caller must be the owner of the token\");\n        _incrementCurrentLockedContentViewTracker(tokenId);\n        emit LockedContentViewed(msg.sender, tokenId, _lockedContent[tokenId]);\n    }\n\n    /// @notice Return locked content view count for a token\n    /// @param tokenId token to query\n    /// @return locked content view count\n    function getCurrentLockedContentViewTracker(uint256 tokenId) external view returns (uint256) {\n        return _lockedContentViewTracker[tokenId];\n    }\n\n    /// @notice Return royalties for a token\n    /// @param tokenId token to query\n    /// @return token royalties details\n    function getRoyalties(uint256 tokenId) external view returns (LibPart.Part[] memory) {\n        return _royalties[tokenId];\n    }\n\n    /// @notice Return royalties recipients for a token\n    /// @param tokenId token to query\n    /// @return token royalties recipients details\n    function getRoyaltiesRecipients(uint256 tokenId) external view returns (address payable[] memory) {\n        LibPart.Part[] memory royalties = _royalties[tokenId];\n        address payable[] memory result = new address payable[](royalties.length);\n        uint length = royalties.length;\n        for (uint256 i; i < length; ++i) {\n            result[i] = royalties[i].recipient;\n        }\n        return result;\n    }\n\n    /// @notice Return royalties bps for a token\n    /// @dev fee basis points 10000 = 100%\n    /// @param tokenId token to query\n    /// @return token royalties bps details\n    function getRoyaltiesBps(uint256 tokenId) external view returns (uint256[] memory) {\n        LibPart.Part[] memory royalties = _royalties[tokenId];\n        uint256[] memory result = new uint256[](royalties.length);\n        uint length = royalties.length;\n        for (uint256 i; i < length; ++i) {\n            result[i] = royalties[i].value;\n        }\n        return result;\n    }\n\n    /// @notice Return current token counter\n    /// @return current token conter\n    function getCurrentCounter() external view returns (uint256) {\n        return _tokenIdTracker.current();\n    }\n}\n"
    },
    "src/mint/tests/GhostMarketERC721V10.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"../GhostMarketERC721Storage.sol\";\nimport \"../Mint721Validator.sol\";\n\n/// @notice GhostMarket ERC721 contract with minting, burning, pause, royalties & lock content functions.\ncontract GhostMarketERC721V10 is GhostMarketERC721Storage, Mint721Validator {\n    // events\n    /// @notice This event is emitted when a token locked content is viewed\n    /// @param msgSender user that triggered it\n    /// @param tokenId token id queried\n    /// @param lockedContent locked content queried\n    event LockedContentViewed(address indexed msgSender, uint256 indexed tokenId, string lockedContent);\n\n    /// @notice This event is emitted when a token is minted\n    /// @param toAddress recipient of the mint\n    /// @param tokenId token id of the mint\n    /// @param tokenURI token uri of the token minted\n    event Minted(address indexed toAddress, uint256 indexed tokenId, string tokenURI);\n\n    /// @notice Initialize the contract\n    /// @param name contract name\n    /// @param symbol contract symbol\n    /// @param uri contract uri\n    function initialize(string memory name, string memory symbol, string memory uri) public override initializer {\n        __Context_init_unchained();\n        __ERC165_init_unchained();\n        __AccessControl_init_unchained();\n        __AccessControlEnumerable_init_unchained();\n        __ERC721Enumerable_init_unchained();\n        __ERC721Burnable_init_unchained();\n        __Pausable_init_unchained();\n        __ERC721Pausable_init_unchained();\n        __ERC721URIStorage_init_unchained();\n        __ERC721_init_unchained(name, symbol);\n        __ERC721PresetMinterPauserAutoId_init_unchained(uri);\n        __Ownable_init_unchained();\n        _registerInterface(_GHOSTMARKET_NFT_ROYALTIES);\n        __Mint721Validator_init_unchained();\n    }\n\n    function getSomething() external pure returns (uint) {\n        return 10;\n    }\n\n    /// @notice Return interface support for an interface id\n    /// @dev See {IERC165-supportsInterface}.\n    /// @param interfaceId interface id to query\n    /// @return status interface id support status\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return super.supportsInterface(interfaceId);\n    }\n\n    /// @notice Transfer (if exists) or mint (if non existing) a token\n    /// @param data lazyMintData for token\n    /// @param from source for token\n    /// @param to recipient for token\n    function transferFromOrMint(LibERC721LazyMint.Mint721Data memory data, address from, address to) external {\n        if (_exists(data.tokenId)) {\n            safeTransferFrom(from, to, data.tokenId);\n        } else {\n            require(from == data.minter, \"wrong order maker\");\n            mintAndTransfer(data, to);\n        }\n    }\n\n    /// @notice Lazy mint token\n    /// @param lazyMintData lazyMintData for token\n    /// @param to recipient for token\n    function mintAndTransfer(LibERC721LazyMint.Mint721Data memory lazyMintData, address to) public virtual {\n        require(\n            keccak256(abi.encodePacked(lazyMintData.tokenURI)) != keccak256(abi.encodePacked(\"\")),\n            \"tokenURI can't be empty\"\n        );\n        address minter = address(uint160(lazyMintData.tokenId >> 96));\n        address sender = _msgSender();\n        require(\n            minter == sender || isApprovedForAll(minter, sender),\n            \"ERC721: transfer caller is not owner nor approved\"\n        );\n\n        _mint(to, lazyMintData.tokenId);\n        if (lazyMintData.minter != _msgSender()) {\n            validate(lazyMintData.minter, LibERC721LazyMint.hash(lazyMintData), lazyMintData.signature);\n        }\n        if (lazyMintData.royalties.length > 0) {\n            _saveRoyalties(lazyMintData.tokenId, lazyMintData.royalties);\n        }\n        emit Minted(to, lazyMintData.tokenId, lazyMintData.tokenURI);\n    }\n\n    /// @notice Set a token royalties\n    /// @dev fee basis points 10000 = 100%\n    /// @param tokenId token to set\n    /// @param royalties royalties to set\n    function _saveRoyalties(uint256 tokenId, LibPart.Part[] memory royalties) internal {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n        uint256 totalValue;\n        uint length = royalties.length;\n        for (uint256 i; i < length; ++i) {\n            require(royalties[i].recipient != address(0x0), \"Recipient should be present\");\n            require(royalties[i].value > 0, \"Royalties value should be positive\");\n            totalValue += royalties[i].value;\n            _royalties[tokenId].push(royalties[i]);\n        }\n        require(totalValue <= 5000, \"Royalty total value should be < 50%\");\n    }\n\n    /// @notice Set a token locked content\n    /// @param tokenId token to set\n    function _setLockedContent(uint256 tokenId, string memory content) internal {\n        require(bytes(content).length < 200, \"Lock content bytes length should be < 200\");\n        _lockedContent[tokenId] = content;\n    }\n\n    /// @notice Increment a token locked content view count\n    /// @param tokenId token to set\n    function _incrementCurrentLockedContentViewTracker(uint256 tokenId) internal {\n        _lockedContentViewTracker[tokenId] = _lockedContentViewTracker[tokenId] + 1;\n    }\n\n    /// @notice Mint token\n    /// @param to recipient for token\n    /// @param royalties royalties for token\n    /// @param tokenURI tokenURI for token\n    /// @param lockedcontent lockedcontent for token\n    function mintGhost(\n        address to,\n        LibPart.Part[] memory royalties,\n        string memory tokenURI,\n        string memory lockedcontent\n    ) external payable nonReentrant {\n        require(to != address(0x0), \"to can't be empty\");\n        require(keccak256(abi.encodePacked(tokenURI)) != keccak256(abi.encodePacked(\"\")), \"tokenURI can't be empty\");\n        mint(to);\n        uint256 tokenId = getLastTokenID();\n        if (royalties.length > 0) {\n            _saveRoyalties(tokenId, royalties);\n        }\n        if (keccak256(abi.encodePacked(lockedcontent)) != keccak256(abi.encodePacked(\"\"))) {\n            _setLockedContent(tokenId, lockedcontent);\n        }\n        emit Minted(to, tokenId, tokenURI);\n    }\n\n    /// @notice Bulk burn tokens\n    /// @param tokensId tokens to burn\n    function burnBatch(uint256[] memory tokensId) external {\n        uint length = tokensId.length;\n        for (uint256 i; i < length; ++i) {\n            burn(tokensId[i]);\n        }\n    }\n\n    /// @notice Trigger locked content event for a token\n    /// @param tokenId token to query\n    function getLockedContent(uint256 tokenId) external {\n        require(ownerOf(tokenId) == msg.sender, \"Caller must be the owner of the token\");\n        _incrementCurrentLockedContentViewTracker(tokenId);\n        emit LockedContentViewed(msg.sender, tokenId, _lockedContent[tokenId]);\n    }\n\n    /// @notice Return locked content view count for a token\n    /// @param tokenId token to query\n    /// @return count locked content view count\n    function getCurrentLockedContentViewTracker(uint256 tokenId) external view returns (uint256) {\n        return _lockedContentViewTracker[tokenId];\n    }\n\n    /// @notice Return royalties for a token\n    /// @param tokenId token to query\n    /// @return royalties token royalties details\n    function getRoyalties(uint256 tokenId) external view returns (LibPart.Part[] memory) {\n        return _royalties[tokenId];\n    }\n\n    /// @notice Return royalties recipients for a token\n    /// @param tokenId token to query\n    /// @return recipient token royalties recipients details\n    function getRoyaltiesRecipients(uint256 tokenId) external view returns (address payable[] memory) {\n        LibPart.Part[] memory royalties = _royalties[tokenId];\n        address payable[] memory result = new address payable[](royalties.length);\n        uint length = royalties.length;\n        for (uint256 i; i < length; ++i) {\n            result[i] = royalties[i].recipient;\n        }\n        return result;\n    }\n\n    /// @notice Return royalties bps for a token\n    /// @dev fee basis points 10000 = 100%\n    /// @param tokenId token to query\n    /// @return bps token royalties bps details\n    function getRoyaltiesBps(uint256 tokenId) external view returns (uint256[] memory) {\n        LibPart.Part[] memory royalties = _royalties[tokenId];\n        uint256[] memory result = new uint256[](royalties.length);\n        uint length = royalties.length;\n        for (uint256 i; i < length; ++i) {\n            result[i] = royalties[i].value;\n        }\n        return result;\n    }\n}\n"
    },
    "src/mint/tests/Mint1155ValidatorTest.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"../Mint1155Validator.sol\";\n\ncontract Mint1155ValidatorTest is Mint1155Validator {\n    function __Mint1155ValidatorTest_init() external initializer {\n        __Mint1155Validator_init_unchained();\n    }\n\n    function validateTest(address sender, LibERC1155LazyMint.Mint1155Data memory data) external view {\n        if (sender != data.minter) {\n            validate(data.minter, LibERC1155LazyMint.hash(data), data.signature);\n        }\n    }\n}\n"
    },
    "src/mint/tests/Mint721ValidatorTest.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"../Mint721Validator.sol\";\n\ncontract Mint721ValidatorTest is Mint721Validator {\n    function __Mint721ValidatorTest_init() external initializer {\n        __Mint721Validator_init_unchained();\n    }\n\n    function validateTest(LibERC721LazyMint.Mint721Data memory data) external view {\n        validate(data.minter, LibERC721LazyMint.hash(data), data.signature);\n    }\n}\n"
    },
    "src/mint/tests/TestERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\";\n\ncontract TestERC1155 is ERC1155Upgradeable {\n    function mint(address to, uint256 tokenId, uint256 amount) external {\n        _mint(to, tokenId, amount, \"\");\n    }\n}\n"
    },
    "src/mint/tests/TestERC1271.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"../ERC1271.sol\";\n\ncontract TestERC1271 is ERC1271 {\n    bool private returnSuccessfulValidSignature;\n\n    function setReturnSuccessfulValidSignature(bool value) public {\n        returnSuccessfulValidSignature = value;\n    }\n\n    function isValidSignature(bytes32, bytes memory) public view override returns (bytes4) {\n        return returnSuccessfulValidSignature ? ERC1271_RETURN_VALID_SIGNATURE : ERC1271_RETURN_INVALID_SIGNATURE;\n    }\n}\n"
    },
    "src/mint/tests/TestERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\n\ncontract TestERC20 is ERC20Upgradeable {\n    function mint(address to, uint256 amount) external {\n        _mint(to, amount);\n    }\n}\n"
    },
    "src/mint/tests/TestERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\";\n\ncontract TestERC721 is ERC721Upgradeable {\n    function mint(address to, uint256 tokenId) external {\n        _mint(to, tokenId);\n    }\n}\n"
    },
    "src/mint/tests/TestERC721RoyaltyV2Legacy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\";\nimport \"../../royalties/impl/RoyaltiesV2LegacyImpl.sol\";\n\ncontract TestERC721RoyaltyV2Legacy is ERC721Upgradeable, RoyaltiesV2LegacyImpl {\n    function mint(address to, uint256 tokenId) external {\n        _mint(to, tokenId);\n    }\n}\n"
    },
    "src/mint/tests/TestERC721WithRoyaltyV2981.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"../../royalties/tests/Royalties2981TestImpl.sol\";\nimport \"../../royalties/LibRoyalties2981.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\n\ncontract TestERC721WithRoyaltyV2981 is Initializable, Royalties2981TestImpl, ERC721Upgradeable, OwnableUpgradeable {\n    /// @inheritdoc\tERC165Upgradeable\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721Upgradeable) returns (bool) {\n        return interfaceId == LibRoyalties2981._INTERFACE_ID_ROYALTIES || super.supportsInterface(interfaceId);\n    }\n\n    function initialize() public initializer {\n        __Ownable_init_unchained();\n    }\n}\n"
    },
    "src/mint/tests/TestERC721WithRoyaltyV2OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"../../royalties/impl/RoyaltiesV2Impl.sol\";\nimport \"../../royalties/LibRoyaltiesV2.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\n\ncontract TestERC721WithRoyaltiesV2OwnableUpgradeable is\n    Initializable,\n    RoyaltiesV2Impl,\n    ERC721Upgradeable,\n    OwnableUpgradeable\n{\n    /// @inheritdoc\tERC165Upgradeable\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721Upgradeable) returns (bool) {\n        return interfaceId == LibRoyaltiesV2._INTERFACE_ID_ROYALTIES || super.supportsInterface(interfaceId);\n    }\n\n    function initialize() public initializer {\n        __Ownable_init_unchained();\n    }\n\n    function mint(address to, uint256 tokenId, LibPart.Part[] memory _fees) external {\n        _mint(to, tokenId);\n        _saveRoyalties(tokenId, _fees);\n    }\n}\n"
    },
    "src/operator/OperatorRole.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\n\ncontract OperatorRole is OwnableUpgradeable {\n    mapping(address => bool) public operators;\n\n    function __OperatorRole_init() external initializer {\n        __Context_init_unchained();\n        __Ownable_init_unchained();\n    }\n\n    function addOperator(address operator) external onlyOwner {\n        operators[operator] = true;\n    }\n\n    function removeOperator(address operator) external onlyOwner {\n        operators[operator] = false;\n    }\n\n    modifier onlyOperator() {\n        require(operators[_msgSender()], \"OperatorRole: caller is not the operator\");\n        _;\n    }\n}\n"
    },
    "src/operator/tests/OperatorRoleTest.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"../OperatorRole.sol\";\n\ncontract OperatorRoleTest is OperatorRole {\n    function __OperatorRoleTest_init() external initializer {\n        __Ownable_init();\n    }\n\n    function getSomething() external view onlyOperator returns (uint) {\n        return 10;\n    }\n\n    function getOperator(address operator) external view returns (bool) {\n        return operators[operator];\n    }\n}\n"
    },
    "src/royalties-registry/providers/RoyaltiesProviderArtBlocks.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"../../interfaces/IRoyaltiesProvider.sol\";\nimport \"./RoyaltyArtBlocks.sol\";\nimport \"../../librairies/BpLibrary.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract RoyaltiesProviderArtBlocks is IRoyaltiesProvider, Ownable {\n    using BpLibrary for uint256;\n\n    uint96 public artblocksPercentage = 250;\n\n    event ArtblocksPercentageChanged(address _who, uint96 _old, uint96 _new);\n\n    function getRoyalties(address token, uint tokenId) external view override returns (LibPart.Part[] memory) {\n        RoyaltyArtBlocks artBlocks = RoyaltyArtBlocks(token);\n\n        //gettign artist and additionalPayee royalty part\n        (\n            address artistAddress,\n            address additionalPayee,\n            uint256 additionalPayeePercentage,\n            uint256 royaltyFeeByID\n        ) = artBlocks.getRoyaltyData(tokenId);\n\n        require(\n            additionalPayeePercentage <= 100 && royaltyFeeByID <= 100,\n            \"wrong royalties percentages from artBlocks\"\n        );\n\n        //resulting royalties\n        LibPart.Part[] memory result;\n\n        //if no artist royalty\n        if (royaltyFeeByID == 0) {\n            //if artblocksPercentage > 0\n            if (artblocksPercentage > 0) {\n                result = new LibPart.Part[](1);\n\n                //calculating artBLocks part\n                result[0].account = payable(owner());\n                result[0].value = artblocksPercentage;\n            }\n            //if artblocksPercentage = 0 then result is empty\n            return result;\n\n            //if royaltyFeeByID > 0 and  0 < additionalPayeePercentage < 100\n        } else if (additionalPayeePercentage > 0 && additionalPayeePercentage < 100) {\n            result = new LibPart.Part[](3);\n\n            //calculating artBLocks part\n            result[0].account = payable(owner());\n            result[0].value = artblocksPercentage;\n\n            // additional payee percentage * 100\n            uint96 additionalPart = uint96((royaltyFeeByID * (100)).bp(additionalPayeePercentage * (100)));\n\n            //artist part\n            result[1].account = payable(artistAddress);\n            result[1].value = uint96((royaltyFeeByID * (100)) - (additionalPart));\n\n            result[2].account = payable(additionalPayee);\n            result[2].value = additionalPart;\n\n            //if royaltyFeeByID > 0 and additionalPayeePercentage == 0 or 100\n        } else {\n            result = new LibPart.Part[](2);\n\n            //calculating artBLocks part\n            result[0].account = payable(owner());\n            result[0].value = artblocksPercentage;\n\n            // additional payee percentage * 100\n            uint96 additionalPart = uint96((royaltyFeeByID * (100)).bp(additionalPayeePercentage * (100)));\n\n            //artist part\n            if (additionalPayeePercentage == 0) {\n                result[1].account = payable(artistAddress);\n                result[1].value = uint96((royaltyFeeByID * (100)) - (additionalPart));\n            }\n\n            //additional payee part\n            if (additionalPayeePercentage == 100) {\n                result[1].account = payable(additionalPayee);\n                result[1].value = additionalPart;\n            }\n        }\n\n        return result;\n    }\n\n    //sets new value for artblocksPercentage\n    function setArtblocksPercentage(uint96 _artblocksPercentage) public onlyOwner {\n        require(_artblocksPercentage <= 10000, \"_artblocksPercentage can't be > 100%\");\n        emit ArtblocksPercentageChanged(_msgSender(), artblocksPercentage, _artblocksPercentage);\n        artblocksPercentage = _artblocksPercentage;\n    }\n}\n"
    },
    "src/royalties-registry/providers/RoyaltiesProviderV2Legacy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"../../interfaces/IRoyaltiesProvider.sol\";\nimport \"./RoyaltyV2Legacy.sol\";\n\ncontract RoyaltiesProviderV2Legacy is IRoyaltiesProvider {\n    function getRoyalties(address token, uint tokenId) external view override returns (LibPart.Part[] memory) {\n        return RoyaltyV2Legacy(token).getRoyalties(tokenId);\n    }\n}\n"
    },
    "src/royalties-registry/providers/RoyaltyArtBlocks.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"../../librairies/LibPart.sol\";\n\nabstract contract RoyaltyArtBlocks {\n    function getRoyaltyData(\n        uint256 _tokenId\n    )\n        external\n        view\n        virtual\n        returns (\n            address artistAddress,\n            address additionalPayee,\n            uint256 additionalPayeePercentage,\n            uint256 royaltyFeeByID\n        );\n}\n"
    },
    "src/royalties-registry/providers/RoyaltyV2Legacy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"../../librairies/LibPart.sol\";\n\ninterface RoyaltyV2Legacy {\n    event RoyaltiesSet(uint256 tokenId, LibPart.Part[] royalties);\n\n    function getRoyalties(uint256 id) external view returns (LibPart.Part[] memory);\n}\n"
    },
    "src/royalties-registry/RoyaltiesRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"../interfaces/IRoyaltiesProvider.sol\";\nimport \"../interfaces/IERC2981.sol\";\nimport \"../royalties/LibRoyaltiesV2.sol\";\nimport \"../royalties/LibRoyalties2981.sol\";\nimport \"../royalties/LibRoyaltiesGhostMarketV2.sol\";\nimport \"../royalties/RoyaltiesV2.sol\";\nimport \"../royalties/GhostMarketRoyalties.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\n\ncontract RoyaltiesRegistry is IRoyaltiesProvider, OwnableUpgradeable, GhostMarketRoyalties {\n    /// @dev emitted when royalties set for token in\n    event RoyaltiesSetForContract(address indexed token, LibPart.Part[] royalties);\n\n    /// @dev struct to store royalties in royaltiesByToken\n    struct RoyaltiesSet {\n        bool initialized;\n        LibPart.Part[] royalties;\n    }\n\n    /// @dev stores royalties for token contract, set in setRoyaltiesByToken() method\n    mapping(address => RoyaltiesSet) public royaltiesByToken;\n    /// @dev stores external provider and royalties type for token contract\n    mapping(address => uint256) public royaltiesProviders;\n\n    /// @dev total amount or supported royalties types\n    // 0 - royalties type is unset\n    // 1 - royaltiesByToken,\n    // 2 - v2,\n    // 3 - v1,\n    // 4 - external provider,\n    // 5 - EIP-2981\n    // 6 - unsupported/nonexistent royalties type\n    uint256 public constant royaltiesTypesAmount = 6;\n\n    function __RoyaltiesRegistry_init() external initializer {\n        __Ownable_init_unchained();\n    }\n\n    /// @dev sets external provider for token contract, and royalties type = 4\n    function setProviderByToken(address token, address provider) external {\n        checkOwner(token);\n        setRoyaltiesType(token, 4, provider);\n    }\n\n    /// @dev returns provider address for token contract from royaltiesProviders mapping\n    function getProvider(address token) public view returns (address) {\n        return address(uint160(royaltiesProviders[token]));\n    }\n\n    /// @dev returns royalties type for token contract\n    function getRoyaltiesType(address token) external view returns (uint256) {\n        return _getRoyaltiesType(royaltiesProviders[token]);\n    }\n\n    /// @dev returns royalties type from uint\n    function _getRoyaltiesType(uint256 data) internal pure returns (uint256) {\n        for (uint256 i = 1; i <= royaltiesTypesAmount; ++i) {\n            if (data / 2 ** (256 - i) == 1) {\n                return i;\n            }\n        }\n        return 0;\n    }\n\n    /// @dev sets royalties type for token contract\n    function setRoyaltiesType(address token, uint256 royaltiesType, address royaltiesProvider) internal {\n        require(royaltiesType > 0 && royaltiesType <= royaltiesTypesAmount, \"wrong royaltiesType\");\n        royaltiesProviders[token] = uint256(uint160(royaltiesProvider)) + 2 ** (256 - royaltiesType);\n    }\n\n    /// @dev clears and sets new royalties type for token contract\n    function forceSetRoyaltiesType(address token, uint256 royaltiesType) external {\n        checkOwner(token);\n        setRoyaltiesType(token, royaltiesType, getProvider(token));\n    }\n\n    /// @dev clears royalties type for token contract\n    function clearRoyaltiesType(address token) external {\n        checkOwner(token);\n        royaltiesProviders[token] = uint256(uint160(getProvider(token)));\n        emit RoyaltiesSetForContract(token, new LibPart.Part[](0));\n    }\n\n    /// @dev sets royalties for token contract in royaltiesByToken mapping and royalties type = 1\n    function setRoyaltiesByToken(address token, LibPart.Part[] memory royalties) external {\n        checkOwner(token);\n        //clearing royaltiesProviders value for the token\n        delete royaltiesProviders[token];\n        // setting royaltiesType = 1 for the token\n        setRoyaltiesType(token, 1, address(0));\n        uint256 sumRoyalties = 0;\n        delete royaltiesByToken[token];\n        uint256 length = royalties.length;\n        for (uint256 i; i < length; ++i) {\n            require(royalties[i].account != address(0x0), \"RoyaltiesByToken recipient should be present\");\n            require(royalties[i].value != 0, \"Royalty value for RoyaltiesByToken should be > 0\");\n            royaltiesByToken[token].royalties.push(royalties[i]);\n            sumRoyalties += royalties[i].value;\n        }\n        require(sumRoyalties < 10000, \"Set by token royalties sum more, than 100%\");\n        royaltiesByToken[token].initialized = true;\n        emit RoyaltiesSetForContract(token, royalties);\n    }\n\n    /// @dev checks if msg.sender is owner of this contract or owner of the token contract\n    function checkOwner(address token) internal view {\n        if ((owner() != _msgSender()) && (OwnableUpgradeable(token).owner() != _msgSender())) {\n            revert(\"Token owner not detected\");\n        }\n    }\n\n    /// @dev calculates royalties type for token contract\n    function calculateRoyaltiesType(address token, address royaltiesProvider) internal view returns (uint256) {\n        try IERC165Upgradeable(token).supportsInterface(LibRoyaltiesV2._INTERFACE_ID_ROYALTIES) returns (bool result) {\n            if (result) {\n                return 2;\n            }\n        } catch {}\n\n        try IERC165Upgradeable(token).supportsInterface(LibRoyaltiesGhostMarketV2._INTERFACE_ID_ROYALTIES) returns (\n            bool result\n        ) {\n            if (result) {\n                return 3;\n            }\n        } catch {}\n\n        try IERC165Upgradeable(token).supportsInterface(LibRoyalties2981._INTERFACE_ID_ROYALTIES) returns (\n            bool result\n        ) {\n            if (result) {\n                return 5;\n            }\n        } catch {}\n\n        if (royaltiesProvider != address(0)) {\n            return 4;\n        }\n\n        if (royaltiesByToken[token].initialized) {\n            return 1;\n        }\n\n        return 6;\n    }\n\n    /// @dev returns royalties for token contract and token id\n    function getRoyalties(address token, uint256 tokenId) external override returns (LibPart.Part[] memory) {\n        uint256 royaltiesProviderData = royaltiesProviders[token];\n\n        address royaltiesProvider = address(uint160(royaltiesProviderData));\n        uint256 royaltiesType = _getRoyaltiesType(royaltiesProviderData);\n\n        // case when royaltiesType is not set\n        if (royaltiesType == 0) {\n            // calculating royalties type for token\n            royaltiesType = calculateRoyaltiesType(token, royaltiesProvider);\n\n            //saving royalties type\n            setRoyaltiesType(token, royaltiesType, royaltiesProvider);\n        }\n        //case royaltiesType = 1, royalties are set in royaltiesByToken\n        if (royaltiesType == 1) {\n            return royaltiesByToken[token].royalties;\n        }\n\n        //case royaltiesType = 2, royalties rarible v2\n        if (royaltiesType == 2) {\n            return getRoyaltiesRaribleV2(token, tokenId);\n        }\n\n        //case royaltiesType = 3, royalties ghostmarket\n        if (royaltiesType == 3) {\n            return getRoyaltiesGhostmarket(token, tokenId);\n        }\n\n        //case royaltiesType = 4, royalties from external provider\n        if (royaltiesType == 4) {\n            return providerExtractor(token, tokenId, royaltiesProvider);\n        }\n\n        //case royaltiesType = 5, royalties EIP-2981\n        if (royaltiesType == 5) {\n            return getRoyaltiesEIP2981(token, tokenId);\n        }\n\n        // case royaltiesType = 6, unknown/empty royalties\n        if (royaltiesType == 6) {\n            return new LibPart.Part[](0);\n        }\n\n        revert(\"something wrong in getRoyalties\");\n    }\n\n    /// @dev tries to get royalties rarible-v2 for token and tokenId\n    function getRoyaltiesRaribleV2(address token, uint256 tokenId) internal view returns (LibPart.Part[] memory) {\n        try RoyaltiesV2(token).getRaribleV2Royalties(tokenId) returns (LibPart.Part[] memory result) {\n            return result;\n        } catch {\n            return new LibPart.Part[](0);\n        }\n    }\n\n    /// @dev tries to get royalties ghostmarket for token and tokenId\n    function getRoyaltiesGhostmarket(address token, uint256 tokenId) internal view returns (LibPart.Part[] memory) {\n        try GhostMarketRoyalties(token).getRoyalties(tokenId) returns (Royalty[] memory values) {\n            LibPart.Part[] memory result = new LibPart.Part[](values.length);\n            for (uint256 i; i < values.length; ++i) {\n                result[i].value = uint96(values[i].value);\n                result[i].account = values[i].recipient;\n            }\n            return result;\n        } catch {\n            return new LibPart.Part[](0);\n        }\n    }\n\n    /// @dev tries to get royalties EIP-2981 for token and tokenId\n    function getRoyaltiesEIP2981(address token, uint256 tokenId) internal view returns (LibPart.Part[] memory) {\n        try IERC2981(token).royaltyInfo(tokenId, LibRoyalties2981._WEIGHT_VALUE) returns (\n            address receiver,\n            uint256 royaltyAmount\n        ) {\n            return LibRoyalties2981.calculateRoyalties(receiver, royaltyAmount);\n        } catch {\n            return new LibPart.Part[](0);\n        }\n    }\n\n    /// @dev tries to get royalties for token and tokenId from external provider set in royaltiesProviders\n    function providerExtractor(\n        address token,\n        uint256 tokenId,\n        address providerAddress\n    ) internal returns (LibPart.Part[] memory) {\n        try IRoyaltiesProvider(providerAddress).getRoyalties(token, tokenId) returns (LibPart.Part[] memory result) {\n            return result;\n        } catch {\n            return new LibPart.Part[](0);\n        }\n    }\n\n    uint256[46] private __gap;\n}\n"
    },
    "src/royalties-registry/tests/RoyaltiesArtBlocksImpl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"../../royalties-registry/providers/RoyaltyArtBlocks.sol\";\n\ncontract RoyaltiesArtBlocksImpl is RoyaltyArtBlocks {\n    struct Project {\n        address artistAddress;\n        address additionalPayee;\n        uint256 additionalPayeePercentage;\n        uint256 secondMarketRoyalty;\n    }\n\n    mapping(uint256 => Project) public projects;\n\n    function getRoyaltyData(\n        uint256 _tokenId\n    )\n        external\n        view\n        override\n        returns (\n            address artistAddress,\n            address additionalPayee,\n            uint256 additionalPayeePercentage,\n            uint256 royaltyFeeByID\n        )\n    {\n        return (\n            projects[_tokenId].artistAddress,\n            projects[_tokenId].additionalPayee,\n            projects[_tokenId].additionalPayeePercentage,\n            projects[_tokenId].secondMarketRoyalty\n        );\n    }\n\n    function updateProjectAdditionalPayeeInfo(\n        uint256 _projectId,\n        address payable _additionalPayee,\n        uint256 _additionalPayeePercentage\n    ) public {\n        projects[_projectId].additionalPayee = _additionalPayee;\n        projects[_projectId].additionalPayeePercentage = _additionalPayeePercentage;\n    }\n\n    function updateProjectSecondaryMarketRoyaltyPercentage(uint256 _projectId, uint256 _secondMarketRoyalty) public {\n        projects[_projectId].secondMarketRoyalty = _secondMarketRoyalty;\n    }\n}\n"
    },
    "src/royalties-registry/tests/RoyaltiesProviderTest.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"../../interfaces/IRoyaltiesProvider.sol\";\nimport \"../../librairies/LibPart.sol\";\n\ncontract RoyaltiesProviderTest is IRoyaltiesProvider {\n    mapping(address => mapping(uint256 => LibPart.Part[])) internal royaltiesTest;\n\n    function initializeProvider(address token, uint256 tokenId, LibPart.Part[] memory royalties) public {\n        delete royaltiesTest[token][tokenId];\n        uint256 length = royalties.length;\n        for (uint256 i; i < length; ++i) {\n            royaltiesTest[token][tokenId].push(royalties[i]);\n        }\n    }\n\n    function getRoyalties(address token, uint256 tokenId) external view override returns (LibPart.Part[] memory) {\n        return royaltiesTest[token][tokenId];\n    }\n}\n"
    },
    "src/royalties-registry/tests/RoyaltiesRegistryTest.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"../../interfaces/IRoyaltiesProvider.sol\";\nimport \"../../librairies/LibPart.sol\";\n\ncontract RoyaltiesRegistryTest {\n    event GetRoyaltiesTest(LibPart.Part[] royalties);\n\n    function _getRoyalties(address royaltiesTest, address token, uint256 tokenId) external {\n        IRoyaltiesProvider withRoyalties = IRoyaltiesProvider(royaltiesTest);\n        LibPart.Part[] memory royalties = withRoyalties.getRoyalties(token, tokenId);\n        emit GetRoyaltiesTest(royalties);\n    }\n}\n"
    },
    "src/royalties-registry/tests/TestERC721ArtBlocks.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\";\nimport \"./RoyaltiesArtBlocksImpl.sol\";\n\ncontract TestERC721ArtBlocks is ERC721Upgradeable, RoyaltiesArtBlocksImpl {\n    function mint(address to, uint256 tokenId) external {\n        projects[tokenId].artistAddress = to;\n        _mint(to, tokenId);\n    }\n}\n"
    },
    "src/royalties/GhostMarketRoyalties.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nabstract contract GhostMarketRoyalties {\n    struct Royalty {\n        address payable recipient;\n        uint256 value;\n    }\n\n    function getRoyalties(uint256 tokenId) external view returns (Royalty[] memory) {}\n}\n"
    },
    "src/royalties/impl/AbstractRoyalties.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"../../librairies/LibPart.sol\";\n\nabstract contract AbstractRoyalties {\n    mapping(uint256 => LibPart.Part[]) internal royalties;\n\n    function _saveRoyalties(uint256 id, LibPart.Part[] memory _royalties) internal {\n        uint256 totalValue;\n        uint256 length = _royalties.length;\n        for (uint256 i; i < length; ++i) {\n            require(_royalties[i].account != address(0x0), \"Recipient should be present\");\n            require(_royalties[i].value != 0, \"Royalty value should be positive\");\n            totalValue += _royalties[i].value;\n            royalties[id].push(_royalties[i]);\n        }\n        require(totalValue < 10000, \"Royalty total value should be < 10000\");\n        _onRoyaltiesSet(id, _royalties);\n    }\n\n    function _updateAccount(uint256 _id, address _from, address _to) internal {\n        uint256 length = royalties[_id].length;\n        for (uint256 i; i < length; ++i) {\n            if (royalties[_id][i].account == _from) {\n                royalties[_id][i].account = payable(address(uint160(_to)));\n            }\n        }\n    }\n\n    function _onRoyaltiesSet(uint256 id, LibPart.Part[] memory _royalties) internal virtual;\n}\n"
    },
    "src/royalties/impl/RoyaltiesV2Impl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"./AbstractRoyalties.sol\";\nimport \"../RoyaltiesV2.sol\";\nimport \"../../interfaces/IERC2981.sol\";\nimport \"../LibRoyalties2981.sol\";\n\ncontract RoyaltiesV2Impl is AbstractRoyalties, RoyaltiesV2, IERC2981 {\n    function getRaribleV2Royalties(uint256 id) external view override returns (LibPart.Part[] memory) {\n        return royalties[id];\n    }\n\n    function _onRoyaltiesSet(uint256 id, LibPart.Part[] memory _royalties) internal override {\n        emit RoyaltiesSet(id, _royalties);\n    }\n\n    /*\n     *Token (ERC721, ERC721Minimal, ERC721MinimalMeta, ERC1155 ) can have a number of different royalties beneficiaries\n     *calculate sum all royalties, but royalties beneficiary will be only one royalties[0].account, according to rules of IERC2981\n     */\n    function royaltyInfo(\n        uint256 id,\n        uint256 _salePrice\n    ) external view override returns (address receiver, uint256 royaltyAmount) {\n        if (royalties[id].length == 0) {\n            receiver = address(0);\n            royaltyAmount = 0;\n            return (receiver, royaltyAmount);\n        }\n        LibPart.Part[] memory _royalties = royalties[id];\n        receiver = _royalties[0].account;\n        uint256 percent;\n        uint256 length = _royalties.length;\n        for (uint256 i; i < length; ++i) {\n            percent += _royalties[i].value;\n        }\n        //don`t need require(percent < 10000, \"Token royalty > 100%\"); here, because check later in calculateRoyalties\n        royaltyAmount = (percent * _salePrice) / 10000;\n    }\n}\n"
    },
    "src/royalties/impl/RoyaltiesV2LegacyImpl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"../../royalties-registry/providers/RoyaltyV2Legacy.sol\";\n\ncontract RoyaltiesV2LegacyImpl is RoyaltyV2Legacy {\n    mapping(uint256 => LibPart.Part[]) internal royalties;\n\n    function _saveRoyalties(uint256 id, LibPart.Part[] memory _royalties) public {\n        uint256 totalValue;\n        uint256 length = _royalties.length;\n        for (uint256 i; i < length; ++i) {\n            require(_royalties[i].account != address(0x0), \"Recipient should be present\");\n            require(_royalties[i].value != 0, \"Royalty value should be positive\");\n            totalValue += _royalties[i].value;\n            royalties[id].push(_royalties[i]);\n        }\n        require(totalValue < 10000, \"Royalty total value should be < 10000\");\n        _onRoyaltiesSet(id, _royalties);\n    }\n\n    function _updateAccount(uint256 _id, address _from, address _to) internal {\n        uint256 length = royalties[_id].length;\n        for (uint256 i; i < length; ++i) {\n            if (royalties[_id][i].account == _from) {\n                royalties[_id][i].account = payable(address(uint160(_to)));\n            }\n        }\n    }\n\n    function getRoyalties(uint256 id) external view override returns (LibPart.Part[] memory) {\n        return royalties[id];\n    }\n\n    function _onRoyaltiesSet(uint256 id, LibPart.Part[] memory _royalties) internal {\n        emit RoyaltiesSet(id, _royalties);\n    }\n}\n"
    },
    "src/royalties/LibRoyalties2981.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"../librairies/LibPart.sol\";\n\nlibrary LibRoyalties2981 {\n    /*\n     * https://eips.ethereum.org/EIPS/eip-2981: bytes4 private constant _INTERFACE_ID_ERC2981 = 0x2a55205a;\n     */\n    bytes4 public constant _INTERFACE_ID_ROYALTIES = 0x2a55205a;\n    uint96 public constant _WEIGHT_VALUE = 1000000;\n\n    /*Method for converting amount to percent and forming LibPart*/\n    function calculateRoyalties(address to, uint256 amount) internal pure returns (LibPart.Part[] memory) {\n        LibPart.Part[] memory result;\n        if (amount == 0) {\n            return result;\n        }\n        uint256 percent = ((amount * 100) / _WEIGHT_VALUE) * 100;\n        require(percent < 10000, \"Royalties 2981, than 100%\");\n        result = new LibPart.Part[](1);\n        result[0].account = payable(to);\n        result[0].value = uint96(percent);\n        return result;\n    }\n}\n"
    },
    "src/royalties/LibRoyaltiesGhostMarketV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nlibrary LibRoyaltiesGhostMarketV2 {\n    /*\n     * bytes4(keccak256('_GHOSTMARKET_NFT_ROYALTIES')) == 0xe42093a6\n     */\n    bytes4 public constant _INTERFACE_ID_ROYALTIES = 0xe42093a6;\n}\n"
    },
    "src/royalties/LibRoyaltiesV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nlibrary LibRoyaltiesV2 {\n    /*\n     * bytes4(keccak256('getRaribleV2Royalties(uint256)')) == 0xcad96cca\n     */\n    bytes4 public constant _INTERFACE_ID_ROYALTIES = 0xcad96cca;\n}\n"
    },
    "src/royalties/RoyaltiesV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"../librairies/LibPart.sol\";\n\ninterface RoyaltiesV2 {\n    event RoyaltiesSet(uint256 tokenId, LibPart.Part[] royalties);\n\n    function getRaribleV2Royalties(uint256 id) external view returns (LibPart.Part[] memory);\n}\n"
    },
    "src/royalties/tests/Royalties2981TestImpl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"../../interfaces/IERC2981.sol\";\nimport \"../LibRoyalties2981.sol\";\nimport \"../../librairies/LibPart.sol\";\n\ncontract Royalties2981TestImpl is IERC2981 {\n    function royaltyInfo(\n        uint256 _tokenId,\n        uint256 _salePrice\n    ) external pure override returns (address receiver, uint256 royaltyAmount) {\n        receiver = address(uint160(_tokenId >> 96));\n        royaltyAmount = _salePrice / 10;\n    }\n\n    function calculateRoyaltiesTest(address payable to, uint96 amount) external pure returns (LibPart.Part[] memory) {\n        return LibRoyalties2981.calculateRoyalties(to, amount);\n    }\n}\n"
    },
    "src/royalties/tests/RoyaltiesV2TestImpl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"../impl/RoyaltiesV2Impl.sol\";\n\ncontract RoyaltiesV2TestImpl is RoyaltiesV2Impl {\n    function saveRoyalties(uint256 id, LibPart.Part[] memory royalties) external {\n        _saveRoyalties(id, royalties);\n    }\n\n    function updateAccount(uint256 id, address from, address to) external {\n        _updateAccount(id, from, to);\n    }\n}\n"
    },
    "src/royalties/tests/TestERC1155RoyaltiesV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\";\nimport \"../impl/RoyaltiesV2Impl.sol\";\nimport \"../LibRoyaltiesV2.sol\";\n\ncontract TestERC1155RoyaltiesV2 is RoyaltiesV2Impl, ERC1155Upgradeable {\n    function initialize() public initializer {\n        //_registerInterface(LibRoyaltiesV2._INTERFACE_ID_ROYALTIES);\n    }\n\n    function mint(address to, uint tokenId, uint amount, LibPart.Part[] memory _fees) external {\n        _mint(to, tokenId, amount, \"\");\n        _saveRoyalties(tokenId, _fees);\n    }\n\n    /// @inheritdoc\tERC165Upgradeable\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC1155Upgradeable) returns (bool) {\n        return interfaceId == LibRoyaltiesV2._INTERFACE_ID_ROYALTIES || super.supportsInterface(interfaceId);\n    }\n}\n"
    },
    "src/royalties/tests/TestERC721RoyaltiesV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\";\nimport \"../impl/RoyaltiesV2Impl.sol\";\nimport \"../LibRoyaltiesV2.sol\";\n\ncontract TestERC721RoyaltiesV2 is RoyaltiesV2Impl, ERC721Upgradeable {\n    function initialize() public initializer {\n        // _registerInterface(LibRoyaltiesV2._INTERFACE_ID_ROYALTIES);\n    }\n\n    function mint(address to, uint tokenId, LibPart.Part[] memory _fees) external {\n        _mint(to, tokenId);\n        _saveRoyalties(tokenId, _fees);\n    }\n\n    /// @inheritdoc\tERC165Upgradeable\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721Upgradeable) returns (bool) {\n        return interfaceId == LibRoyaltiesV2._INTERFACE_ID_ROYALTIES || super.supportsInterface(interfaceId);\n    }\n}\n"
    },
    "src/tokens/ERC1155WithRoyalties.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\";\nimport \"./ERC2981PerTokenRoyalties.sol\";\n\n/// @title Example of ERC1155 contract with ERC2981\n/// @author Simon Fremaux (@dievardump)\n/// @notice This is a mock, mint and mintBatch are not protected. Please do not use as-is in production\ncontract ERC1155WithRoyalties is ERC165Upgradeable, ERC1155, ERC2981PerTokenRoyalties {\n    constructor(string memory uri_) ERC1155(uri_) {}\n\n    /// @inheritdoc\tERC165Upgradeable\n    function supportsInterface(\n        bytes4 interfaceId\n    ) public view virtual override(ERC165Upgradeable, ERC1155, ERC2981Base) returns (bool) {\n        return super.supportsInterface(interfaceId);\n    }\n\n    /// @notice Mint amount token of type `id` to `to`\n    /// @param to the recipient of the token\n    /// @param id id of the token type to mint\n    /// @param amount amount of the token type to mint\n    /// @param royaltyRecipient the recipient for royalties (if royaltyValue > 0)\n    /// @param royaltyValue the royalties asked for (EIP2981)\n    function mint(address to, uint256 id, uint256 amount, address royaltyRecipient, uint256 royaltyValue) external {\n        _mint(to, id, amount, \"\");\n\n        if (royaltyValue > 0) {\n            _setTokenRoyalty(id, royaltyRecipient, royaltyValue);\n        }\n    }\n\n    /// @notice Mint several tokens at once\n    /// @param to the recipient of the token\n    /// @param ids array of ids of the token types to mint\n    /// @param amounts array of amount to mint for each token type\n    /// @param royaltyRecipients an array of recipients for royalties (if royaltyValues[i] > 0)\n    /// @param royaltyValues an array of royalties asked for (EIP2981)\n    function mintBatch(\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        address[] memory royaltyRecipients,\n        uint256[] memory royaltyValues\n    ) external {\n        require(\n            ids.length == royaltyRecipients.length && ids.length == royaltyValues.length,\n            \"ERC1155: Arrays length mismatch\"\n        );\n\n        _mintBatch(to, ids, amounts, \"\");\n\n        uint256 length = ids.length;\n        for (uint256 i; i < length; ++i) {\n            if (royaltyValues[i] > 0) {\n                _setTokenRoyalty(ids[i], royaltyRecipients[i], royaltyValues[i]);\n            }\n        }\n    }\n}\n"
    },
    "src/tokens/ERC2981Base.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\";\nimport \"../interfaces/IERC2981Royalties.sol\";\n\n/// @dev This is a contract used to add ERC2981 support to ERC721 and 1155\nabstract contract ERC2981Base is ERC165Upgradeable, IERC2981Royalties {\n    struct RoyaltyInfo {\n        address recipient;\n        uint24 amount;\n    }\n\n    /// @inheritdoc\tERC165Upgradeable\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC2981Royalties).interfaceId || super.supportsInterface(interfaceId);\n    }\n}\n"
    },
    "src/tokens/ERC2981PerTokenRoyalties.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\";\nimport \"./ERC2981Base.sol\";\n\n/// @dev This is a contract used to add ERC2981 support to ERC721 and 1155\nabstract contract ERC2981PerTokenRoyalties is ERC2981Base {\n    mapping(uint256 => RoyaltyInfo) internal _royalties;\n\n    /// @dev Sets token royalties\n    /// @param tokenId the token id fir which we register the royalties\n    /// @param recipient recipient of the royalties\n    /// @param value percentage (using 2 decimals - 10000 = 100, 0 = 0)\n    function _setTokenRoyalty(uint256 tokenId, address recipient, uint256 value) internal {\n        require(value <= 10000, \"ERC2981Royalties: Too high\");\n        _royalties[tokenId] = RoyaltyInfo(recipient, uint24(value));\n    }\n\n    /// @inheritdoc\tIERC2981Royalties\n    function royaltyInfo(\n        uint256 tokenId,\n        uint256 value\n    ) external view override returns (address receiver, uint256 royaltyAmount) {\n        RoyaltyInfo memory royalties = _royalties[tokenId];\n        receiver = royalties.recipient;\n        royaltyAmount = (value * royalties.amount) / 10000;\n    }\n}\n"
    },
    "src/tokens/ERC721WithRoyalties.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"./ERC2981PerTokenRoyalties.sol\";\n\n/// @title Example of ERC721 contract with ERC2981\n/// @author Simon Fremaux (@dievardump)\n/// @notice This is a mock, mint and mintBatch are not protected. Please do not use as-is in production\ncontract ERC721WithRoyalties is ERC165Upgradeable, ERC721, ERC2981PerTokenRoyalties {\n    uint256 public nextTokenId = 1;\n\n    constructor(string memory name_, string memory symbol_) ERC721(name_, symbol_) {}\n\n    /// @inheritdoc\tERC165Upgradeable\n    function supportsInterface(\n        bytes4 interfaceId\n    ) public view virtual override(ERC165Upgradeable, ERC721, ERC2981Base) returns (bool) {\n        return super.supportsInterface(interfaceId);\n    }\n\n    /// @notice Mint one token to `to`\n    /// @param to the recipient of the token\n    /// @param royaltyRecipient the recipient for royalties (if royaltyValue > 0)\n    /// @param royaltyValue the royalties asked for (EIP2981)\n    function mint(address to, address royaltyRecipient, uint256 royaltyValue) external {\n        uint256 tokenId = nextTokenId;\n        _safeMint(to, tokenId, \"\");\n\n        if (royaltyValue > 0) {\n            _setTokenRoyalty(tokenId, royaltyRecipient, royaltyValue);\n        }\n\n        nextTokenId = tokenId + 1;\n    }\n\n    /// @notice Mint several tokens at once\n    /// @param recipients an array of recipients for each token\n    /// @param royaltyRecipients an array of recipients for royalties (if royaltyValues[i] > 0)\n    /// @param royaltyValues an array of royalties asked for (EIP2981)\n    function mintBatch(\n        address[] memory recipients,\n        address[] memory royaltyRecipients,\n        uint256[] memory royaltyValues\n    ) external {\n        uint256 tokenId = nextTokenId;\n        require(\n            recipients.length == royaltyRecipients.length && recipients.length == royaltyValues.length,\n            \"ERC721: Arrays length mismatch\"\n        );\n\n        uint256 length = recipients.length;\n        for (uint256 i; i < length; ++i) {\n            _safeMint(recipients[i], tokenId, \"\");\n            if (royaltyValues[i] > 0) {\n                _setTokenRoyalty(tokenId, royaltyRecipients[i], royaltyValues[i]);\n            }\n            tokenId++;\n        }\n\n        nextTokenId = tokenId;\n    }\n}\n"
    },
    "src/transfer-manager/GhostMarketTransferManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\n\nimport \"../librairies/LibERC721LazyMint.sol\";\nimport \"../librairies/LibERC1155LazyMint.sol\";\nimport \"../interfaces/IRoyaltiesProvider.sol\";\nimport \"../librairies/BpLibrary.sol\";\nimport \"../interfaces/ITransferManager.sol\";\n\nabstract contract GhostMarketTransferManager is OwnableUpgradeable, ITransferManager {\n    using BpLibrary for uint;\n\n    // @notice protocolFee is deprecated\n    uint private protocolFee;\n\n    IRoyaltiesProvider public royaltiesRegistry;\n\n    // deprecated: no need without protocolFee\n    address private defaultFeeReceiver;\n\n    // deprecated: no need without protocolFee\n    mapping(address => address) private feeReceivers;\n\n    function __GhostMarketTransferManager_init_unchained(\n        uint newProtocolFee,\n        address newDefaultFeeReceiver,\n        IRoyaltiesProvider newRoyaltiesProvider\n    ) internal initializer {\n        protocolFee = newProtocolFee;\n        defaultFeeReceiver = newDefaultFeeReceiver;\n        royaltiesRegistry = newRoyaltiesProvider;\n    }\n\n    function setRoyaltiesRegistry(IRoyaltiesProvider newRoyaltiesRegistry) external onlyOwner {\n        royaltiesRegistry = newRoyaltiesRegistry;\n    }\n\n    /**\n        @notice executes transfers for 2 matched orders\n        @param left DealSide from the left order (see LibDeal.sol)\n        @param right DealSide from the right order (see LibDeal.sol)\n        @param dealData DealData of the match (see LibDeal.sol)\n        @return totalLeftValue - total amount for the left order\n        @return totalRightValue - total amout for the right order\n    */\n    function doTransfers(\n        LibDeal.DealSide memory left,\n        LibDeal.DealSide memory right,\n        LibDeal.DealData memory dealData\n    ) internal override returns (uint totalLeftValue, uint totalRightValue) {\n        totalLeftValue = left.asset.value;\n        totalRightValue = right.asset.value;\n\n        if (dealData.feeSide == LibFeeSide.FeeSide.LEFT) {\n            totalLeftValue = doTransfersWithFees(left, right, dealData.maxFeesBasePoint);\n            transferPayouts(right.asset.assetType, right.asset.value, right.from, left.payouts, right.proxy);\n        } else if (dealData.feeSide == LibFeeSide.FeeSide.RIGHT) {\n            totalRightValue = doTransfersWithFees(right, left, dealData.maxFeesBasePoint);\n            transferPayouts(left.asset.assetType, left.asset.value, left.from, right.payouts, left.proxy);\n        } else {\n            transferPayouts(left.asset.assetType, left.asset.value, left.from, right.payouts, left.proxy);\n            transferPayouts(right.asset.assetType, right.asset.value, right.from, left.payouts, right.proxy);\n        }\n    }\n\n    /**\n        @notice executes the fee-side transfers (payment + fees)\n        @param paymentSide DealSide of the fee-side order\n        @param nftSide  DealSide of the nft-side order\n        @param maxFeesBasePoint max fee for the sell-order (used and is > 0 for V3 orders only)\n        @return totalAmount of fee-side asset\n    */\n    function doTransfersWithFees(\n        LibDeal.DealSide memory paymentSide,\n        LibDeal.DealSide memory nftSide,\n        uint maxFeesBasePoint\n    ) internal returns (uint totalAmount) {\n        totalAmount = calculateTotalAmount(paymentSide.asset.value, paymentSide.originFees, maxFeesBasePoint);\n        uint rest = totalAmount;\n\n        rest = transferRoyalties(\n            paymentSide.asset.assetType,\n            nftSide.asset.assetType,\n            nftSide.payouts,\n            rest,\n            paymentSide.asset.value,\n            paymentSide.from,\n            paymentSide.proxy\n        );\n        if (\n            paymentSide.originFees.length == 1 &&\n            nftSide.originFees.length == 1 &&\n            nftSide.originFees[0].account == paymentSide.originFees[0].account\n        ) {\n            require(\n                nftSide.originFees[0].value < 10000 && paymentSide.originFees[0].value < 10000,\n                \"wrong origin fees\"\n            );\n            LibPart.Part[] memory origin = new LibPart.Part[](1);\n            origin[0].account = nftSide.originFees[0].account;\n            origin[0].value = nftSide.originFees[0].value + paymentSide.originFees[0].value;\n            (rest, ) = transferFees(\n                paymentSide.asset.assetType,\n                rest,\n                paymentSide.asset.value,\n                origin,\n                paymentSide.from,\n                paymentSide.proxy\n            );\n        } else {\n            (rest, ) = transferFees(\n                paymentSide.asset.assetType,\n                rest,\n                paymentSide.asset.value,\n                paymentSide.originFees,\n                paymentSide.from,\n                paymentSide.proxy\n            );\n            (rest, ) = transferFees(\n                paymentSide.asset.assetType,\n                rest,\n                paymentSide.asset.value,\n                nftSide.originFees,\n                paymentSide.from,\n                paymentSide.proxy\n            );\n        }\n        transferPayouts(paymentSide.asset.assetType, rest, paymentSide.from, nftSide.payouts, paymentSide.proxy);\n    }\n\n    /**\n        @notice Transfer royalties. If there is only one royalties receiver and one address in payouts and they match,\n           nothing is transferred in this function\n        @param paymentAssetType Asset Type which represents payment\n        @param nftAssetType Asset Type which represents NFT to pay royalties for\n        @param payouts Payouts to be made\n        @param rest How much of the amount left after previous transfers\n        @param from owner of the Asset to transfer\n        @param proxy Transfer proxy to use\n        @return How much left after transferring royalties\n    */\n    function transferRoyalties(\n        LibAsset.AssetType memory paymentAssetType,\n        LibAsset.AssetType memory nftAssetType,\n        LibPart.Part[] memory payouts,\n        uint rest,\n        uint amount,\n        address from,\n        address proxy\n    ) internal returns (uint) {\n        LibPart.Part[] memory royalties = getRoyaltiesByAssetType(nftAssetType);\n        if (royalties.length == 1 && payouts.length == 1 && royalties[0].account == payouts[0].account) {\n            require(royalties[0].value <= 5000, \"Royalties are too high (>50%)\");\n            return rest;\n        }\n        (uint result, uint totalRoyalties) = transferFees(paymentAssetType, rest, amount, royalties, from, proxy);\n        require(totalRoyalties <= 5000, \"Royalties are too high (>50%)\");\n        return result;\n    }\n\n    /**\n        @notice calculates royalties by asset type. If it's a lazy NFT, then royalties are extracted from asset. otherwise using royaltiesRegistry\n        @param nftAssetType NFT Asset Type to calculate royalties for\n        @return calculated royalties (Array of LibPart.Part)\n    */\n    function getRoyaltiesByAssetType(LibAsset.AssetType memory nftAssetType) internal returns (LibPart.Part[] memory) {\n        if (\n            nftAssetType.assetClass == LibAsset.ERC1155_ASSET_CLASS ||\n            nftAssetType.assetClass == LibAsset.ERC721_ASSET_CLASS\n        ) {\n            (address token, uint tokenId) = abi.decode(nftAssetType.data, (address, uint));\n            return royaltiesRegistry.getRoyalties(token, tokenId);\n        } else if (nftAssetType.assetClass == LibERC1155LazyMint.ERC1155_LAZY_ASSET_CLASS) {\n            (, LibERC1155LazyMint.Mint1155Data memory data) = abi.decode(\n                nftAssetType.data,\n                (address, LibERC1155LazyMint.Mint1155Data)\n            );\n            return data.royalties;\n        } else if (nftAssetType.assetClass == LibERC721LazyMint.ERC721_LAZY_ASSET_CLASS) {\n            (, LibERC721LazyMint.Mint721Data memory data) = abi.decode(\n                nftAssetType.data,\n                (address, LibERC721LazyMint.Mint721Data)\n            );\n            return data.royalties;\n        }\n        LibPart.Part[] memory empty;\n        return empty;\n    }\n\n    /**\n        @notice Transfer fees\n        @param assetType Asset Type to transfer\n        @param rest How much of the amount left after previous transfers\n        @param amount Total amount of the Asset. Used as a base to calculate part from (100%)\n        @param fees Array of LibPart.Part which represents fees to pay\n        @param from owner of the Asset to transfer\n        @param proxy Transfer proxy to use\n        @return newRest how much left after transferring fees\n        @return totalFees total number of fees in bp\n    */\n    function transferFees(\n        LibAsset.AssetType memory assetType,\n        uint rest,\n        uint amount,\n        LibPart.Part[] memory fees,\n        address from,\n        address proxy\n    ) internal returns (uint newRest, uint totalFees) {\n        totalFees = 0;\n        newRest = rest;\n        for (uint256 i = 0; i < fees.length; ++i) {\n            totalFees = totalFees + (fees[i].value);\n            uint feeValue;\n            (newRest, feeValue) = subFeeInBp(newRest, amount, fees[i].value);\n            if (feeValue > 0) {\n                transfer(LibAsset.Asset(assetType, feeValue), from, fees[i].account, proxy);\n            }\n        }\n    }\n\n    /**\n        @notice transfers main part of the asset (payout)\n        @param assetType Asset Type to transfer\n        @param amount Amount of the asset to transfer\n        @param from Current owner of the asset\n        @param payouts List of payouts - receivers of the Asset\n        @param proxy Transfer Proxy to use\n    */\n    function transferPayouts(\n        LibAsset.AssetType memory assetType,\n        uint amount,\n        address from,\n        LibPart.Part[] memory payouts,\n        address proxy\n    ) internal {\n        require(payouts.length > 0, \"transferPayouts: nothing to transfer\");\n        uint sumBps = 0;\n        uint rest = amount;\n        for (uint256 i = 0; i < payouts.length - 1; ++i) {\n            uint currentAmount = amount.bp(payouts[i].value);\n            sumBps = sumBps + (payouts[i].value);\n            if (currentAmount > 0) {\n                rest = rest - (currentAmount);\n                transfer(LibAsset.Asset(assetType, currentAmount), from, payouts[i].account, proxy);\n            }\n        }\n        LibPart.Part memory lastPayout = payouts[payouts.length - 1];\n        sumBps = sumBps + (lastPayout.value);\n        require(sumBps == 10000, \"Sum payouts Bps not equal 100%\");\n        if (rest > 0) {\n            transfer(LibAsset.Asset(assetType, rest), from, lastPayout.account, proxy);\n        }\n    }\n\n    /**\n        @notice calculates total amount of fee-side asset that is going to be used in match\n        @param amount fee-side order value\n        @param orderOriginFees fee-side order's origin fee (it adds on top of the amount)\n        @param maxFeesBasePoint max fee for the sell-order (used and is > 0 for V3 orders only)\n        @return total amount of fee-side asset\n    */\n    function calculateTotalAmount(\n        uint amount,\n        LibPart.Part[] memory orderOriginFees,\n        uint maxFeesBasePoint\n    ) internal pure returns (uint) {\n        if (maxFeesBasePoint > 0) {\n            return amount;\n        }\n        uint fees = 0;\n        for (uint256 i = 0; i < orderOriginFees.length; ++i) {\n            // require(orderOriginFees[i].value <= 10000, \"origin fee is too big\");\n            fees = fees + orderOriginFees[i].value;\n        }\n        return amount + (amount.bp(fees));\n    }\n\n    function subFeeInBp(uint value, uint total, uint feeInBp) internal pure returns (uint newValue, uint realFee) {\n        return subFee(value, total.bp(feeInBp));\n    }\n\n    function subFee(uint value, uint fee) internal pure returns (uint newValue, uint realFee) {\n        if (value > fee) {\n            newValue = value - (fee);\n            realFee = fee;\n        } else {\n            newValue = 0;\n            realFee = value;\n        }\n    }\n\n    uint256[46] private __gap;\n}\n"
    },
    "src/transfer-manager/tests/GhostMarketTransferManagerTest.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"../GhostMarketTransferManager.sol\";\nimport \"../TransferExecutor.sol\";\nimport \"../../librairies/LibDeal.sol\";\nimport \"../../librairies/LibFeeSide.sol\";\nimport \"../../interfaces/IRoyaltiesProvider.sol\";\nimport \"../../librairies/LibOrderData.sol\";\n\ncontract GhostMarketTransferManagerTest is GhostMarketTransferManager, TransferExecutor {\n    struct ProtocolFeeSide {\n        LibFeeSide.FeeSide feeSide;\n    }\n\n    function encode(LibOrderDataV1.DataV1 memory data) external pure returns (bytes memory) {\n        return abi.encode(data);\n    }\n\n    function encodeV2(LibOrderDataV2.DataV2 memory data) external pure returns (bytes memory) {\n        return abi.encode(data);\n    }\n\n    function init____(\n        address _transferProxy,\n        address _erc20TransferProxy,\n        uint newProtocolFee,\n        address newCommunityWallet,\n        IRoyaltiesProvider newRoyaltiesProvider\n    ) external initializer {\n        __Context_init_unchained();\n        __Ownable_init_unchained();\n        __TransferExecutor_init_unchained(_transferProxy, _erc20TransferProxy);\n        __GhostMarketTransferManager_init_unchained(newProtocolFee, newCommunityWallet, newRoyaltiesProvider);\n    }\n\n    function getDealSide(\n        LibOrder.Order memory order,\n        LibOrderData.GenericOrderData memory orderData\n    ) internal view returns (LibDeal.DealSide memory dealSide) {\n        dealSide = LibDeal.DealSide(\n            order.makeAsset,\n            orderData.payouts,\n            orderData.originFees,\n            proxies[order.makeAsset.assetType.assetClass],\n            order.maker\n        );\n    }\n\n    function getDealData(\n        bytes4 makeMatchAssetClass,\n        bytes4 takeMatchAssetClass,\n        bytes4 leftDataType,\n        bytes4 rightDataType,\n        LibOrderData.GenericOrderData memory leftOrderData,\n        LibOrderData.GenericOrderData memory rightOrderData\n    ) internal pure returns (LibDeal.DealData memory dealData) {\n        dealData.feeSide = LibFeeSide.getFeeSide(makeMatchAssetClass, takeMatchAssetClass);\n        dealData.maxFeesBasePoint = getMaxFee(\n            leftDataType,\n            rightDataType,\n            leftOrderData,\n            rightOrderData,\n            dealData.feeSide\n        );\n    }\n\n    /**\n        @notice determines the max amount of fees for the match\n        @param dataTypeLeft data type of the left order\n        @param dataTypeRight data type of the right order\n        @param leftOrderData data of the left order\n        @param rightOrderData data of the right order\n        @param feeSide fee side of the match\n        @return max fee amount in base points\n    */\n    function getMaxFee(\n        bytes4 dataTypeLeft,\n        bytes4 dataTypeRight,\n        LibOrderData.GenericOrderData memory leftOrderData,\n        LibOrderData.GenericOrderData memory rightOrderData,\n        LibFeeSide.FeeSide feeSide\n    ) internal pure returns (uint) {\n        if (\n            dataTypeLeft != LibOrderDataV3.V3_SELL &&\n            dataTypeRight != LibOrderDataV3.V3_SELL &&\n            dataTypeLeft != LibOrderDataV3.V3_BUY &&\n            dataTypeRight != LibOrderDataV3.V3_BUY\n        ) {\n            return 0;\n        }\n\n        uint matchFees = getSumFees(leftOrderData.originFees, rightOrderData.originFees);\n        uint maxFee;\n        if (feeSide == LibFeeSide.FeeSide.LEFT) {\n            maxFee = rightOrderData.maxFeesBasePoint;\n            require(dataTypeLeft == LibOrderDataV3.V3_BUY && dataTypeRight == LibOrderDataV3.V3_SELL, \"wrong V3 type1\");\n        } else if (feeSide == LibFeeSide.FeeSide.RIGHT) {\n            maxFee = leftOrderData.maxFeesBasePoint;\n            require(dataTypeRight == LibOrderDataV3.V3_BUY && dataTypeLeft == LibOrderDataV3.V3_SELL, \"wrong V3 type2\");\n        } else {\n            return 0;\n        }\n        require(maxFee > 0 && maxFee >= matchFees && maxFee <= 1000, \"wrong maxFee\");\n\n        return maxFee;\n    }\n\n    /**\n        @notice calculates amount of fees for the match\n        @param originLeft origin fees of the left order\n        @param originRight origin fees of the right order\n        @return sum of all fees for the match (protcolFee + leftOrder.originFees + rightOrder.originFees)\n     */\n    function getSumFees(\n        LibPart.Part[] memory originLeft,\n        LibPart.Part[] memory originRight\n    ) internal pure returns (uint) {\n        uint result = 0;\n\n        //adding left origin fees\n        for (uint i; i < originLeft.length; i++) {\n            result = result + originLeft[i].value;\n        }\n\n        //adding right origin fees\n        for (uint i; i < originRight.length; i++) {\n            result = result + originRight[i].value;\n        }\n\n        return result;\n    }\n\n    function doTransfersExternal(\n        LibOrder.Order memory left,\n        LibOrder.Order memory right\n    ) external payable returns (uint totalLeftValue, uint totalRightValue) {\n        LibOrderData.GenericOrderData memory leftData = LibOrderData.parse(left);\n        LibOrderData.GenericOrderData memory rightData = LibOrderData.parse(right);\n\n        return\n            doTransfers(\n                getDealSide(left, leftData),\n                getDealSide(right, rightData),\n                getDealData(\n                    left.makeAsset.assetType.assetClass,\n                    right.makeAsset.assetType.assetClass,\n                    left.dataType,\n                    right.dataType,\n                    leftData,\n                    rightData\n                )\n            );\n    }\n}\n"
    },
    "src/transfer-manager/tests/TransferExecutorTest.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"../TransferExecutor.sol\";\n\ncontract TransferExecutorTest is Initializable, OwnableUpgradeable, TransferExecutor {\n    function __TransferExecutorTest_init(address _transferProxy, address _erc20TransferProxy) external initializer {\n        __Ownable_init_unchained();\n        __TransferExecutor_init_unchained(_transferProxy, _erc20TransferProxy);\n    }\n\n    function transferTest(LibAsset.Asset calldata asset, address from, address to) external payable {\n        TransferExecutor.transfer(asset, from, to, proxies[asset.assetType.assetClass]);\n    }\n}\n"
    },
    "src/transfer-manager/TransferExecutor.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"../interfaces/ITransferProxy.sol\";\nimport \"../interfaces/INftTransferProxy.sol\";\nimport \"../interfaces/IERC20TransferProxy.sol\";\nimport \"../interfaces/ITransferExecutor.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"../librairies/LibTransfer.sol\";\n\nabstract contract TransferExecutor is Initializable, OwnableUpgradeable, ITransferExecutor {\n    using LibTransfer for address;\n\n    mapping(bytes4 => address) internal proxies;\n\n    event ProxyChange(bytes4 indexed assetType, address proxy);\n\n    function __TransferExecutor_init_unchained(address transferProxy, address erc20TransferProxy) internal {\n        proxies[LibAsset.ERC20_ASSET_CLASS] = address(erc20TransferProxy);\n        proxies[LibAsset.ERC721_ASSET_CLASS] = address(transferProxy);\n        proxies[LibAsset.ERC1155_ASSET_CLASS] = address(transferProxy);\n    }\n\n    function setTransferProxy(bytes4 assetType, address proxy) external onlyOwner {\n        proxies[assetType] = proxy;\n        emit ProxyChange(assetType, proxy);\n    }\n\n    function transfer(LibAsset.Asset memory asset, address from, address to, address proxy) internal override {\n        if (asset.assetType.assetClass == LibAsset.ERC721_ASSET_CLASS) {\n            //not using transfer proxy when transfering from this contract\n            (address token, uint tokenId) = abi.decode(asset.assetType.data, (address, uint256));\n            require(asset.value == 1, \"erc721 value error\");\n            if (from == address(this)) {\n                IERC721Upgradeable(token).safeTransferFrom(address(this), to, tokenId);\n            } else {\n                INftTransferProxy(proxy).erc721safeTransferFrom(IERC721Upgradeable(token), from, to, tokenId);\n            }\n        } else if (asset.assetType.assetClass == LibAsset.ERC20_ASSET_CLASS) {\n            //not using transfer proxy when transfering from this contract\n            address token = abi.decode(asset.assetType.data, (address));\n            if (from == address(this)) {\n                require(IERC20Upgradeable(token).transfer(to, asset.value), \"erc20 transfer failed\");\n            } else {\n                IERC20TransferProxy(proxy).erc20safeTransferFrom(IERC20Upgradeable(token), from, to, asset.value);\n            }\n        } else if (asset.assetType.assetClass == LibAsset.ERC1155_ASSET_CLASS) {\n            //not using transfer proxy when transfering from this contract\n            (address token, uint tokenId) = abi.decode(asset.assetType.data, (address, uint256));\n            if (from == address(this)) {\n                IERC1155Upgradeable(token).safeTransferFrom(address(this), to, tokenId, asset.value, \"\");\n            } else {\n                INftTransferProxy(proxy).erc1155safeTransferFrom(\n                    IERC1155Upgradeable(token),\n                    from,\n                    to,\n                    tokenId,\n                    asset.value,\n                    \"\"\n                );\n            }\n        } else if (asset.assetType.assetClass == LibAsset.ETH_ASSET_CLASS) {\n            if (to != address(this)) {\n                to.transferEth(asset.value);\n            }\n        } else {\n            ITransferProxy(proxy).transfer(asset, from, to);\n        }\n    }\n\n    uint256[49] private __gap;\n}\n"
    },
    "src/transfer-proxy/ERC1155LazyMintTransferProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"./../interfaces/ITransferProxy.sol\";\nimport \"./../interfaces/IERC1155LazyMint.sol\";\nimport \"./../librairies/LibERC1155LazyMint.sol\";\nimport \"./../operator/OperatorRole.sol\";\n\n/// @notice ERC1155 Lazy Mint Transfer Proxy Contract\ncontract ERC1155LazyMintTransferProxy is OperatorRole, ITransferProxy {\n    /// @notice Transfer method for ERC1155 lazy minted nft\n    /// @param asset asset to transfer\n    /// @param from address to transfer from\n    /// @param to address to transfer to\n    function transfer(LibAsset.Asset memory asset, address from, address to) external override onlyOperator {\n        (address token, LibERC1155LazyMint.Mint1155Data memory data) = abi.decode(\n            asset.assetType.data,\n            (address, LibERC1155LazyMint.Mint1155Data)\n        );\n        IERC1155LazyMint(token).transferFromOrMint(data, from, to, asset.value);\n    }\n}\n"
    },
    "src/transfer-proxy/ERC20TransferProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"../operator/OperatorRole.sol\";\nimport \"../interfaces/IERC20TransferProxy.sol\";\n\ncontract ERC20TransferProxy is IERC20TransferProxy, Initializable, OperatorRole {\n    function __ERC20TransferProxy_init() external initializer {\n        __Ownable_init();\n    }\n\n    function erc20safeTransferFrom(\n        IERC20Upgradeable token,\n        address from,\n        address to,\n        uint256 value\n    ) external override onlyOperator {\n        require(token.transferFrom(from, to, value), \"failure while transferring\");\n    }\n}\n"
    },
    "src/transfer-proxy/ERC721LazyMintTransferProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"./../interfaces/ITransferProxy.sol\";\nimport \"./../interfaces/IERC721LazyMint.sol\";\nimport \"./../librairies/LibERC721LazyMint.sol\";\nimport \"./../operator/OperatorRole.sol\";\n\n/// @notice ERC721 Lazy Mint Transfer Proxy Contract\ncontract ERC721LazyMintTransferProxy is OperatorRole, ITransferProxy {\n    /// @notice Transfer method for ERC721 lazy minted nft\n    /// @param asset asset to transfer\n    /// @param from address to transfer from\n    /// @param to address to transfer to\n    function transfer(LibAsset.Asset memory asset, address from, address to) external override onlyOperator {\n        require(asset.value == 1, \"ERC721 value error\");\n        (address token, LibERC721LazyMint.Mint721Data memory data) = abi.decode(\n            asset.assetType.data,\n            (address, LibERC721LazyMint.Mint721Data)\n        );\n        IERC721LazyMint(token).transferFromOrMint(data, from, to);\n    }\n}\n"
    },
    "src/transfer-proxy/tests/ERC1155LazyMintTransferProxyTest.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"../../interfaces/ITransferProxy.sol\";\nimport \"../../interfaces/IERC1155LazyMint.sol\";\nimport \"../../librairies/LibERC1155LazyMint.sol\";\nimport \"../../operator/OperatorRole.sol\";\n\ncontract ERC1155LazyMintTransferProxyTest is OperatorRole, ITransferProxy {\n    function transfer(LibAsset.Asset memory asset, address from, address to) external override onlyOperator {\n        (address token, LibERC1155LazyMint.Mint1155Data memory data) = abi.decode(\n            asset.assetType.data,\n            (address, LibERC1155LazyMint.Mint1155Data)\n        );\n        IERC1155LazyMint(token).transferFromOrMint(data, from, to, asset.value);\n    }\n}\n"
    },
    "src/transfer-proxy/tests/ERC721LazyMintTransferProxyTest.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"../../interfaces/ITransferProxy.sol\";\nimport \"../../interfaces/IERC721LazyMint.sol\";\nimport \"../../librairies/LibERC721LazyMint.sol\";\nimport \"../../operator/OperatorRole.sol\";\n\ncontract ERC721LazyMintTransferProxyTest is OperatorRole, ITransferProxy {\n    function transfer(LibAsset.Asset memory asset, address from, address to) external override onlyOperator {\n        require(asset.value == 1, \"ERC721 value error\");\n        (address token, LibERC721LazyMint.Mint721Data memory data) = abi.decode(\n            asset.assetType.data,\n            (address, LibERC721LazyMint.Mint721Data)\n        );\n        IERC721LazyMint(token).transferFromOrMint(data, from, to);\n    }\n}\n"
    },
    "src/transfer-proxy/TransferProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"../operator/OperatorRole.sol\";\nimport \"../interfaces/INftTransferProxy.sol\";\n\ncontract TransferProxy is INftTransferProxy, Initializable, OperatorRole {\n    function __TransferProxy_init() external initializer {\n        __Ownable_init();\n    }\n\n    function erc721safeTransferFrom(\n        IERC721Upgradeable token,\n        address from,\n        address to,\n        uint256 tokenId\n    ) external override onlyOperator {\n        token.safeTransferFrom(from, to, tokenId);\n    }\n\n    function erc1155safeTransferFrom(\n        IERC1155Upgradeable token,\n        address from,\n        address to,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external override onlyOperator {\n        token.safeTransferFrom(from, to, id, value, data);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 100
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}