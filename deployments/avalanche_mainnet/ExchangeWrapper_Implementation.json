{
  "address": "0x1e555AD11AE568dE4e49c19e342fCc7baFb55845",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "result",
          "type": "bool"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "Execution",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_exchangeV2",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rarible",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_wyvern",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_seaport",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_x2y2",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_looksrare",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_sudoswap",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_blur",
          "type": "address"
        }
      ],
      "name": "__ExchangeWrapper_init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "blur",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "enum ExchangeWrapperCore.Markets",
              "name": "marketId",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fees",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct ExchangeWrapperCore.PurchaseDetails[]",
          "name": "purchaseDetails",
          "type": "tuple[]"
        },
        {
          "internalType": "address",
          "name": "feeRecipientFirst",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "feeRecipientSecond",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "allowFail",
          "type": "bool"
        }
      ],
      "name": "bulkPurchase",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "enum ExchangeWrapperCore.Markets",
              "name": "marketId",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fees",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct ExchangeWrapperCore.PurchaseDetails[]",
          "name": "purchaseDetails",
          "type": "tuple[]"
        },
        {
          "internalType": "address",
          "name": "feeRecipientFirst",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "feeRecipientSecond",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "allowFail",
          "type": "bool"
        },
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "path",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountInMaximum",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "unwrap",
              "type": "bool"
            }
          ],
          "internalType": "struct ExchangeWrapperCore.SwapDetailsIn",
          "name": "swapDetails",
          "type": "tuple"
        }
      ],
      "name": "bulkPurchaseWithSwap",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "enum ExchangeWrapperCore.Markets",
              "name": "marketId",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fees",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct ExchangeWrapperCore.PurchaseDetails[]",
          "name": "purchaseDetails",
          "type": "tuple[]"
        },
        {
          "internalType": "address",
          "name": "feeRecipientFirst",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "feeRecipientSecond",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "allowFail",
          "type": "bool"
        },
        {
          "components": [
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountInMaximum",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "binSteps",
              "type": "uint256[]"
            },
            {
              "internalType": "bool",
              "name": "unwrap",
              "type": "bool"
            }
          ],
          "internalType": "struct ExchangeWrapperCore.SwapV2DetailsIn",
          "name": "swapDetails",
          "type": "tuple"
        }
      ],
      "name": "bulkPurchaseWithV2Swap",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "erc20TransferProxy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exchangeV2",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "looksrare",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rarible",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "seaport",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_blur",
          "type": "address"
        }
      ],
      "name": "setBlur",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rarible",
          "type": "address"
        }
      ],
      "name": "setRarible",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_erc20TransferProxy",
          "type": "address"
        }
      ],
      "name": "setTransferProxy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISwapRouterV2",
          "name": "_uniswapRouterV2",
          "type": "address"
        }
      ],
      "name": "setUniswapV2",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISwapRouterV3",
          "name": "_uniswapRouterV3",
          "type": "address"
        }
      ],
      "name": "setUniswapV3",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_wrappedToken",
          "type": "address"
        }
      ],
      "name": "setWrapped",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "enum ExchangeWrapperCore.Markets",
              "name": "marketId",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fees",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct ExchangeWrapperCore.PurchaseDetails",
          "name": "purchaseDetails",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "feeRecipientFirst",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "feeRecipientSecond",
          "type": "address"
        }
      ],
      "name": "singlePurchase",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sudoswap",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "path",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOutMinimum",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "unwrap",
              "type": "bool"
            }
          ],
          "internalType": "struct ExchangeWrapperCore.SwapDetailsOut",
          "name": "swapDetails",
          "type": "tuple"
        }
      ],
      "name": "swapExactTokensForTokens",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "path",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountInMaximum",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "unwrap",
              "type": "bool"
            }
          ],
          "internalType": "struct ExchangeWrapperCore.SwapDetailsIn",
          "name": "swapDetails",
          "type": "tuple"
        },
        {
          "internalType": "bool",
          "name": "combined",
          "type": "bool"
        }
      ],
      "name": "swapTokensForExactTokens",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOutMinimum",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "binSteps",
              "type": "uint256[]"
            },
            {
              "internalType": "bool",
              "name": "unwrap",
              "type": "bool"
            }
          ],
          "internalType": "struct ExchangeWrapperCore.SwapV2DetailsOut",
          "name": "swapDetails",
          "type": "tuple"
        }
      ],
      "name": "swapV2ExactETHOrWETHForTokens",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOutMinimum",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "binSteps",
              "type": "uint256[]"
            },
            {
              "internalType": "bool",
              "name": "unwrap",
              "type": "bool"
            }
          ],
          "internalType": "struct ExchangeWrapperCore.SwapV2DetailsOut",
          "name": "swapDetails",
          "type": "tuple"
        }
      ],
      "name": "swapV2ExactTokensForTokens",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountInMaximum",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "binSteps",
              "type": "uint256[]"
            },
            {
              "internalType": "bool",
              "name": "unwrap",
              "type": "bool"
            }
          ],
          "internalType": "struct ExchangeWrapperCore.SwapV2DetailsIn",
          "name": "swapDetails",
          "type": "tuple"
        },
        {
          "internalType": "bool",
          "name": "combined",
          "type": "bool"
        }
      ],
      "name": "swapV2TokensForExactETHOrWETH",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountInMaximum",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "binSteps",
              "type": "uint256[]"
            },
            {
              "internalType": "bool",
              "name": "unwrap",
              "type": "bool"
            }
          ],
          "internalType": "struct ExchangeWrapperCore.SwapV2DetailsIn",
          "name": "swapDetails",
          "type": "tuple"
        },
        {
          "internalType": "bool",
          "name": "combined",
          "type": "bool"
        }
      ],
      "name": "swapV2TokensForExactTokens",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniswapRouterV2",
      "outputs": [
        {
          "internalType": "contract ISwapRouterV2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniswapRouterV3",
      "outputs": [
        {
          "internalType": "contract ISwapRouterV3",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wrappedToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wyvern",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "x2y2",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x49da77f8446e9129ba7a821fea6639e3359dad7113acff3594ae929a6ca51247",
  "receipt": {
    "to": null,
    "from": "0x07714A8BF073510996D948D8aA39f8E32627fe62",
    "contractAddress": "0x1e555AD11AE568dE4e49c19e342fCc7baFb55845",
    "transactionIndex": 3,
    "gasUsed": "5272775",
    "logsBloom": "0x
    "blockHash": "0x4945a4454a3f1334741c4a9d2ac335f0405481bb27fd4b11516f99006a95252f",
    "transactionHash": "0x49da77f8446e9129ba7a821fea6639e3359dad7113acff3594ae929a6ca51247",
    "logs": [],
    "blockNumber": 26560196,
    "cumulativeGasUsed": "5397164",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "4c9df9b56afbd8c50a8913f0f5775ab0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"Execution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_exchangeV2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rarible\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wyvern\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_seaport\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_x2y2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_looksrare\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sudoswap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_blur\",\"type\":\"address\"}],\"name\":\"__ExchangeWrapper_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blur\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum ExchangeWrapperCore.Markets\",\"name\":\"marketId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct ExchangeWrapperCore.PurchaseDetails[]\",\"name\":\"purchaseDetails\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"feeRecipientFirst\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeRecipientSecond\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowFail\",\"type\":\"bool\"}],\"name\":\"bulkPurchase\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum ExchangeWrapperCore.Markets\",\"name\":\"marketId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct ExchangeWrapperCore.PurchaseDetails[]\",\"name\":\"purchaseDetails\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"feeRecipientFirst\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeRecipientSecond\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowFail\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMaximum\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"unwrap\",\"type\":\"bool\"}],\"internalType\":\"struct ExchangeWrapperCore.SwapDetailsIn\",\"name\":\"swapDetails\",\"type\":\"tuple\"}],\"name\":\"bulkPurchaseWithSwap\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum ExchangeWrapperCore.Markets\",\"name\":\"marketId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct ExchangeWrapperCore.PurchaseDetails[]\",\"name\":\"purchaseDetails\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"feeRecipientFirst\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeRecipientSecond\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowFail\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMaximum\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"binSteps\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"unwrap\",\"type\":\"bool\"}],\"internalType\":\"struct ExchangeWrapperCore.SwapV2DetailsIn\",\"name\":\"swapDetails\",\"type\":\"tuple\"}],\"name\":\"bulkPurchaseWithV2Swap\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc20TransferProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeV2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"looksrare\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rarible\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seaport\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_blur\",\"type\":\"address\"}],\"name\":\"setBlur\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rarible\",\"type\":\"address\"}],\"name\":\"setRarible\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20TransferProxy\",\"type\":\"address\"}],\"name\":\"setTransferProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISwapRouterV2\",\"name\":\"_uniswapRouterV2\",\"type\":\"address\"}],\"name\":\"setUniswapV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISwapRouterV3\",\"name\":\"_uniswapRouterV3\",\"type\":\"address\"}],\"name\":\"setUniswapV3\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wrappedToken\",\"type\":\"address\"}],\"name\":\"setWrapped\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum ExchangeWrapperCore.Markets\",\"name\":\"marketId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct ExchangeWrapperCore.PurchaseDetails\",\"name\":\"purchaseDetails\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"feeRecipientFirst\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeRecipientSecond\",\"type\":\"address\"}],\"name\":\"singlePurchase\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sudoswap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMinimum\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"unwrap\",\"type\":\"bool\"}],\"internalType\":\"struct ExchangeWrapperCore.SwapDetailsOut\",\"name\":\"swapDetails\",\"type\":\"tuple\"}],\"name\":\"swapExactTokensForTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMaximum\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"unwrap\",\"type\":\"bool\"}],\"internalType\":\"struct ExchangeWrapperCore.SwapDetailsIn\",\"name\":\"swapDetails\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"combined\",\"type\":\"bool\"}],\"name\":\"swapTokensForExactTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMinimum\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"binSteps\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"unwrap\",\"type\":\"bool\"}],\"internalType\":\"struct ExchangeWrapperCore.SwapV2DetailsOut\",\"name\":\"swapDetails\",\"type\":\"tuple\"}],\"name\":\"swapV2ExactETHOrWETHForTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMinimum\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"binSteps\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"unwrap\",\"type\":\"bool\"}],\"internalType\":\"struct ExchangeWrapperCore.SwapV2DetailsOut\",\"name\":\"swapDetails\",\"type\":\"tuple\"}],\"name\":\"swapV2ExactTokensForTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMaximum\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"binSteps\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"unwrap\",\"type\":\"bool\"}],\"internalType\":\"struct ExchangeWrapperCore.SwapV2DetailsIn\",\"name\":\"swapDetails\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"combined\",\"type\":\"bool\"}],\"name\":\"swapV2TokensForExactETHOrWETH\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMaximum\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"binSteps\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"unwrap\",\"type\":\"bool\"}],\"internalType\":\"struct ExchangeWrapperCore.SwapV2DetailsIn\",\"name\":\"swapDetails\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"combined\",\"type\":\"bool\"}],\"name\":\"swapV2TokensForExactTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapRouterV2\",\"outputs\":[{\"internalType\":\"contract ISwapRouterV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapRouterV3\",\"outputs\":[{\"internalType\":\"contract ISwapRouterV3\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrappedToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wyvern\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"x2y2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"bulkPurchase((uint8,uint256,uint256,bytes)[],address,address,bool)\":{\"params\":{\"allowFail\":\"- true if fails while executing orders are allowed, false if fail of a single order means fail of the whole batch\",\"feeRecipientFirst\":\"- address of the first fee recipient\",\"feeRecipientSecond\":\"- address of the second fee recipient\",\"purchaseDetails\":\"- array of details about the purchases (more info in PurchaseDetails struct)\"}},\"bulkPurchaseWithSwap((uint8,uint256,uint256,bytes)[],address,address,bool,(bytes,uint256,uint256,bool))\":{\"params\":{\"allowFail\":\"- true if fails while executing orders are allowed, false if fail of a single order means fail of the whole batch\",\"feeRecipientFirst\":\"- address of the first fee recipient\",\"feeRecipientSecond\":\"- address of the second fee recipient\",\"purchaseDetails\":\"- array of details about the purchases (more info in PurchaseDetails struct)\",\"swapDetails\":\"- swapDetails v3\"}},\"bulkPurchaseWithV2Swap((uint8,uint256,uint256,bytes)[],address,address,bool,(address[],uint256,uint256,uint256[],bool))\":{\"params\":{\"allowFail\":\"- true if fails while executing orders are allowed, false if fail of a single order means fail of the whole batch\",\"feeRecipientFirst\":\"- address of the first fee recipient\",\"feeRecipientSecond\":\"- address of the second fee recipient\",\"purchaseDetails\":\"- array of details about the purchases (more info in PurchaseDetails struct)\",\"swapDetails\":\"- swapDetails v2\"}},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"singlePurchase((uint8,uint256,uint256,bytes),address,address)\":{\"params\":{\"feeRecipientFirst\":\"- address of the first fee recipient\",\"feeRecipientSecond\":\"- address of the second fee recipient\",\"purchaseDetails\":\"- details about the purchase (more info in PurchaseDetails struct)\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"swapExactTokensForTokens((bytes,uint256,uint256,bool))\":{\"params\":{\"swapDetails\":\"swapDetails required\"}},\"swapTokensForExactTokens((bytes,uint256,uint256,bool),bool)\":{\"params\":{\"combined\":\"combined swap + buy - if true funds are not sent back to sender buy kept for trade\",\"swapDetails\":\"swapDetails required\"}},\"swapV2ExactETHOrWETHForTokens((address[],uint256,uint256,uint256[],bool))\":{\"params\":{\"swapDetails\":\"swapDetails required\"}},\"swapV2ExactTokensForTokens((address[],uint256,uint256,uint256[],bool))\":{\"params\":{\"swapDetails\":\"swapDetails required\"}},\"swapV2TokensForExactETHOrWETH((address[],uint256,uint256,uint256[],bool),bool)\":{\"params\":{\"combined\":\"combined swap + buy - if true funds are not sent back to sender buy kept for trade\",\"swapDetails\":\"swapDetails required\"}},\"swapV2TokensForExactTokens((address[],uint256,uint256,uint256[],bool),bool)\":{\"params\":{\"combined\":\"combined swap + buy - if true funds are not sent back to sender buy kept for trade\",\"swapDetails\":\"swapDetails required\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"bulkPurchase((uint8,uint256,uint256,bytes)[],address,address,bool)\":{\"notice\":\"executes an array of purchases\"},\"bulkPurchaseWithSwap((uint8,uint256,uint256,bytes)[],address,address,bool,(bytes,uint256,uint256,bool))\":{\"notice\":\"executes an array of purchases - with swap v3\"},\"bulkPurchaseWithV2Swap((uint8,uint256,uint256,bytes)[],address,address,bool,(address[],uint256,uint256,uint256[],bool))\":{\"notice\":\"executes an array of purchases - with swap v2 - tokens for tokens or tokens for eth/weth\"},\"pause()\":{\"notice\":\"Pause the contract\"},\"setRarible(address)\":{\"notice\":\"temp for upgrade - to remove once initialized\"},\"setTransferProxy(address)\":{\"notice\":\"Set erc20 transfer proxy\"},\"setUniswapV2(address)\":{\"notice\":\"Set uniswap v2 router\"},\"setUniswapV3(address)\":{\"notice\":\"Set uniswap v3 router\"},\"setWrapped(address)\":{\"notice\":\"Set wrapped token\"},\"singlePurchase((uint8,uint256,uint256,bytes),address,address)\":{\"notice\":\"executes a single purchase\"},\"swapExactTokensForTokens((bytes,uint256,uint256,bool))\":{\"notice\":\"swaps exact tokens for tokens - uniswap v3\"},\"swapTokensForExactTokens((bytes,uint256,uint256,bool),bool)\":{\"notice\":\"swaps tokens for exact tokens - uniswap v3\"},\"swapV2ExactETHOrWETHForTokens((address[],uint256,uint256,uint256[],bool))\":{\"notice\":\"swaps exact ETH or WETH for tokens - uniswap v2\"},\"swapV2ExactTokensForTokens((address[],uint256,uint256,uint256[],bool))\":{\"notice\":\"swaps exact tokens for tokens - uniswap v2\"},\"swapV2TokensForExactETHOrWETH((address[],uint256,uint256,uint256[],bool),bool)\":{\"notice\":\"swaps tokens for exact ETH or WETH - uniswap v2\"},\"swapV2TokensForExactTokens((address[],uint256,uint256,uint256[],bool),bool)\":{\"notice\":\"swaps tokens for exact tokens - uniswap v2\"},\"unpause()\":{\"notice\":\"Unpause the contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/exchange-wrapper/ExchangeWrapper.sol\":\"ExchangeWrapper\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x091a49ef99a2be002680781a10cc9dd74c0f348301ede5482c4ea625f79a8ffe\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xcc70d8e2281fb3ff69e8ab242500f10142cd0a7fa8dd9e45882be270d4d09024\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf42efac0d704b136c4d85e970562d4dbc1160d726ee93b5133122eb14fe368df\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x016298e66a5810253c6c905e61966bb31c8775c3f3517bf946ff56ee31d6c005\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155Receiver.sol\\\";\\n\\n/**\\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\\n *\\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\\n * stuck.\\n *\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x2e024ca51ce5abe16c0d34e6992a1104f356e2244eb4ccbec970435e8b3405e3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x3dd5e1a66a56f30302108a1da97d677a42b1daa60e503696b2bcbbf3e4c95bcb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x0108bf6a6ebd5f96678bed33a35947537263f96766131ee91461fb6485805028\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"src/exchange-wrapper/ExchangeWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./ExchangeWrapperCore.sol\\\";\\n\\ncontract ExchangeWrapper is ExchangeWrapperCore {\\n    function __ExchangeWrapper_init(\\n        address _exchangeV2,\\n        address _rarible,\\n        address _wyvern,\\n        address _seaport,\\n        address _x2y2,\\n        address _looksrare,\\n        address _sudoswap,\\n        address _blur\\n    ) external initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n        __Pausable_init_unchained();\\n        __ExchangeWrapper_init_unchained(_exchangeV2, _rarible, _wyvern, _seaport, _x2y2, _looksrare, _sudoswap, _blur);\\n    }\\n}\\n\",\"keccak256\":\"0x5978d1d2f84e72de99053110d91b04c05eef0ac0953e73272d1acc4141ee25a0\",\"license\":\"MIT\"},\"src/exchange-wrapper/ExchangeWrapperCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../librairies/LibTransfer.sol\\\";\\nimport \\\"../librairies/BpLibrary.sol\\\";\\nimport \\\"../librairies/LibPart.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\n\\nimport \\\"./interfaces/IWyvernExchange.sol\\\";\\nimport \\\"./interfaces/IExchangeV2.sol\\\";\\nimport \\\"./interfaces/ISeaPort.sol\\\";\\nimport \\\"./interfaces/Ix2y2.sol\\\";\\nimport \\\"./interfaces/ILooksRare.sol\\\";\\nimport \\\"./interfaces/IBlurExchange.sol\\\";\\nimport \\\"./interfaces/IWETH.sol\\\";\\nimport \\\"./interfaces/ISwapRouterV3.sol\\\";\\nimport \\\"./interfaces/ISwapRouterV2.sol\\\";\\nimport \\\"../interfaces/INftTransferProxy.sol\\\";\\nimport \\\"../interfaces/IERC20TransferProxy.sol\\\";\\n\\nabstract contract ExchangeWrapperCore is\\n    Initializable,\\n    OwnableUpgradeable,\\n    PausableUpgradeable,\\n    ERC721Holder,\\n    ERC1155Holder\\n{\\n    using LibTransfer for address;\\n    using BpLibrary for uint;\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    address public exchangeV2;\\n    address public rarible;\\n    address public wyvern;\\n    address public seaport;\\n    address public x2y2;\\n    address public looksrare;\\n    address public sudoswap;\\n    address public blur;\\n    ISwapRouterV2 public uniswapRouterV2;\\n    ISwapRouterV3 public uniswapRouterV3;\\n    address public wrappedToken;\\n    address public erc20TransferProxy;\\n\\n    event Execution(bool result, address indexed sender);\\n\\n    enum Markets {\\n        Rarible,\\n        Wyvern,\\n        SeaPort,\\n        X2Y2,\\n        LooksRare,\\n        SudoSwap,\\n        ExchangeV2,\\n        Blur\\n    }\\n\\n    enum AdditionalDataTypes {\\n        NoAdditionalData,\\n        RoyaltiesAdditionalData\\n    }\\n\\n    /**\\n        @notice struct for the purchase data\\n        @param marketId - market key from Markets enum (what market to use)\\n        @param amount - eth price (amount of eth that needs to be send to the marketplace)\\n        @param fees - 2 fees (in base points) that are going to be taken on top of order amount encoded in 1 uint256\\n                        bytes (27,28) used for dataType\\n                        bytes (29,30) used for the first value (goes to feeRecipientFirst)\\n                        bytes (31,32) are used for the second value (goes to feeRecipientSecond)\\n        @param data - data for market call\\n     */\\n    struct PurchaseDetails {\\n        Markets marketId;\\n        uint256 amount;\\n        uint fees;\\n        bytes data;\\n    }\\n\\n    /**\\n        @notice struct for the data with additional Ddta\\n        @param data - data for market call\\n        @param additionalRoyalties - array additional Royalties (in base points plus address Royalty recipient)\\n     */\\n    struct AdditionalData {\\n        bytes data;\\n        uint[] additionalRoyalties;\\n    }\\n\\n    /**\\n        @notice struct for the swap in v3 data\\n        @param path - tokenIn\\n        @param amountOut - amountOut\\n        @param amountInMaximum - amountInMaximum\\n        @param unwrap - unwrap\\n     */\\n    struct SwapDetailsIn {\\n        bytes path;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        bool unwrap;\\n    }\\n\\n    /**\\n        @notice struct for the swap out v3 data\\n        @param path - path\\n        @param amountIn - amountIn\\n        @param amountOutMinimum - amountOutMinimum\\n        @param unwrap - unwrap\\n     */\\n    struct SwapDetailsOut {\\n        bytes path;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        bool unwrap;\\n    }\\n\\n    /**\\n        @notice struct for the swap in v2 data\\n        @param path - tokenIn\\n        @param amountOut - amountOut\\n        @param amountInMaximum - amountInMaximum\\n        @param binSteps - binSteps\\n        @param unwrap - unwrap\\n     */\\n    struct SwapV2DetailsIn {\\n        address[] path;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint256[] binSteps;\\n        bool unwrap;\\n    }\\n\\n    /**\\n        @notice struct for the swap out v2 data\\n        @param path - tokenIn\\n        @param amountIn - amountIn\\n        @param amountOutMinimum - amountOutMinimum\\n        @param binSteps - binSteps\\n        @param unwrap - unwrap\\n     */\\n    struct SwapV2DetailsOut {\\n        address[] path;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint256[] binSteps;\\n        bool unwrap;\\n    }\\n\\n    function __ExchangeWrapper_init_unchained(\\n        address _exchangeV2,\\n        address _rarible,\\n        address _wyvern,\\n        address _seaport,\\n        address _x2y2,\\n        address _looksrare,\\n        address _sudoswap,\\n        address _blur\\n    ) internal {\\n        exchangeV2 = _exchangeV2;\\n        rarible = _rarible;\\n        wyvern = _wyvern;\\n        seaport = _seaport;\\n        x2y2 = _x2y2;\\n        looksrare = _looksrare;\\n        sudoswap = _sudoswap;\\n        blur = _blur;\\n    }\\n\\n    /// @notice Pause the contract\\n    function pause() public onlyOwner {\\n        _pause();\\n    }\\n\\n    /// @notice Unpause the contract\\n    function unpause() public onlyOwner {\\n        _unpause();\\n    }\\n\\n    /// @notice Set uniswap v2 router\\n    function setUniswapV2(ISwapRouterV2 _uniswapRouterV2) external onlyOwner {\\n        uniswapRouterV2 = _uniswapRouterV2;\\n    }\\n\\n    /// @notice Set uniswap v3 router\\n    function setUniswapV3(ISwapRouterV3 _uniswapRouterV3) external onlyOwner {\\n        uniswapRouterV3 = _uniswapRouterV3;\\n    }\\n\\n    /// @notice Set wrapped token\\n    function setWrapped(address _wrappedToken) external onlyOwner {\\n        wrappedToken = _wrappedToken;\\n    }\\n\\n    /// @notice Set erc20 transfer proxy\\n    function setTransferProxy(address _erc20TransferProxy) external onlyOwner {\\n        erc20TransferProxy = _erc20TransferProxy;\\n    }\\n\\n    /// temp for upgrade - to remove once initialized\\n    function setRarible(address _rarible) external onlyOwner {\\n        rarible = _rarible;\\n    }\\n\\n    function setBlur(address _blur) external onlyOwner {\\n        blur = _blur;\\n    }\\n\\n    /// temp for upgrade - to remove once initialized\\n\\n    /**\\n        @notice executes a single purchase\\n        @param purchaseDetails - details about the purchase (more info in PurchaseDetails struct)\\n        @param feeRecipientFirst - address of the first fee recipient\\n        @param feeRecipientSecond - address of the second fee recipient\\n     */\\n    function singlePurchase(\\n        PurchaseDetails memory purchaseDetails,\\n        address feeRecipientFirst,\\n        address feeRecipientSecond\\n    ) public payable whenNotPaused {\\n        (bool success, uint feeAmountFirst, uint feeAmountSecond) = purchase(purchaseDetails, false);\\n        emit Execution(success, _msgSender());\\n\\n        transferFee(feeAmountFirst, feeRecipientFirst);\\n        transferFee(feeAmountSecond, feeRecipientSecond);\\n\\n        transferChange();\\n    }\\n\\n    /**\\n        @notice executes an array of purchases - with swap v2 - tokens for tokens or tokens for eth/weth\\n        @param purchaseDetails - array of details about the purchases (more info in PurchaseDetails struct)\\n        @param feeRecipientFirst - address of the first fee recipient\\n        @param feeRecipientSecond - address of the second fee recipient\\n        @param allowFail - true if fails while executing orders are allowed, false if fail of a single order means fail of the whole batch\\n        @param swapDetails - swapDetails v2\\n     */\\n\\n    function bulkPurchaseWithV2Swap(\\n        PurchaseDetails[] memory purchaseDetails,\\n        address feeRecipientFirst,\\n        address feeRecipientSecond,\\n        bool allowFail,\\n        SwapV2DetailsIn memory swapDetails\\n    ) public payable whenNotPaused {\\n        address tokenOut = swapDetails.path[swapDetails.path.length - 1];\\n        // tokens for eth or weth\\n        if (tokenOut == wrappedToken) {\\n            bool isSwapExecuted = swapV2TokensForExactETHOrWETH(swapDetails, true);\\n            require(isSwapExecuted, \\\"swap not successful\\\");\\n        }\\n        // tokens for tokens\\n        else {\\n            bool isSwapExecuted = swapV2TokensForExactTokens(swapDetails, true);\\n            require(isSwapExecuted, \\\"swap not successful\\\");\\n        }\\n\\n        bulkPurchase(purchaseDetails, feeRecipientFirst, feeRecipientSecond, allowFail);\\n    }\\n\\n    /**\\n        @notice executes an array of purchases - with swap v3\\n        @param purchaseDetails - array of details about the purchases (more info in PurchaseDetails struct)\\n        @param feeRecipientFirst - address of the first fee recipient\\n        @param feeRecipientSecond - address of the second fee recipient\\n        @param allowFail - true if fails while executing orders are allowed, false if fail of a single order means fail of the whole batch\\n        @param swapDetails - swapDetails v3\\n     */\\n\\n    function bulkPurchaseWithSwap(\\n        PurchaseDetails[] memory purchaseDetails,\\n        address feeRecipientFirst,\\n        address feeRecipientSecond,\\n        bool allowFail,\\n        SwapDetailsIn memory swapDetails\\n    ) public payable whenNotPaused {\\n        bool isSwapExecuted = swapTokensForExactTokens(swapDetails, true);\\n        require(isSwapExecuted, \\\"swap not successful\\\");\\n        bulkPurchase(purchaseDetails, feeRecipientFirst, feeRecipientSecond, allowFail);\\n    }\\n\\n    /**\\n        @notice executes an array of purchases\\n        @param purchaseDetails - array of details about the purchases (more info in PurchaseDetails struct)\\n        @param feeRecipientFirst - address of the first fee recipient\\n        @param feeRecipientSecond - address of the second fee recipient\\n        @param allowFail - true if fails while executing orders are allowed, false if fail of a single order means fail of the whole batch\\n     */\\n\\n    function bulkPurchase(\\n        PurchaseDetails[] memory purchaseDetails,\\n        address feeRecipientFirst,\\n        address feeRecipientSecond,\\n        bool allowFail\\n    ) public payable whenNotPaused {\\n        uint sumFirstFees = 0;\\n        uint sumSecondFees = 0;\\n        bool result = false;\\n\\n        uint length = purchaseDetails.length;\\n        for (uint i; i < length; ++i) {\\n            (bool success, uint firstFeeAmount, uint secondFeeAmount) = purchase(purchaseDetails[i], allowFail);\\n\\n            result = result || success;\\n            emit Execution(success, _msgSender());\\n\\n            sumFirstFees = sumFirstFees + (firstFeeAmount);\\n            sumSecondFees = sumSecondFees + (secondFeeAmount);\\n        }\\n\\n        require(result, \\\"no successful executions\\\");\\n\\n        transferFee(sumFirstFees, feeRecipientFirst);\\n        transferFee(sumSecondFees, feeRecipientSecond);\\n\\n        transferChange();\\n    }\\n\\n    /**\\n        @notice executes one purchase\\n        @param purchaseDetails - details about the purchase\\n        @param allowFail - true if errors are handled, false if revert on errors\\n        @return result false if execution failed, true if succeded\\n        @return firstFeeAmount amount of the first fee of the purchase, 0 if failed\\n        @return secondFeeAmount amount of the second fee of the purchase, 0 if failed\\n     */\\n    function purchase(PurchaseDetails memory purchaseDetails, bool allowFail) internal returns (bool, uint, uint) {\\n        (bytes memory marketData, uint[] memory additionalRoyalties) = getDataAndAdditionalData(\\n            purchaseDetails.data,\\n            purchaseDetails.fees,\\n            purchaseDetails.marketId\\n        );\\n        uint paymentAmount = purchaseDetails.amount;\\n        if (purchaseDetails.marketId == Markets.SeaPort) {\\n            (bool success, ) = address(seaport).call{value: paymentAmount}(marketData);\\n            if (allowFail) {\\n                if (!success) {\\n                    return (false, 0, 0);\\n                }\\n            } else {\\n                require(success, \\\"Purchase Seaport failed\\\");\\n            }\\n        } else if (purchaseDetails.marketId == Markets.Wyvern) {\\n            (bool success, ) = address(wyvern).call{value: paymentAmount}(marketData);\\n            if (allowFail) {\\n                if (!success) {\\n                    return (false, 0, 0);\\n                }\\n            } else {\\n                require(success, \\\"Purchase Wyvern failed\\\");\\n            }\\n        } else if (purchaseDetails.marketId == Markets.ExchangeV2) {\\n            (bool success, ) = address(exchangeV2).call{value: paymentAmount}(marketData);\\n            if (allowFail) {\\n                if (!success) {\\n                    return (false, 0, 0);\\n                }\\n            } else {\\n                require(success, \\\"Purchase GhostMarket failed\\\");\\n            }\\n        } else if (purchaseDetails.marketId == Markets.Rarible) {\\n            (bool success, ) = address(rarible).call{value: paymentAmount}(marketData);\\n            if (allowFail) {\\n                if (!success) {\\n                    return (false, 0, 0);\\n                }\\n            } else {\\n                require(success, \\\"Purchase Rarible failed\\\");\\n            }\\n        } else if (purchaseDetails.marketId == Markets.X2Y2) {\\n            Ix2y2.RunInput memory input = abi.decode(marketData, (Ix2y2.RunInput));\\n\\n            if (allowFail) {\\n                try Ix2y2(x2y2).run{value: paymentAmount}(input) {} catch {\\n                    return (false, 0, 0);\\n                }\\n            } else {\\n                Ix2y2(x2y2).run{value: paymentAmount}(input);\\n            }\\n\\n            // for every element in input.details[] getting\\n            // order = input.details[i].orderIdx\\n            // and from that order getting item = input.details[i].itemId\\n            uint length = input.details.length;\\n            for (uint i; i < length; ++i) {\\n                uint orderId = input.details[i].orderIdx;\\n                uint itemId = input.details[i].itemIdx;\\n                bytes memory data = input.orders[orderId].items[itemId].data;\\n                {\\n                    if (input.orders[orderId].dataMask.length > 0 && input.details[i].dataReplacement.length > 0) {\\n                        _arrayReplace(data, input.details[i].dataReplacement, input.orders[orderId].dataMask);\\n                    }\\n                }\\n\\n                // 1 = erc-721\\n                if (input.orders[orderId].delegateType == 1) {\\n                    Ix2y2.Pair721[] memory pairs = abi.decode(data, (Ix2y2.Pair721[]));\\n\\n                    for (uint256 j = 0; j < pairs.length; j++) {\\n                        Ix2y2.Pair721 memory p = pairs[j];\\n                        IERC721Upgradeable(address(p.token)).safeTransferFrom(address(this), _msgSender(), p.tokenId);\\n                    }\\n                } else if (input.orders[orderId].delegateType == 2) {\\n                    // 2 = erc-1155\\n                    Ix2y2.Pair1155[] memory pairs = abi.decode(data, (Ix2y2.Pair1155[]));\\n\\n                    for (uint256 j = 0; j < pairs.length; j++) {\\n                        Ix2y2.Pair1155 memory p = pairs[j];\\n                        IERC1155Upgradeable(address(p.token)).safeTransferFrom(\\n                            address(this),\\n                            _msgSender(),\\n                            p.tokenId,\\n                            p.amount,\\n                            \\\"\\\"\\n                        );\\n                    }\\n                } else {\\n                    revert(\\\"unknown delegateType x2y2\\\");\\n                }\\n            }\\n        } else if (purchaseDetails.marketId == Markets.LooksRare) {\\n            (LibLooksRare.TakerOrder memory takerOrder, LibLooksRare.MakerOrder memory makerOrder, bytes4 typeNft) = abi\\n                .decode(marketData, (LibLooksRare.TakerOrder, LibLooksRare.MakerOrder, bytes4));\\n            if (allowFail) {\\n                try\\n                    ILooksRare(looksrare).matchAskWithTakerBidUsingETHAndWETH{value: paymentAmount}(\\n                        takerOrder,\\n                        makerOrder\\n                    )\\n                {} catch {\\n                    return (false, 0, 0);\\n                }\\n            } else {\\n                ILooksRare(looksrare).matchAskWithTakerBidUsingETHAndWETH{value: paymentAmount}(takerOrder, makerOrder);\\n            }\\n            if (typeNft == LibAsset.ERC721_ASSET_CLASS) {\\n                IERC721Upgradeable(makerOrder.collection).safeTransferFrom(\\n                    address(this),\\n                    _msgSender(),\\n                    makerOrder.tokenId\\n                );\\n            } else if (typeNft == LibAsset.ERC1155_ASSET_CLASS) {\\n                IERC1155Upgradeable(makerOrder.collection).safeTransferFrom(\\n                    address(this),\\n                    _msgSender(),\\n                    makerOrder.tokenId,\\n                    makerOrder.amount,\\n                    \\\"\\\"\\n                );\\n            } else {\\n                revert(\\\"Unknown token type\\\");\\n            }\\n        } else if (purchaseDetails.marketId == Markets.SudoSwap) {\\n            (bool success, ) = address(sudoswap).call{value: paymentAmount}(marketData);\\n            if (allowFail) {\\n                if (!success) {\\n                    return (false, 0, 0);\\n                }\\n            } else {\\n                require(success, \\\"Purchase SudoSwap failed\\\");\\n            }\\n        } else if (purchaseDetails.marketId == Markets.Blur) {\\n            (bool success, ) = address(blur).call{value: paymentAmount}(marketData);\\n            if (allowFail) {\\n                if (!success) {\\n                    return (false, 0, 0);\\n                }\\n            } else {\\n                require(success, \\\"Purchase blurio failed\\\");\\n            }\\n        } else {\\n            revert(\\\"Unknown purchase details\\\");\\n        }\\n\\n        //transferring royalties\\n        transferAdditionalRoyalties(additionalRoyalties, purchaseDetails.amount);\\n\\n        (uint firstFeeAmount, uint secondFeeAmount) = getFees(purchaseDetails.fees, purchaseDetails.amount);\\n        return (true, firstFeeAmount, secondFeeAmount);\\n    }\\n\\n    /**\\n        @notice transfers fee to feeRecipient\\n        @param feeAmount - amount to be transfered\\n        @param feeRecipient - address of the recipient\\n     */\\n    function transferFee(uint feeAmount, address feeRecipient) internal {\\n        if (feeAmount > 0 && feeRecipient != address(0)) {\\n            LibTransfer.transferEth(feeRecipient, feeAmount);\\n        }\\n    }\\n\\n    /**\\n        @notice transfers change back to sender\\n     */\\n    function transferChange() internal {\\n        uint ethAmount = address(this).balance;\\n        if (ethAmount > 0) {\\n            address(msg.sender).transferEth(ethAmount);\\n        }\\n    }\\n\\n    /**\\n        @notice parses fees in base points from one uint and calculates real amount of fees\\n        @param fees two fees encoded in one uint, 29 and 30 bytes are used for the first fee, 31 and 32 bytes for second fee\\n        @param amount price of the order\\n        @return firstFeeAmount real amount for the first fee\\n        @return secondFeeAmount real amount for the second fee\\n     */\\n    function getFees(uint fees, uint amount) internal pure returns (uint, uint) {\\n        uint firstFee = uint(uint16(fees >> 16));\\n        uint secondFee = uint(uint16(fees));\\n        return (amount.bp(firstFee), amount.bp(secondFee));\\n    }\\n\\n    /**\\n        @notice parses _data to data for market call and additionalData\\n        @param feesAndDataType 27 and 28 bytes for dataType\\n        @return marketData data for market call\\n        @return additionalRoyalties array uint256, (base point + address)\\n     */\\n    function getDataAndAdditionalData(\\n        bytes memory _data,\\n        uint feesAndDataType,\\n        Markets marketId\\n    ) internal pure returns (bytes memory, uint[] memory) {\\n        AdditionalDataTypes dataType = AdditionalDataTypes(uint16(feesAndDataType >> 32));\\n        uint[] memory additionalRoyalties;\\n\\n        //return no royalties if wrong data type\\n        if (dataType == AdditionalDataTypes.NoAdditionalData) {\\n            return (_data, additionalRoyalties);\\n        }\\n\\n        if (dataType == AdditionalDataTypes.RoyaltiesAdditionalData) {\\n            AdditionalData memory additionalData = abi.decode(_data, (AdditionalData));\\n\\n            //return no royalties if market doesn't support royalties\\n            if (supportsRoyalties(marketId)) {\\n                return (additionalData.data, additionalData.additionalRoyalties);\\n            } else {\\n                return (additionalData.data, additionalRoyalties);\\n            }\\n        }\\n\\n        revert(\\\"unknown additionalDataType\\\");\\n    }\\n\\n    /**\\n        @notice transfer additional royalties\\n        @param _additionalRoyalties array uint256 (base point + royalty recipient address)\\n     */\\n    function transferAdditionalRoyalties(uint[] memory _additionalRoyalties, uint amount) internal {\\n        uint length = _additionalRoyalties.length;\\n        for (uint i; i < length; ++i) {\\n            if (_additionalRoyalties[i] > 0) {\\n                address payable account = payable(address(uint160(_additionalRoyalties[i])));\\n                uint basePoint = uint(_additionalRoyalties[i] >> 160);\\n                uint value = amount.bp(basePoint);\\n                transferFee(value, account);\\n            }\\n        }\\n    }\\n\\n    // modifies `src`\\n    function _arrayReplace(bytes memory src, bytes memory replacement, bytes memory mask) internal view virtual {\\n        require(src.length == replacement.length);\\n        require(src.length == mask.length);\\n\\n        uint256 length = src.length;\\n        for (uint256 i; i < length; ++i) {\\n            if (mask[i] != 0) {\\n                src[i] = replacement[i];\\n            }\\n        }\\n    }\\n\\n    /**\\n        @notice returns true if this contract supports additional royalties for the marketpale\\n        now royalties support only for marketId = sudoswap\\n    */\\n    function supportsRoyalties(Markets marketId) internal pure returns (bool) {\\n        if (marketId == Markets.SudoSwap || marketId == Markets.LooksRare) {\\n            return true;\\n        }\\n\\n        return false;\\n    }\\n\\n    /**\\n     * @notice swaps tokens for exact tokens - uniswap v2\\n     * @param swapDetails swapDetails required\\n     * @param combined combined swap + buy - if true funds are not sent back to sender buy kept for trade\\n     */\\n    function swapV2TokensForExactTokens(SwapV2DetailsIn memory swapDetails, bool combined) public returns (bool) {\\n        // extract tokenIn from path\\n        address tokenIn = swapDetails.path[0];\\n\\n        // Move tokenIn to contract\\n        IERC20TransferProxy(erc20TransferProxy).erc20safeTransferFrom(\\n            IERC20Upgradeable(tokenIn),\\n            _msgSender(),\\n            address(this),\\n            swapDetails.amountInMaximum\\n        );\\n\\n        // Approve tokenIn on uniswap\\n        uint256 allowance = IERC20Upgradeable(tokenIn).allowance(address(uniswapRouterV2), address(this));\\n        if (allowance < swapDetails.amountInMaximum) {\\n            IERC20Upgradeable(tokenIn).approve(address(uniswapRouterV2), type(uint256).max);\\n        }\\n\\n        // Swap\\n        uint256 chainId = block.chainid;\\n        bool isAvalanche = chainId == 43114 || chainId == 43113;\\n        uint256 amountIn;\\n\\n        if (isAvalanche) {\\n            try\\n                uniswapRouterV2.swapTokensForExactTokens(\\n                    swapDetails.amountOut, // amountOut\\n                    swapDetails.amountInMaximum, // amountInMaximum\\n                    swapDetails.binSteps, // binSteps\\n                    swapDetails.path, // path\\n                    address(this), // recipient\\n                    block.timestamp // deadline\\n                )\\n            returns (uint[] memory amounts) {\\n                amountIn = amounts[0];\\n            } catch {\\n                return false;\\n            }\\n        } else {\\n            try\\n                uniswapRouterV2.swapTokensForExactTokens(\\n                    swapDetails.amountOut, // amountOut\\n                    swapDetails.amountInMaximum, // amountInMaximum\\n                    swapDetails.path, // path\\n                    address(this), // recipient\\n                    block.timestamp // deadline\\n                )\\n            returns (uint[] memory amounts) {\\n                amountIn = amounts[0];\\n            } catch {\\n                return false;\\n            }\\n        }\\n\\n        // Refund tokenIn left if any\\n        if (amountIn < swapDetails.amountInMaximum) {\\n            IERC20Upgradeable(tokenIn).transfer(_msgSender(), swapDetails.amountInMaximum - amountIn);\\n        }\\n\\n        if (!combined) {\\n            address tokenOut = swapDetails.path[swapDetails.path.length - 1];\\n            IERC20Upgradeable(tokenOut).transfer(_msgSender(), swapDetails.amountOut);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice swaps exact tokens for tokens - uniswap v2\\n     * @param swapDetails swapDetails required\\n     */\\n    function swapV2ExactTokensForTokens(SwapV2DetailsOut memory swapDetails) public returns (bool) {\\n        // extract tokenIn / tokenOut from path\\n        address tokenIn = swapDetails.path[0];\\n        address tokenOut = swapDetails.path[swapDetails.path.length - 1];\\n\\n        // Move tokenIn to contract\\n        IERC20TransferProxy(erc20TransferProxy).erc20safeTransferFrom(\\n            IERC20Upgradeable(tokenIn),\\n            _msgSender(),\\n            address(this),\\n            swapDetails.amountIn\\n        );\\n\\n        // Approve tokenIn on uniswap\\n        uint256 allowance = IERC20Upgradeable(tokenIn).allowance(address(uniswapRouterV2), address(this));\\n        if (allowance < swapDetails.amountIn) {\\n            IERC20Upgradeable(tokenIn).approve(address(uniswapRouterV2), type(uint256).max);\\n        }\\n\\n        // Swap\\n        uint256 chainId = block.chainid;\\n        bool isAvalanche = chainId == 43114 || chainId == 43113;\\n        uint256 amountOut;\\n\\n        if (isAvalanche) {\\n            try\\n                uniswapRouterV2.swapTokensForExactTokens(\\n                    swapDetails.amountIn, // amountIn\\n                    swapDetails.amountOutMinimum, // amountOutMinimum\\n                    swapDetails.binSteps, // binSteps\\n                    swapDetails.path, // path\\n                    address(this), // recipient\\n                    block.timestamp // deadline\\n                )\\n            returns (uint[] memory amounts) {\\n                amountOut = amounts[0];\\n            } catch {\\n                return false;\\n            }\\n        } else {\\n            try\\n                uniswapRouterV2.swapTokensForExactTokens(\\n                    swapDetails.amountIn, // amountIn\\n                    swapDetails.amountOutMinimum, // amountOutMinimum\\n                    swapDetails.path, // path\\n                    address(this), // recipient\\n                    block.timestamp // deadline\\n                )\\n            returns (uint[] memory amounts) {\\n                amountOut = amounts[0];\\n            } catch {\\n                return false;\\n            }\\n        }\\n\\n        // send token out back\\n        IERC20Upgradeable(tokenOut).transfer(_msgSender(), amountOut);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice swaps tokens for exact ETH or WETH - uniswap v2\\n     * @param swapDetails swapDetails required\\n     * @param combined combined swap + buy - if true funds are not sent back to sender buy kept for trade\\n     */\\n    function swapV2TokensForExactETHOrWETH(SwapV2DetailsIn memory swapDetails, bool combined) public returns (bool) {\\n        // extract tokenIn from path\\n        address tokenIn = swapDetails.path[0];\\n\\n        // Move tokenIn to contract\\n        IERC20TransferProxy(erc20TransferProxy).erc20safeTransferFrom(\\n            IERC20Upgradeable(tokenIn),\\n            _msgSender(),\\n            address(this),\\n            swapDetails.amountInMaximum\\n        );\\n\\n        // if source = wrapped and destination = native, unwrap and return\\n        if (tokenIn == wrappedToken && swapDetails.unwrap) {\\n            IWETH(wrappedToken).withdraw(swapDetails.amountInMaximum);\\n            if (!combined) {\\n                address(_msgSender()).transferEth(swapDetails.amountInMaximum);\\n            }\\n            return true;\\n        }\\n\\n        // Approve tokenIn on uniswap\\n        uint256 allowance = IERC20Upgradeable(tokenIn).allowance(address(uniswapRouterV2), address(this));\\n        if (allowance < swapDetails.amountInMaximum) {\\n            IERC20Upgradeable(tokenIn).approve(address(uniswapRouterV2), type(uint256).max);\\n        }\\n\\n        // Swap\\n        uint256 chainId = block.chainid;\\n        bool isAvalanche = chainId == 43114 || chainId == 43113;\\n        uint256 amountIn;\\n        if (isAvalanche) {\\n            try\\n                uniswapRouterV2.swapTokensForExactAVAX(\\n                    swapDetails.amountOut, // amountOut\\n                    swapDetails.amountInMaximum, // amountInMaximum\\n                    swapDetails.binSteps, // binSteps\\n                    swapDetails.path, // path\\n                    address(this), // recipient\\n                    block.timestamp // deadline\\n                )\\n            returns (uint[] memory amounts) {\\n                amountIn = amounts[0];\\n            } catch {\\n                return false;\\n            }\\n        } else {\\n            try\\n                uniswapRouterV2.swapTokensForExactETH(\\n                    swapDetails.amountOut, // amountOut\\n                    swapDetails.amountInMaximum, // amountInMaximum\\n                    swapDetails.path, // path\\n                    address(this), // recipient\\n                    block.timestamp // deadline\\n                )\\n            returns (uint[] memory amounts) {\\n                amountIn = amounts[0];\\n            } catch {\\n                return false;\\n            }\\n        }\\n\\n        // Refund tokenIn left if any\\n        if (amountIn < swapDetails.amountInMaximum) {\\n            IERC20Upgradeable(tokenIn).transfer(_msgSender(), swapDetails.amountInMaximum - amountIn);\\n        }\\n\\n        // Wrap if required\\n        if (swapDetails.unwrap) {\\n            IWETH(wrappedToken).deposit{value: swapDetails.amountOut}();\\n        }\\n\\n        if (!combined) {\\n            if (swapDetails.unwrap) {\\n                address tokenOut = swapDetails.path[swapDetails.path.length - 1];\\n                IERC20Upgradeable(tokenOut).transfer(_msgSender(), swapDetails.amountOut);\\n            } else {\\n                address(_msgSender()).transferEth(swapDetails.amountOut);\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice swaps exact ETH or WETH for tokens - uniswap v2\\n     * @param swapDetails swapDetails required\\n     */\\n    function swapV2ExactETHOrWETHForTokens(SwapV2DetailsOut memory swapDetails) public payable returns (bool) {\\n        // extract tokenIn / tokenOut from path\\n        address tokenIn = swapDetails.path[0];\\n        address tokenOut = swapDetails.path[swapDetails.path.length - 1];\\n\\n        // Move tokenIn to contract if ERC20\\n        if (msg.value == 0) {\\n            IERC20TransferProxy(erc20TransferProxy).erc20safeTransferFrom(\\n                IERC20Upgradeable(tokenIn),\\n                _msgSender(),\\n                address(this),\\n                swapDetails.amountIn\\n            );\\n\\n            IWETH(wrappedToken).withdraw(swapDetails.amountIn);\\n        }\\n\\n        // if source = native and destination = wrapped, wrap and return\\n        if (msg.value > 0 && tokenOut == wrappedToken) {\\n            IWETH(wrappedToken).deposit{value: msg.value}();\\n            IERC20Upgradeable(tokenOut).transfer(_msgSender(), swapDetails.amountIn);\\n            return true;\\n        }\\n\\n        // Swap\\n        uint256 chainId = block.chainid;\\n        bool isAvalanche = chainId == 43114 || chainId == 43113;\\n        uint256 amountOut;\\n        if (isAvalanche) {\\n            try\\n                uniswapRouterV2.swapExactAVAXForTokens(\\n                    swapDetails.amountOutMinimum, // amountOutMinimum\\n                    swapDetails.binSteps, // binSteps\\n                    swapDetails.path, // path\\n                    address(this), // recipient\\n                    block.timestamp // deadline\\n                )\\n            returns (uint[] memory amounts) {\\n                amountOut = amounts[0];\\n            } catch {\\n                return false;\\n            }\\n        } else {\\n            try\\n                uniswapRouterV2.swapExactETHForTokens(\\n                    swapDetails.amountOutMinimum, // amountOutMinimum\\n                    swapDetails.path, // path\\n                    address(this), // recipient\\n                    block.timestamp // deadline\\n                )\\n            returns (uint[] memory amounts) {\\n                amountOut = amounts[0];\\n            } catch {\\n                return false;\\n            }\\n        }\\n\\n        // send token out back\\n        IERC20Upgradeable(tokenOut).transfer(_msgSender(), amountOut);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice swaps tokens for exact tokens - uniswap v3\\n     * @param swapDetails swapDetails required\\n     * @param combined combined swap + buy - if true funds are not sent back to sender buy kept for trade\\n     */\\n    function swapTokensForExactTokens(SwapDetailsIn memory swapDetails, bool combined) public payable returns (bool) {\\n        // extract tokenIn / tokenOut from path\\n        address tokenIn;\\n        address tokenOut;\\n        bytes memory _path = swapDetails.path;\\n        uint _start = _path.length - 20;\\n        assembly {\\n            tokenIn := div(mload(add(add(_path, 0x20), _start)), 0x1000000000000000000000000)\\n            tokenOut := div(mload(add(add(_path, 0x20), 0)), 0x1000000000000000000000000)\\n        }\\n\\n        // Move tokenIn to contract if ERC20\\n        if (msg.value == 0) {\\n            IERC20TransferProxy(erc20TransferProxy).erc20safeTransferFrom(\\n                IERC20Upgradeable(tokenIn),\\n                _msgSender(),\\n                address(this),\\n                swapDetails.amountInMaximum\\n            );\\n        }\\n\\n        // if source = wrapped and destination = native, unwrap and return\\n        if (tokenIn == wrappedToken && swapDetails.unwrap) {\\n            IWETH(wrappedToken).withdraw(swapDetails.amountOut);\\n            if (!combined) {\\n                address(_msgSender()).transferEth(swapDetails.amountOut);\\n            }\\n            return true;\\n        }\\n\\n        // if source = native and destination = wrapped, wrap and return\\n        if (msg.value > 0 && tokenOut == wrappedToken) {\\n            IWETH(wrappedToken).deposit{value: msg.value}();\\n            if (!combined) {\\n                IERC20Upgradeable(tokenOut).transfer(_msgSender(), swapDetails.amountOut);\\n            }\\n            return true;\\n        }\\n\\n        // Approve tokenIn on uniswap\\n        uint256 allowance = IERC20Upgradeable(tokenIn).allowance(address(uniswapRouterV3), address(this));\\n        if (allowance < swapDetails.amountInMaximum) {\\n            IERC20Upgradeable(tokenIn).approve(address(uniswapRouterV3), type(uint256).max);\\n        }\\n\\n        // Set the order parameters\\n        ISwapRouterV3.ExactOutputParams memory params = ISwapRouterV3.ExactOutputParams(\\n            swapDetails.path, // path\\n            address(this), // recipient\\n            block.timestamp, // deadline\\n            swapDetails.amountOut, // amountOut\\n            swapDetails.amountInMaximum // amountInMaximum\\n        );\\n\\n        // Swap\\n        uint256 amountIn;\\n        try uniswapRouterV3.exactOutput(params) returns (uint256 amount) {\\n            amountIn = amount;\\n        } catch {\\n            return false;\\n        }\\n\\n        // Refund ETH from swap if any\\n        uniswapRouterV3.refundETH();\\n\\n        // Unwrap if required\\n        if (swapDetails.unwrap) {\\n            IWETH(wrappedToken).withdraw(swapDetails.amountOut);\\n        }\\n\\n        // Refund tokenIn left if any\\n        if (amountIn < swapDetails.amountInMaximum) {\\n            IERC20Upgradeable(tokenIn).transfer(_msgSender(), swapDetails.amountInMaximum - amountIn);\\n        }\\n\\n        if (!combined) {\\n            if (swapDetails.unwrap) {\\n                address(_msgSender()).transferEth(swapDetails.amountOut);\\n            } else {\\n                IERC20Upgradeable(tokenOut).transfer(_msgSender(), swapDetails.amountOut);\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice swaps exact tokens for tokens - uniswap v3\\n     * @param swapDetails swapDetails required\\n     */\\n    function swapExactTokensForTokens(SwapDetailsOut memory swapDetails) public payable returns (bool) {\\n        // extract tokenIn / tokenOut from path\\n        address tokenIn;\\n        address tokenOut;\\n        bytes memory _path = swapDetails.path;\\n        uint _start = _path.length - 20;\\n        assembly {\\n            tokenIn := div(mload(add(add(_path, 0x20), _start)), 0x1000000000000000000000000)\\n            tokenOut := div(mload(add(add(_path, 0x20), 0)), 0x1000000000000000000000000)\\n        }\\n\\n        // Move tokenIn to contract if ERC20\\n        if (msg.value == 0) {\\n            IERC20TransferProxy(erc20TransferProxy).erc20safeTransferFrom(\\n                IERC20Upgradeable(tokenIn),\\n                _msgSender(),\\n                address(this),\\n                swapDetails.amountIn\\n            );\\n        }\\n\\n        // if source = wrapped and destination = native, unwrap and return\\n        if (tokenIn == wrappedToken && swapDetails.unwrap) {\\n            IWETH(wrappedToken).withdraw(swapDetails.amountIn);\\n            address(_msgSender()).transferEth(swapDetails.amountIn);\\n            return true;\\n        }\\n\\n        // if source = native and destination = wrapped, wrap and return\\n        if (msg.value > 0 && tokenOut == wrappedToken) {\\n            IWETH(wrappedToken).deposit{value: msg.value}();\\n            IERC20Upgradeable(tokenOut).transfer(_msgSender(), swapDetails.amountIn);\\n            return true;\\n        }\\n\\n        // Approve tokenIn on uniswap\\n        uint256 allowance = IERC20Upgradeable(tokenIn).allowance(address(uniswapRouterV3), address(this));\\n        if (allowance < swapDetails.amountIn) {\\n            IERC20Upgradeable(tokenIn).approve(address(uniswapRouterV3), type(uint256).max);\\n        }\\n\\n        // Set the order parameters\\n        ISwapRouterV3.ExactInputParams memory params = ISwapRouterV3.ExactInputParams(\\n            swapDetails.path, // path\\n            address(this), // recipient\\n            block.timestamp, // deadline\\n            swapDetails.amountIn, // amountIn\\n            swapDetails.amountOutMinimum // amountOutMinimum\\n        );\\n\\n        // Swap\\n        uint256 amountOut;\\n        try uniswapRouterV3.exactInput(params) returns (uint256 amount) {\\n            amountOut = amount;\\n        } catch {\\n            return false;\\n        }\\n\\n        // Refund ETH from swap if any\\n        uniswapRouterV3.refundETH();\\n\\n        // Unwrap if required\\n        if (swapDetails.unwrap) {\\n            IWETH(wrappedToken).withdraw(amountOut);\\n        }\\n\\n        // send token out back\\n        if (swapDetails.unwrap) {\\n            address(_msgSender()).transferEth(amountOut);\\n        } else {\\n            IERC20Upgradeable(tokenOut).transfer(_msgSender(), amountOut);\\n        }\\n\\n        return true;\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0xcc9648888a172d879d3ab51e88e01855d7490c266ec808cf2b4a82695109cc41\",\"license\":\"MIT\"},\"src/exchange-wrapper/interfaces/IBlurExchange.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport {Input, Order} from \\\"../librairies/OrderStructs.sol\\\";\\n\\ninterface IBlurExchange {\\n    function nonces(address) external view returns (uint256);\\n\\n    function cancelOrder(Order calldata order) external;\\n\\n    function cancelOrders(Order[] calldata orders) external;\\n\\n    function incrementNonce() external;\\n\\n    function execute(Input calldata sell, Input calldata buy) external payable;\\n}\\n\",\"keccak256\":\"0xc6858d178b7f7dc5405a42d4121500cb9de0ca22781ba6f02362d1244b72fad3\",\"license\":\"MIT\"},\"src/exchange-wrapper/interfaces/IExchangeV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../librairies/LibOrder.sol\\\";\\nimport \\\"../../librairies/LibDirectTransfer.sol\\\";\\n\\ninterface IExchangeV2 {\\n    function matchOrders(\\n        LibOrder.Order memory orderLeft,\\n        bytes memory signatureLeft,\\n        LibOrder.Order memory orderRight,\\n        bytes memory signatureRight\\n    ) external payable;\\n\\n    function directPurchase(LibDirectTransfer.Purchase calldata direct) external payable;\\n}\\n\",\"keccak256\":\"0xf4eed7681b4dd3457dd85dbae86772ab4fc98153dd6e304685dd87ca62ddd788\",\"license\":\"MIT\"},\"src/exchange-wrapper/interfaces/ILooksRare.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../librairies/LibLooksRare.sol\\\";\\n\\ninterface ILooksRare {\\n    function matchAskWithTakerBidUsingETHAndWETH(\\n        LibLooksRare.TakerOrder calldata takerBid,\\n        LibLooksRare.MakerOrder calldata makerAsk\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x9e50703072fcc59668f236dcab4407773ff4bdd077f878a92b394ad375b4dd2f\",\"license\":\"MIT\"},\"src/exchange-wrapper/interfaces/ISeaPort.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../librairies/LibSeaPort.sol\\\";\\n\\ninterface ISeaPort {\\n    function fulfillAdvancedOrder(\\n        LibSeaPort.AdvancedOrder calldata advancedOrder,\\n        LibSeaPort.CriteriaResolver[] calldata criteriaResolvers,\\n        bytes32 fulfillerConduitKey,\\n        address recipient\\n    ) external payable returns (bool fulfilled);\\n\\n    function fulfillAvailableAdvancedOrders(\\n        LibSeaPort.AdvancedOrder[] memory advancedOrders,\\n        LibSeaPort.CriteriaResolver[] calldata criteriaResolvers,\\n        LibSeaPort.FulfillmentComponent[][] calldata offerFulfillments,\\n        LibSeaPort.FulfillmentComponent[][] calldata considerationFulfillments,\\n        bytes32 fulfillerConduitKey,\\n        address recipient,\\n        uint256 maximumFulfilled\\n    ) external payable returns (bool[] memory availableOrders, LibSeaPort.Execution[] memory executions);\\n\\n    function fulfillBasicOrder(\\n        LibSeaPort.BasicOrderParameters calldata parameters\\n    ) external payable returns (bool fulfilled);\\n}\\n\",\"keccak256\":\"0x630b82f01b62b6bcdcb986898173fdad081c92c2cde794fce6c16aa346b8170a\",\"license\":\"MIT\"},\"src/exchange-wrapper/interfaces/ISwapRouterV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V2\\ninterface ISwapRouterV2 {\\n    // regular\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMinimum,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMaximum,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint amountOutMinimum,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint[] memory amounts);\\n\\n    function swapTokensForExactETH(\\n        uint amountOut,\\n        uint amountInMaximum,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint amountIn,\\n        uint amountOutMinimum,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function swapETHForExactTokens(\\n        uint amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint[] memory amounts);\\n\\n    // avalanche\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMinimum,\\n        uint[] calldata binSteps,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMaximum,\\n        uint[] calldata binSteps,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function swapExactAVAXForTokens(\\n        uint amountOutMinimum,\\n        uint[] calldata binSteps,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint[] memory amounts);\\n\\n    function swapTokensForExactAVAX(\\n        uint amountOut,\\n        uint amountInMaximum,\\n        uint[] calldata binSteps,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function swapExactTokensForAVAX(\\n        uint amountIn,\\n        uint amountOutMinimum,\\n        uint[] calldata binSteps,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function swapAVAXForExactTokens(\\n        uint amountOut,\\n        uint[] calldata binSteps,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0xf2f12a121dbd301b4da90d78d15ef2d2ec946d7e969f80ff799d276f72f5552b\",\"license\":\"MIT\"},\"src/exchange-wrapper/interfaces/ISwapRouterV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IUniswapV3SwapCallback.sol\\\";\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouterV3 is IUniswapV3SwapCallback {\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n\\n    function refundETH() external payable;\\n}\\n\",\"keccak256\":\"0xa17dd22883339d768b4e61aa5fb1f5eef43711350c166854ac72c63aa8db40f1\",\"license\":\"MIT\"},\"src/exchange-wrapper/interfaces/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(int256 amount0Delta, int256 amount1Delta, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x17d2c73932caae1344981336a10736ba15af274c4e224bf7ebe95a02eba5ac51\",\"license\":\"MIT\"},\"src/exchange-wrapper/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0x8696c755e73523ec30014bbc75ccdcc5d90c6b688d73dea0df2d2666c5e47484\",\"license\":\"MIT\"},\"src/exchange-wrapper/interfaces/IWyvernExchange.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IWyvernExchange {\\n    function atomicMatch_(\\n        address[14] memory addrs,\\n        uint[18] memory uints,\\n        uint8[8] memory feeMethodsSidesKindsHowToCalls,\\n        bytes memory calldataBuy,\\n        bytes memory calldataSell,\\n        bytes memory replacementPatternBuy,\\n        bytes memory replacementPatternSell,\\n        bytes memory staticExtradataBuy,\\n        bytes memory staticExtradataSell,\\n        uint8[2] memory vs,\\n        bytes32[5] memory rssMetadata\\n    ) external payable;\\n\\n    enum Side {\\n        Buy,\\n        Sell\\n    }\\n\\n    enum SaleKind {\\n        FixedPrice,\\n        DutchAuction\\n    }\\n\\n    function calculateFinalPrice(\\n        Side side,\\n        SaleKind saleKind,\\n        uint256 basePrice,\\n        uint256 extra,\\n        uint256 listingTime,\\n        uint256 expirationTime\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x73aa407de98807ddf973a048ae71ae39d9b37d4c1a4ab19fa4940c8cc3551cc0\",\"license\":\"MIT\"},\"src/exchange-wrapper/interfaces/Ix2y2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface Ix2y2 {\\n    struct OrderItem {\\n        uint256 price;\\n        bytes data;\\n    }\\n\\n    struct Pair721 {\\n        address token;\\n        uint256 tokenId;\\n    }\\n\\n    struct Pair1155 {\\n        address token;\\n        uint256 tokenId;\\n        uint256 amount;\\n    }\\n\\n    struct Order {\\n        uint256 salt;\\n        address user;\\n        uint256 network;\\n        uint256 intent;\\n        uint256 delegateType;\\n        uint256 deadline;\\n        address currency;\\n        bytes dataMask;\\n        OrderItem[] items;\\n        // signature\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n        uint8 signVersion;\\n    }\\n\\n    struct Fee {\\n        uint256 percentage;\\n        address to;\\n    }\\n\\n    struct SettleDetail {\\n        Op op;\\n        uint256 orderIdx;\\n        uint256 itemIdx;\\n        uint256 price;\\n        bytes32 itemHash;\\n        address executionDelegate;\\n        bytes dataReplacement;\\n        uint256 bidIncentivePct;\\n        uint256 aucMinIncrementPct;\\n        uint256 aucIncDurationSecs;\\n        Fee[] fees;\\n    }\\n\\n    struct SettleShared {\\n        uint256 salt;\\n        uint256 deadline;\\n        uint256 amountToEth;\\n        uint256 amountToWeth;\\n        address user;\\n        bool canFail;\\n    }\\n\\n    struct RunInput {\\n        Order[] orders;\\n        SettleDetail[] details;\\n        SettleShared shared;\\n        // signature\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n    }\\n\\n    enum Op {\\n        INVALID,\\n        // off-chain\\n        COMPLETE_SELL_OFFER,\\n        COMPLETE_BUY_OFFER,\\n        CANCEL_OFFER,\\n        // auction\\n        BID,\\n        COMPLETE_AUCTION,\\n        REFUND_AUCTION,\\n        REFUND_AUCTION_STUCK_ITEM\\n    }\\n\\n    function run(RunInput memory input) external payable;\\n}\\n\",\"keccak256\":\"0xc96a3556fb1ee0b06eacc31618dd68667b63bdfb0d4c57ac8cf040b6d79b6010\",\"license\":\"MIT\"},\"src/exchange-wrapper/librairies/LibLooksRare.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nlibrary LibLooksRare {\\n    struct MakerOrder {\\n        bool isOrderAsk; // true --> ask / false --> bid\\n        address signer; // signer of the maker order\\n        address collection; // collection address\\n        uint256 price; // price (used as )\\n        uint256 tokenId; // id of the token\\n        uint256 amount; // amount of tokens to sell/purchase (must be 1 for ERC721, 1+ for ERC1155)\\n        address strategy; // strategy for trade execution (e.g., DutchAuction, StandardSaleForFixedPrice)\\n        address currency; // currency (e.g., WETH)\\n        uint256 nonce; // order nonce (must be unique unless new maker order is meant to override existing one e.g., lower ask price)\\n        uint256 startTime; // startTime in timestamp\\n        uint256 endTime; // endTime in timestamp\\n        uint256 minPercentageToAsk; // slippage protection (9000 --> 90% of the final price must return to ask)\\n        bytes params; // additional parameters\\n        uint8 v; // v: parameter (27 or 28)\\n        bytes32 r; // r: parameter\\n        bytes32 s; // s: parameter\\n    }\\n\\n    struct TakerOrder {\\n        bool isOrderAsk; // true --> ask / false --> bid\\n        address taker; // msg.sender\\n        uint256 price; // final price for the purchase\\n        uint256 tokenId;\\n        uint256 minPercentageToAsk; // // slippage protection (9000 --> 90% of the final price must return to ask)\\n        bytes params; // other params (e.g., tokenId)\\n    }\\n}\\n\",\"keccak256\":\"0x81cd487dbce83f2b49ae5589c88eac890525e85909838bcf3949fd69b90945e5\",\"license\":\"MIT\"},\"src/exchange-wrapper/librairies/LibSeaPort.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nlibrary LibSeaPort {\\n    /**\\n     * @dev For basic orders involving ETH / native / ERC20 <=> ERC721 / ERC1155\\n     *      matching, a group of six functions may be called that only requires a\\n     *      subset of the usual order arguments. Note the use of a \\\"basicOrderType\\\"\\n     *      enum; this represents both the usual order type as well as the \\\"route\\\"\\n     *      of the basic order (a simple derivation function for the basic order\\n     *      type is `basicOrderType = orderType + (4 * basicOrderRoute)`.)\\n     */\\n    struct BasicOrderParameters {\\n        address considerationToken; // 0x24\\n        uint256 considerationIdentifier; // 0x44\\n        uint256 considerationAmount; // 0x64\\n        address payable offerer; // 0x84\\n        address zone; // 0xa4\\n        address offerToken; // 0xc4\\n        uint256 offerIdentifier; // 0xe4\\n        uint256 offerAmount; // 0x104\\n        BasicOrderType basicOrderType; // 0x124\\n        uint256 startTime; // 0x144\\n        uint256 endTime; // 0x164\\n        bytes32 zoneHash; // 0x184\\n        uint256 salt; // 0x1a4\\n        bytes32 offererConduitKey; // 0x1c4\\n        bytes32 fulfillerConduitKey; // 0x1e4\\n        uint256 totalOriginalAdditionalRecipients; // 0x204\\n        AdditionalRecipient[] additionalRecipients; // 0x224\\n        bytes signature; // 0x244\\n    }\\n    /**\\n     * @dev Basic orders can supply any number of additional recipients, with the\\n     *      implied assumption that they are supplied from the offered ETH (or other\\n     *      native token) or ERC20 token for the order.\\n     */\\n    struct AdditionalRecipient {\\n        uint256 amount;\\n        address payable recipient;\\n    }\\n\\n    // prettier-ignore\\n    enum BasicOrderType {\\n        // 0: no partial fills, anyone can execute\\n        ETH_TO_ERC721_FULL_OPEN,\\n\\n        // 1: partial fills supported, anyone can execute\\n        ETH_TO_ERC721_PARTIAL_OPEN,\\n\\n        // 2: no partial fills, only offerer or zone can execute\\n        ETH_TO_ERC721_FULL_RESTRICTED,\\n\\n        // 3: partial fills supported, only offerer or zone can execute\\n        ETH_TO_ERC721_PARTIAL_RESTRICTED,\\n\\n        // 4: no partial fills, anyone can execute\\n        ETH_TO_ERC1155_FULL_OPEN,\\n\\n        // 5: partial fills supported, anyone can execute\\n        ETH_TO_ERC1155_PARTIAL_OPEN,\\n\\n        // 6: no partial fills, only offerer or zone can execute\\n        ETH_TO_ERC1155_FULL_RESTRICTED,\\n\\n        // 7: partial fills supported, only offerer or zone can execute\\n        ETH_TO_ERC1155_PARTIAL_RESTRICTED,\\n\\n        // 8: no partial fills, anyone can execute\\n        ERC20_TO_ERC721_FULL_OPEN,\\n\\n        // 9: partial fills supported, anyone can execute\\n        ERC20_TO_ERC721_PARTIAL_OPEN,\\n\\n        // 10: no partial fills, only offerer or zone can execute\\n        ERC20_TO_ERC721_FULL_RESTRICTED,\\n\\n        // 11: partial fills supported, only offerer or zone can execute\\n        ERC20_TO_ERC721_PARTIAL_RESTRICTED,\\n\\n        // 12: no partial fills, anyone can execute\\n        ERC20_TO_ERC1155_FULL_OPEN,\\n\\n        // 13: partial fills supported, anyone can execute\\n        ERC20_TO_ERC1155_PARTIAL_OPEN,\\n\\n        // 14: no partial fills, only offerer or zone can execute\\n        ERC20_TO_ERC1155_FULL_RESTRICTED,\\n\\n        // 15: partial fills supported, only offerer or zone can execute\\n        ERC20_TO_ERC1155_PARTIAL_RESTRICTED,\\n\\n        // 16: no partial fills, anyone can execute\\n        ERC721_TO_ERC20_FULL_OPEN,\\n\\n        // 17: partial fills supported, anyone can execute\\n        ERC721_TO_ERC20_PARTIAL_OPEN,\\n\\n        // 18: no partial fills, only offerer or zone can execute\\n        ERC721_TO_ERC20_FULL_RESTRICTED,\\n\\n        // 19: partial fills supported, only offerer or zone can execute\\n        ERC721_TO_ERC20_PARTIAL_RESTRICTED,\\n\\n        // 20: no partial fills, anyone can execute\\n        ERC1155_TO_ERC20_FULL_OPEN,\\n\\n        // 21: partial fills supported, anyone can execute\\n        ERC1155_TO_ERC20_PARTIAL_OPEN,\\n\\n        // 22: no partial fills, only offerer or zone can execute\\n        ERC1155_TO_ERC20_FULL_RESTRICTED,\\n\\n        // 23: partial fills supported, only offerer or zone can execute\\n        ERC1155_TO_ERC20_PARTIAL_RESTRICTED\\n    }\\n\\n    /**\\n     * @dev The full set of order components, with the exception of the counter,\\n     *      must be supplied when fulfilling more sophisticated orders or groups of\\n     *      orders. The total number of original consideration items must also be\\n     *      supplied, as the caller may specify additional consideration items.\\n     */\\n    struct OrderParameters {\\n        address offerer; // 0x00\\n        address zone; // 0x20\\n        OfferItem[] offer; // 0x40\\n        ConsiderationItem[] consideration; // 0x60\\n        OrderType orderType; // 0x80\\n        uint256 startTime; // 0xa0\\n        uint256 endTime; // 0xc0\\n        bytes32 zoneHash; // 0xe0\\n        uint256 salt; // 0x100\\n        bytes32 conduitKey; // 0x120\\n        uint256 totalOriginalConsiderationItems; // 0x140\\n        // offer.length                          // 0x160\\n    }\\n\\n    /**\\n     * @dev Orders require a signature in addition to the other order parameters.\\n     */\\n    struct Order {\\n        OrderParameters parameters;\\n        bytes signature;\\n    }\\n\\n    struct AdvancedOrder {\\n        OrderParameters parameters;\\n        uint120 numerator;\\n        uint120 denominator;\\n        bytes signature;\\n        bytes extraData;\\n    }\\n\\n    struct OfferItem {\\n        ItemType itemType;\\n        address token;\\n        uint256 identifierOrCriteria;\\n        uint256 startAmount;\\n        uint256 endAmount;\\n    }\\n\\n    /**\\n     * @dev A consideration item has the same five components as an offer item and\\n     *      an additional sixth component designating the required recipient of the\\n     *      item.\\n     */\\n    struct ConsiderationItem {\\n        ItemType itemType;\\n        address token;\\n        uint256 identifierOrCriteria;\\n        uint256 startAmount;\\n        uint256 endAmount;\\n        address payable recipient;\\n    }\\n\\n    // prettier-ignore\\n    enum OrderType {\\n        // 0: no partial fills, anyone can execute\\n        FULL_OPEN,\\n\\n        // 1: partial fills supported, anyone can execute\\n        PARTIAL_OPEN,\\n\\n        // 2: no partial fills, only offerer or zone can execute\\n        FULL_RESTRICTED,\\n\\n        // 3: partial fills supported, only offerer or zone can execute\\n        PARTIAL_RESTRICTED\\n    }\\n\\n    // prettier-ignore\\n    enum ItemType {\\n        // 0: ETH on mainnet, MATIC on polygon, etc.\\n        NATIVE,\\n\\n        // 1: ERC20 items (ERC777 and ERC20 analogues could also technically work)\\n        ERC20,\\n\\n        // 2: ERC721 items\\n        ERC721,\\n\\n        // 3: ERC1155 items\\n        ERC1155,\\n\\n        // 4: ERC721 items where a number of tokenIds are supported\\n        ERC721_WITH_CRITERIA,\\n\\n        // 5: ERC1155 items where a number of ids are supported\\n        ERC1155_WITH_CRITERIA\\n    }\\n\\n    /**\\n     * @dev A fulfillment is applied to a group of orders. It decrements a series of\\n     *      offer and consideration items, then generates a single execution\\n     *      element. A given fulfillment can be applied to as many offer and\\n     *      consideration items as desired, but must contain at least one offer and\\n     *      at least one consideration that match. The fulfillment must also remain\\n     *      consistent on all key parameters across all offer items (same offerer,\\n     *      token, type, tokenId, and conduit preference) as well as across all\\n     *      consideration items (token, type, tokenId, and recipient).\\n     */\\n    struct Fulfillment {\\n        FulfillmentComponent[] offerComponents;\\n        FulfillmentComponent[] considerationComponents;\\n    }\\n\\n    /**\\n     * @dev Each fulfillment component contains one index referencing a specific\\n     *      order and another referencing a specific offer or consideration item.\\n     */\\n    struct FulfillmentComponent {\\n        uint256 orderIndex;\\n        uint256 itemIndex;\\n    }\\n\\n    /**\\n     * @dev An execution is triggered once all consideration items have been zeroed\\n     *      out. It sends the item in question from the offerer to the item's\\n     *      recipient, optionally sourcing approvals from either this contract\\n     *      directly or from the offerer's chosen conduit if one is specified. An\\n     *      execution is not provided as an argument, but rather is derived via\\n     *      orders, criteria resolvers, and fulfillments (where the total number of\\n     *      executions will be less than or equal to the total number of indicated\\n     *      fulfillments) and returned as part of `matchOrders`.\\n     */\\n    struct Execution {\\n        ReceivedItem item;\\n        address offerer;\\n        bytes32 conduitKey;\\n    }\\n\\n    /**\\n     * @dev A received item is translated from a utilized consideration item and has\\n     *      the same four components as a spent item, as well as an additional fifth\\n     *      component designating the required recipient of the item.\\n     */\\n    struct ReceivedItem {\\n        ItemType itemType;\\n        address token;\\n        uint256 identifier;\\n        uint256 amount;\\n        address payable recipient;\\n    }\\n\\n    struct CriteriaResolver {\\n        uint256 orderIndex;\\n        Side side;\\n        uint256 index;\\n        uint256 identifier;\\n        bytes32[] criteriaProof;\\n    }\\n\\n    // prettier-ignore\\n    enum Side {\\n        // 0: Items that can be spent\\n        OFFER,\\n\\n        // 1: Items that must be received\\n        CONSIDERATION\\n    }\\n}\\n\",\"keccak256\":\"0x91809d3c08054e053a147bf214e37995ac10a5ef3fa56952ebcc987aafed91b6\",\"license\":\"MIT\"},\"src/exchange-wrapper/librairies/OrderStructs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nenum Side {\\n    Buy,\\n    Sell\\n}\\nenum SignatureVersion {\\n    Single,\\n    Bulk\\n}\\nenum AssetType {\\n    ERC721,\\n    ERC1155\\n}\\n\\nstruct Fee {\\n    uint16 rate;\\n    address payable recipient;\\n}\\n\\nstruct Order {\\n    address trader;\\n    Side side;\\n    address matchingPolicy;\\n    address collection;\\n    uint256 tokenId;\\n    uint256 amount;\\n    address paymentToken;\\n    uint256 price;\\n    uint256 listingTime;\\n    /* Order expiration timestamp - 0 for oracle cancellations. */\\n    uint256 expirationTime;\\n    Fee[] fees;\\n    uint256 salt;\\n    bytes extraParams;\\n}\\n\\nstruct Input {\\n    Order order;\\n    uint8 v;\\n    bytes32 r;\\n    bytes32 s;\\n    bytes extraSignature;\\n    SignatureVersion signatureVersion;\\n    uint256 blockNumber;\\n}\\n\\nstruct Execution {\\n    Input sell;\\n    Input buy;\\n}\\n\",\"keccak256\":\"0x5aca2da8ed70487ea66a23fb9faa50ec79356f367f13bf7db96b9fcf5b35064a\",\"license\":\"MIT\"},\"src/interfaces/IERC20TransferProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\ninterface IERC20TransferProxy {\\n    function erc20safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) external;\\n}\\n\",\"keccak256\":\"0x73d3cb89e7f7626882b328ede811afc71c77835f14fad09c2cb1c8e0fb2ff66a\",\"license\":\"MIT\"},\"src/interfaces/INftTransferProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\\\";\\n\\ninterface INftTransferProxy {\\n    function erc721safeTransferFrom(IERC721Upgradeable token, address from, address to, uint256 tokenId) external;\\n\\n    function erc1155safeTransferFrom(\\n        IERC1155Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x051dbb17a3bd2ef87619192abf8f02c486d175a6bb5b2cbb4aac855ecbe87d80\",\"license\":\"MIT\"},\"src/librairies/BpLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nlibrary BpLibrary {\\n    function bp(uint256 value, uint256 bpValue) internal pure returns (uint256) {\\n        return (value * (bpValue)) / (10000);\\n    }\\n}\\n\",\"keccak256\":\"0x24d598e4d4b0fae9b4202a96bc4082aea9a1bd224f52a6ec7d92a873ef06b010\",\"license\":\"MIT\"},\"src/librairies/LibAsset.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nlibrary LibAsset {\\n    bytes4 public constant ETH_ASSET_CLASS = bytes4(keccak256(\\\"ETH\\\"));\\n    bytes4 public constant ERC20_ASSET_CLASS = bytes4(keccak256(\\\"ERC20\\\"));\\n    bytes4 public constant ERC721_ASSET_CLASS = bytes4(keccak256(\\\"ERC721\\\"));\\n    bytes4 public constant ERC1155_ASSET_CLASS = bytes4(keccak256(\\\"ERC1155\\\"));\\n    bytes4 public constant COLLECTION = bytes4(keccak256(\\\"COLLECTION\\\"));\\n    bytes4 public constant CRYPTO_PUNKS = bytes4(keccak256(\\\"CRYPTO_PUNKS\\\"));\\n\\n    bytes32 public constant ASSET_TYPE_TYPEHASH = keccak256(\\\"AssetType(bytes4 assetClass,bytes data)\\\");\\n\\n    bytes32 public constant ASSET_TYPEHASH =\\n        keccak256(\\\"Asset(AssetType assetType,uint256 value)AssetType(bytes4 assetClass,bytes data)\\\");\\n\\n    struct AssetType {\\n        bytes4 assetClass;\\n        bytes data;\\n    }\\n\\n    struct Asset {\\n        AssetType assetType;\\n        uint256 value;\\n    }\\n\\n    function hash(AssetType memory assetType) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(ASSET_TYPE_TYPEHASH, assetType.assetClass, keccak256(assetType.data)));\\n    }\\n\\n    function hash(Asset memory asset) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(ASSET_TYPEHASH, hash(asset.assetType), asset.value));\\n    }\\n}\\n\",\"keccak256\":\"0x10f962b944a4ffa957d22d70073318bc5376a3666d6e6b858affc8eb258d7d8d\",\"license\":\"MIT\"},\"src/librairies/LibDirectTransfer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./LibAsset.sol\\\";\\n\\nlibrary LibDirectTransfer {\\n    //LibDirectTransfers\\n    /*All buy parameters need for create buyOrder and sellOrder*/\\n    struct Purchase {\\n        address sellOrderMaker; //\\n        uint256 sellOrderNftAmount;\\n        bytes4 nftAssetClass;\\n        bytes nftData;\\n        uint256 sellOrderPaymentAmount;\\n        address paymentToken;\\n        uint256 sellOrderSalt;\\n        uint sellOrderStart;\\n        uint sellOrderEnd;\\n        bytes4 sellOrderDataType;\\n        bytes sellOrderData;\\n        bytes sellOrderSignature;\\n        uint256 buyOrderPaymentAmount;\\n        uint256 buyOrderNftAmount;\\n        bytes buyOrderData;\\n    }\\n\\n    /*All accept bid parameters need for create buyOrder and sellOrder*/\\n    struct AcceptBid {\\n        address bidMaker; //\\n        uint256 bidNftAmount;\\n        bytes4 nftAssetClass;\\n        bytes nftData;\\n        uint256 bidPaymentAmount;\\n        address paymentToken;\\n        uint256 bidSalt;\\n        uint bidStart;\\n        uint bidEnd;\\n        bytes4 bidDataType;\\n        bytes bidData;\\n        bytes bidSignature;\\n        uint256 sellOrderPaymentAmount;\\n        uint256 sellOrderNftAmount;\\n        bytes sellOrderData;\\n    }\\n}\\n\",\"keccak256\":\"0xd4df19802dce7c617ac5c7dbb7c332a3ea300b30e4b43ec101005d66c8a3ebad\",\"license\":\"MIT\"},\"src/librairies/LibMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nlibrary LibMath {\\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\\n    ///      Reverts if rounding error is >= 0.1%\\n    /// @param numerator Numerator.\\n    /// @param denominator Denominator.\\n    /// @param target Value to calculate partial of.\\n    /// @return partialAmount value of target rounded down.\\n    function safeGetPartialAmountFloor(\\n        uint256 numerator,\\n        uint256 denominator,\\n        uint256 target\\n    ) internal pure returns (uint256 partialAmount) {\\n        if (isRoundingErrorFloor(numerator, denominator, target)) {\\n            revert(\\\"rounding error\\\");\\n        }\\n        partialAmount = (numerator * (target)) / (denominator);\\n    }\\n\\n    /// @dev Checks if rounding error >= 0.1% when rounding down.\\n    /// @param numerator Numerator.\\n    /// @param denominator Denominator.\\n    /// @param target Value to multiply with numerator/denominator.\\n    /// @return isError Rounding error is present.\\n    function isRoundingErrorFloor(\\n        uint256 numerator,\\n        uint256 denominator,\\n        uint256 target\\n    ) internal pure returns (bool isError) {\\n        if (denominator == 0) {\\n            revert(\\\"division by zero\\\");\\n        }\\n\\n        // The absolute rounding error is the difference between the rounded\\n        // value and the ideal value. The relative rounding error is the\\n        // absolute rounding error divided by the absolute value of the\\n        // ideal value. This is undefined when the ideal value is zero.\\n        //\\n        // The ideal value is `numerator * target / denominator`.\\n        // Let's call `numerator * target % denominator` the remainder.\\n        // The absolute error is `remainder / denominator`.\\n        //\\n        // When the ideal value is zero, we require the absolute error to\\n        // be zero. Fortunately, this is always the case. The ideal value is\\n        // zero iff `numerator == 0` and/or `target == 0`. In this case the\\n        // remainder and absolute error are also zero.\\n        if (target == 0 || numerator == 0) {\\n            return false;\\n        }\\n\\n        // Otherwise, we want the relative rounding error to be strictly\\n        // less than 0.1%.\\n        // The relative error is `remainder / (numerator * target)`.\\n        // We want the relative error less than 1 / 1000:\\n        //        remainder / (numerator * target)  <  1 / 1000\\n        // or equivalently:\\n        //        1000 * remainder  <  numerator * target\\n        // so we have a rounding error iff:\\n        //        1000 * remainder  >=  numerator * target\\n        uint256 remainder = mulmod(target, numerator, denominator);\\n        isError = remainder * (1000) >= numerator * (target);\\n    }\\n\\n    function safeGetPartialAmountCeil(\\n        uint256 numerator,\\n        uint256 denominator,\\n        uint256 target\\n    ) internal pure returns (uint256 partialAmount) {\\n        if (isRoundingErrorCeil(numerator, denominator, target)) {\\n            revert(\\\"rounding error\\\");\\n        }\\n        partialAmount = (numerator * (target)) + (denominator - (1)) / (denominator);\\n    }\\n\\n    /// @dev Checks if rounding error >= 0.1% when rounding up.\\n    /// @param numerator Numerator.\\n    /// @param denominator Denominator.\\n    /// @param target Value to multiply with numerator/denominator.\\n    /// @return isError Rounding error is present.\\n    function isRoundingErrorCeil(\\n        uint256 numerator,\\n        uint256 denominator,\\n        uint256 target\\n    ) internal pure returns (bool isError) {\\n        if (denominator == 0) {\\n            revert(\\\"division by zero\\\");\\n        }\\n\\n        // See the comments in `isRoundingError`.\\n        if (target == 0 || numerator == 0) {\\n            // When either is zero, the ideal value and rounded value are zero\\n            // and there is no rounding error. (Although the relative error\\n            // is undefined.)\\n            return false;\\n        }\\n        // Compute remainder as before\\n        uint256 remainder = mulmod(target, numerator, denominator);\\n        remainder = denominator - ((remainder) % denominator);\\n        isError = remainder * (1000) >= numerator * (target);\\n        return isError;\\n    }\\n}\\n\",\"keccak256\":\"0x37ff06f06bf5c378e17b7c166e469b66058be11979f0d983e580c06090123b7d\",\"license\":\"MIT\"},\"src/librairies/LibOrder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./LibAsset.sol\\\";\\nimport \\\"./LibMath.sol\\\";\\nimport \\\"./LibOrderDataV3.sol\\\";\\nimport \\\"./LibOrderDataV2.sol\\\";\\nimport \\\"./LibOrderDataV1.sol\\\";\\n\\nlibrary LibOrder {\\n    bytes32 public constant ORDER_TYPEHASH =\\n        keccak256(\\n            \\\"Order(address maker,Asset makeAsset,address taker,Asset takeAsset,uint256 salt,uint256 start,uint256 end,bytes4 dataType,bytes data)Asset(AssetType assetType,uint256 value)AssetType(bytes4 assetClass,bytes data)\\\"\\n        );\\n\\n    bytes4 public constant DEFAULT_ORDER_TYPE = 0xffffffff;\\n\\n    struct Order {\\n        address maker;\\n        LibAsset.Asset makeAsset;\\n        address taker;\\n        LibAsset.Asset takeAsset;\\n        uint salt;\\n        uint start;\\n        uint end;\\n        bytes4 dataType;\\n        bytes data;\\n    }\\n\\n    function calculateRemaining(\\n        Order memory order,\\n        uint fill,\\n        bool isMakeFill\\n    ) internal pure returns (uint makeValue, uint takeValue) {\\n        if (isMakeFill) {\\n            makeValue = order.makeAsset.value - (fill);\\n            takeValue = LibMath.safeGetPartialAmountFloor(order.takeAsset.value, order.makeAsset.value, makeValue);\\n        } else {\\n            takeValue = order.takeAsset.value - (fill);\\n            makeValue = LibMath.safeGetPartialAmountFloor(order.makeAsset.value, order.takeAsset.value, takeValue);\\n        }\\n    }\\n\\n    function hashKey(Order memory order) internal pure returns (bytes32) {\\n        if (order.dataType == LibOrderDataV1.V1 || order.dataType == DEFAULT_ORDER_TYPE) {\\n            return\\n                keccak256(\\n                    abi.encode(\\n                        order.maker,\\n                        LibAsset.hash(order.makeAsset.assetType),\\n                        LibAsset.hash(order.takeAsset.assetType),\\n                        order.salt\\n                    )\\n                );\\n        } else {\\n            //order.data is in hash for V2, V3 and all new order\\n            return\\n                keccak256(\\n                    abi.encode(\\n                        order.maker,\\n                        LibAsset.hash(order.makeAsset.assetType),\\n                        LibAsset.hash(order.takeAsset.assetType),\\n                        order.salt,\\n                        order.data\\n                    )\\n                );\\n        }\\n    }\\n\\n    function hash(Order memory order) internal pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    ORDER_TYPEHASH,\\n                    order.maker,\\n                    LibAsset.hash(order.makeAsset),\\n                    order.taker,\\n                    LibAsset.hash(order.takeAsset),\\n                    order.salt,\\n                    order.start,\\n                    order.end,\\n                    order.dataType,\\n                    keccak256(order.data)\\n                )\\n            );\\n    }\\n\\n    function validateOrderTime(LibOrder.Order memory order) internal view {\\n        require(order.start == 0 || order.start < block.timestamp, \\\"Order start validation failed\\\");\\n        require(order.end == 0 || order.end > block.timestamp, \\\"Order end validation failed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x9d40d06c9001c1f5a4a3b994fdcb3ce6746eae901b575998ea1dc7fca76cbc5c\",\"license\":\"MIT\"},\"src/librairies/LibOrderDataV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./LibPart.sol\\\";\\n\\nlibrary LibOrderDataV1 {\\n    bytes4 public constant V1 = bytes4(keccak256(\\\"V1\\\"));\\n\\n    struct DataV1 {\\n        LibPart.Part[] payouts;\\n        LibPart.Part[] originFees;\\n    }\\n}\\n\",\"keccak256\":\"0x43b6827718725ecbd90b9d9fbd0e96f39221d65197c87a7d0b6afb0d03105fe8\",\"license\":\"MIT\"},\"src/librairies/LibOrderDataV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./LibPart.sol\\\";\\n\\nlibrary LibOrderDataV2 {\\n    bytes4 public constant V2 = bytes4(keccak256(\\\"V2\\\"));\\n\\n    struct DataV2 {\\n        LibPart.Part[] payouts;\\n        LibPart.Part[] originFees;\\n        bool isMakeFill;\\n    }\\n}\\n\",\"keccak256\":\"0x40d057f168ce6ca96e58ecd0418fdf99f8e39af544af59f0260c55bb0d961dac\",\"license\":\"MIT\"},\"src/librairies/LibOrderDataV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./LibPart.sol\\\";\\n\\nlibrary LibOrderDataV3 {\\n    bytes4 public constant V3_SELL = bytes4(keccak256(\\\"V3_SELL\\\"));\\n    bytes4 public constant V3_BUY = bytes4(keccak256(\\\"V3_BUY\\\"));\\n\\n    struct DataV3_SELL {\\n        uint payouts;\\n        uint originFeeFirst;\\n        uint originFeeSecond;\\n        uint maxFeesBasePoint;\\n        bytes32 marketplaceMarker;\\n    }\\n\\n    struct DataV3_BUY {\\n        uint payouts;\\n        uint originFeeFirst;\\n        uint originFeeSecond;\\n        bytes32 marketplaceMarker;\\n    }\\n}\\n\",\"keccak256\":\"0xf931bfd1f243272c5e106e85b66a6fab9527e1258e5633f10b6bc0bb7a83c3e5\",\"license\":\"MIT\"},\"src/librairies/LibPart.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nlibrary LibPart {\\n    bytes32 public constant TYPE_HASH = keccak256(\\\"Part(address account,uint96 value)\\\");\\n\\n    struct Part {\\n        address payable account;\\n        uint96 value;\\n    }\\n\\n    function hash(Part memory part) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(TYPE_HASH, part.account, part.value));\\n    }\\n}\\n\",\"keccak256\":\"0xedbb696dbf7cd7d5325fc114fd5b7531cf1b1676df98cc5a4cf6330b609ef651\",\"license\":\"MIT\"},\"src/librairies/LibTransfer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nlibrary LibTransfer {\\n    function transferEth(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(\\\"\\\");\\n        require(success, \\\"LibTransfer BaseCurrency transfer failed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x1755b75d1a33d9acb9ba3428698657d091681399b949c43e0844bf1dc4847b2c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50615e7180620000216000396000f3fe6080604052600436106102245760003560e01c806387653f801161012e578063c4e55fd3116100ab578063f23a6e611161006f578063f23a6e6114610649578063f2fde38b14610675578063f5c7bd7014610695578063fc40c9c7146106b5578063fee03e9e146106d557600080fd5b8063c4e55fd3146105c3578063c6d0ffd7146105e3578063cd7f4a0f14610603578063d71c4dd014610616578063df6c25581461062957600080fd5b8063a8e90b57116100f2578063a8e90b5714610524578063aa78ae9314610544578063b94ee33214610564578063bc197c8114610577578063c1aa2938146105a357600080fd5b806387653f80146104935780638ae42905146104a65780638da5cb5b146104c6578063996c6cc3146104e4578063a05f32dc1461050457600080fd5b8063596fa9e3116101bc57806373a963d71161018057806373a963d71461040b578063745fdf8e1461042b5780637908716c1461044b5780638456cb591461046b57806386496e7a1461048057600080fd5b8063596fa9e31461037e57806359e868291461039e5780635c975abb146103be5780635ea1e4c9146103d6578063715018a6146103f657600080fd5b806301ffc9a71461023057806308b1571d1461026557806310f91b0b14610287578063150b7a02146102bf5780632bf92a43146103035780632c979b1614610316578063348c4efd146103365780633f4ba83a146103495780634edfc9f91461035e57600080fd5b3661022b57005b600080fd5b34801561023c57600080fd5b5061025061024b366004614020565b6106f5565b60405190151581526020015b60405180910390f35b34801561027157600080fd5b50610285610280366004614052565b61072c565b005b34801561029357600080fd5b5060a0546102a7906001600160a01b031681565b6040516001600160a01b03909116815260200161025c565b3480156102cb57600080fd5b506102ea6102da36600461424b565b630a85bd0160e11b949350505050565b6040516001600160e01b0319909116815260200161025c565b61028561031136600461454a565b610756565b34801561032257600080fd5b506102506103313660046145eb565b610823565b6102856103443660046146aa565b610ce8565b34801561035557600080fd5b50610285610d1c565b34801561036a57600080fd5b506099546102a7906001600160a01b031681565b34801561038a57600080fd5b50609f546102a7906001600160a01b031681565b3480156103aa57600080fd5b506102856103b9366004614052565b610d2e565b3480156103ca57600080fd5b5060655460ff16610250565b3480156103e257600080fd5b50609d546102a7906001600160a01b031681565b34801561040257600080fd5b50610285610d58565b34801561041757600080fd5b50610285610426366004614052565b610d6a565b34801561043757600080fd5b506102506104463660046145eb565b610d94565b34801561045757600080fd5b50610285610466366004614052565b611399565b34801561047757600080fd5b506102856113c3565b61028561048e36600461474b565b6113d3565b6102506104a13660046147ae565b611458565b3480156104b257600080fd5b506102856104c1366004614052565b611a2b565b3480156104d257600080fd5b506033546001600160a01b03166102a7565b3480156104f057600080fd5b5060a1546102a7906001600160a01b031681565b34801561051057600080fd5b506097546102a7906001600160a01b031681565b34801561053057600080fd5b50609c546102a7906001600160a01b031681565b34801561055057600080fd5b5061028561055f3660046147ea565b611a55565b610285610572366004614893565b611bf8565b34801561058357600080fd5b506102ea610592366004614907565b63bc197c8160e01b95945050505050565b3480156105af57600080fd5b506102856105be366004614052565b611d21565b3480156105cf57600080fd5b506102506105de3660046149a7565b611d4b565b3480156105ef57600080fd5b506098546102a7906001600160a01b031681565b6102506106113660046149a7565b612158565b6102506106243660046149db565b6125c6565b34801561063557600080fd5b50609e546102a7906001600160a01b031681565b34801561065557600080fd5b506102ea610664366004614a10565b63f23a6e6160e01b95945050505050565b34801561068157600080fd5b50610285610690366004614052565b612c55565b3480156106a157600080fd5b50609a546102a7906001600160a01b031681565b3480156106c157600080fd5b50609b546102a7906001600160a01b031681565b3480156106e157600080fd5b5060a2546102a7906001600160a01b031681565b60006001600160e01b03198216630271189760e51b148061072657506301ffc9a760e01b6001600160e01b03198316145b92915050565b610734612cce565b609e80546001600160a01b0319166001600160a01b0392909216919091179055565b61075e612d28565b805180516000919061077290600190614a8e565b8151811061078257610782614aa5565b602090810291909101015160a1549091506001600160a01b03808316911614156107e15760006107b3836001610d94565b9050806107db5760405162461bcd60e51b81526004016107d290614abb565b60405180910390fd5b5061080f565b60006107ee836001610823565b90508061080d5760405162461bcd60e51b81526004016107d290614abb565b505b61081b86868686611bf8565b505050505050565b600080836000015160008151811061083d5761083d614aa5565b602090810291909101015160a2549091506001600160a01b031663776062c382333088604001516040518563ffffffff1660e01b81526004016108839493929190614ae8565b600060405180830381600087803b15801561089d57600080fd5b505af11580156108b1573d6000803e3d6000fd5b5050609f54604051636eb1769f60e11b8152600093506001600160a01b03808616935063dd62ed3e926108eb929116903090600401614b12565b60206040518083038186803b15801561090357600080fd5b505afa158015610917573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061093b9190614b2c565b905084604001518110156109d357609f5460405163095ea7b360e01b81526001600160a01b038481169263095ea7b39261097f929091169060001990600401614b45565b602060405180830381600087803b15801561099957600080fd5b505af11580156109ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d19190614b69565b505b46600061a86a8214806109e757508161a869145b905060008115610abc57609f5460208901516040808b015160608c01518c51925163a7b856d360e01b81526001600160a01b039095169463a7b856d394610a38949093929130904290600401614bfa565b600060405180830381600087803b158015610a5257600080fd5b505af1925050508015610a8757506040513d6000823e601f3d908101601f19168201604052610a849190810190614ca5565b60015b610a9957600095505050505050610726565b80600081518110610aac57610aac614aa5565b6020026020010151915050610b7d565b609f5460208901516040808b01518b519151634401edf760e11b81526001600160a01b0390941693638803dbee93610afd9390929130904290600401614cd9565b600060405180830381600087803b158015610b1757600080fd5b505af1925050508015610b4c57506040513d6000823e601f3d908101601f19168201604052610b499190810190614ca5565b60015b610b5e57600095505050505050610726565b80600081518110610b7157610b71614aa5565b60200260200101519150505b8760400151811015610c1a576001600160a01b03851663a9059cbb33838b60400151610ba99190614a8e565b6040518363ffffffff1660e01b8152600401610bc6929190614b45565b602060405180830381600087803b158015610be057600080fd5b505af1158015610bf4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c189190614b69565b505b86610cda578751805160009190610c3390600190614a8e565b81518110610c4357610c43614aa5565b60200260200101519050806001600160a01b031663a9059cbb610c633390565b8b602001516040518363ffffffff1660e01b8152600401610c85929190614b45565b602060405180830381600087803b158015610c9f57600080fd5b505af1158015610cb3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd79190614b69565b50505b506001979650505050505050565b610cf0612d28565b6000610cfd8260016125c6565b90508061080f5760405162461bcd60e51b81526004016107d290614abb565b610d24612cce565b610d2c612d6e565b565b610d36612cce565b60a080546001600160a01b0319166001600160a01b0392909216919091179055565b610d60612cce565b610d2c6000612dc0565b610d72612cce565b609f80546001600160a01b0319166001600160a01b0392909216919091179055565b6000808360000151600081518110610dae57610dae614aa5565b602090810291909101015160a2549091506001600160a01b031663776062c382333088604001516040518563ffffffff1660e01b8152600401610df49493929190614ae8565b600060405180830381600087803b158015610e0e57600080fd5b505af1158015610e22573d6000803e3d6000fd5b505060a1546001600160a01b038481169116149150508015610e45575083608001515b15610ee05760a1546040808601519051632e1a7d4d60e01b81526001600160a01b0390921691632e1a7d4d91610e819160040190815260200190565b600060405180830381600087803b158015610e9b57600080fd5b505af1158015610eaf573d6000803e3d6000fd5b5050505082610ed657610ed68460400151610ec73390565b6001600160a01b031690612e12565b6001915050610726565b609f54604051636eb1769f60e11b81526000916001600160a01b038085169263dd62ed3e92610f159216903090600401614b12565b60206040518083038186803b158015610f2d57600080fd5b505afa158015610f41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f659190614b2c565b90508460400151811015610ffd57609f5460405163095ea7b360e01b81526001600160a01b038481169263095ea7b392610fa9929091169060001990600401614b45565b602060405180830381600087803b158015610fc357600080fd5b505af1158015610fd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ffb9190614b69565b505b46600061a86a82148061101157508161a869145b9050600081156110e657609f5460208901516040808b015160608c01518c519251636d3420ed60e01b81526001600160a01b0390951694636d3420ed94611062949093929130904290600401614bfa565b600060405180830381600087803b15801561107c57600080fd5b505af19250505080156110b157506040513d6000823e601f3d908101601f191682016040526110ae9190810190614ca5565b60015b6110c357600095505050505050610726565b806000815181106110d6576110d6614aa5565b60200260200101519150506111a7565b609f5460208901516040808b01518b519151632512eca560e11b81526001600160a01b0390941693634a25d94a936111279390929130904290600401614cd9565b600060405180830381600087803b15801561114157600080fd5b505af192505050801561117657506040513d6000823e601f3d908101601f191682016040526111739190810190614ca5565b60015b61118857600095505050505050610726565b8060008151811061119b5761119b614aa5565b60200260200101519150505b8760400151811015611244576001600160a01b03851663a9059cbb33838b604001516111d39190614a8e565b6040518363ffffffff1660e01b81526004016111f0929190614b45565b602060405180830381600087803b15801561120a57600080fd5b505af115801561121e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112429190614b69565b505b8760800151156112bc5760a160009054906101000a90046001600160a01b03166001600160a01b031663d0e30db089602001516040518263ffffffff1660e01b81526004016000604051808303818588803b1580156112a257600080fd5b505af11580156112b6573d6000803e3d6000fd5b50505050505b86610cda5787608001511561138a5787518051600091906112df90600190614a8e565b815181106112ef576112ef614aa5565b60200260200101519050806001600160a01b031663a9059cbb61130f3390565b8b602001516040518363ffffffff1660e01b8152600401611331929190614b45565b602060405180830381600087803b15801561134b57600080fd5b505af115801561135f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113839190614b69565b5050610cda565b610cda8860200151610ec73390565b6113a1612cce565b609880546001600160a01b0319166001600160a01b0392909216919091179055565b6113cb612cce565b610d2c612ecb565b6113db612d28565b60008060006113eb866000612f08565b9250925092506113f83390565b6001600160a01b03167fc5dd8c21802b423a9c822ee9c934f042186e6bb7097a1dd17717343ee84df71484604051611434911515815260200190565b60405180910390a26114468286613c10565b6114508185613c10565b61081b613c3b565b600080600080846000015190506000601482516114759190614a8e565b9050600160601b81602084010151049350600160601b6000602084010151049250346000141561150a5760a2546001600160a01b031663776062c38533308a602001516040518563ffffffff1660e01b81526004016114d79493929190614ae8565b600060405180830381600087803b1580156114f157600080fd5b505af1158015611505573d6000803e3d6000fd5b505050505b60a1546001600160a01b038581169116148015611528575085606001515b156115b15760a1546020870151604051632e1a7d4d60e01b81526001600160a01b0390921691632e1a7d4d916115649160040190815260200190565b600060405180830381600087803b15801561157e57600080fd5b505af1158015611592573d6000803e3d6000fd5b505050506115a58660200151610ec73390565b50600195945050505050565b6000341180156115ce575060a1546001600160a01b038481169116145b156116d35760a160009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b15801561162357600080fd5b505af1158015611637573d6000803e3d6000fd5b5050505050826001600160a01b031663a9059cbb6116523390565b88602001516040518363ffffffff1660e01b8152600401611674929190614b45565b602060405180830381600087803b15801561168e57600080fd5b505af11580156116a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116c69190614b69565b5060019695505050505050565b60a054604051636eb1769f60e11b81526000916001600160a01b038088169263dd62ed3e926117089216903090600401614b12565b60206040518083038186803b15801561172057600080fd5b505afa158015611734573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117589190614b2c565b905086602001518110156117f05760a05460405163095ea7b360e01b81526001600160a01b038781169263095ea7b39261179c929091169060001990600401614b45565b602060405180830381600087803b1580156117b657600080fd5b505af11580156117ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117ee9190614b69565b505b6040805160a08082018352895182523060208084019190915242838501528a0151606083015289830151608083015254915163c04b8d5960e01b815290916000916001600160a01b039091169063c04b8d5990611851908590600401614dbe565b602060405180830381600087803b15801561186b57600080fd5b505af192505050801561189b575060408051601f3d908101601f1916820190925261189891810190614b2c565b60015b6118ae5750600098975050505050505050565b905060a060009054906101000a90046001600160a01b03166001600160a01b03166312210e8a6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561190057600080fd5b505af1158015611914573d6000803e3d6000fd5b505050508860600151156119815760a154604051632e1a7d4d60e01b8152600481018390526001600160a01b0390911690632e1a7d4d90602401600060405180830381600087803b15801561196857600080fd5b505af115801561197c573d6000803e3d6000fd5b505050505b88606001511561199a576119958133610ec7565b611a1c565b60405163a9059cbb60e01b81526001600160a01b0387169063a9059cbb906119c89033908590600401614b45565b602060405180830381600087803b1580156119e257600080fd5b505af11580156119f6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a1a9190614b69565b505b50600198975050505050505050565b611a33612cce565b60a280546001600160a01b0319166001600160a01b0392909216919091179055565b600054610100900460ff1615808015611a755750600054600160ff909116105b80611a8f5750303b158015611a8f575060005460ff166001145b611af25760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016107d2565b6000805460ff191660011790558015611b15576000805461ff0019166101001790555b611b1d613c4c565b611b25613c73565b611b2d613ca3565b609780546001600160a01b03199081166001600160a01b03808d1691909117909255609880548216838c16179055609980548216838b16179055609a80548216838a16179055609b80548216838916179055609c80548216838816179055609d80548216838716179055609e80549091169184169190911790558015611bed576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050505050565b611c00612d28565b6000806000808751905060005b81811015611cb2576000806000611c3d8c8581518110611c2f57611c2f614aa5565b60200260200101518a612f08565b9250925092508580611c4c5750825b604051841515815290965033907fc5dd8c21802b423a9c822ee9c934f042186e6bb7097a1dd17717343ee84df7149060200160405180910390a2611c908289614dd1565b9750611c9c8188614dd1565b965050505080611cab90614de9565b9050611c0d565b5081611cfb5760405162461bcd60e51b81526020600482015260186024820152776e6f207375636365737366756c20657865637574696f6e7360401b60448201526064016107d2565b611d058488613c10565b611d0f8387613c10565b611d17613c3b565b5050505050505050565b611d29612cce565b60a180546001600160a01b0319166001600160a01b0392909216919091179055565b6000808260000151600081518110611d6557611d65614aa5565b60200260200101519050600083600001516001856000015151611d889190614a8e565b81518110611d9857611d98614aa5565b602090810291909101015160a2549091506001600160a01b031663776062c383333088602001516040518563ffffffff1660e01b8152600401611dde9493929190614ae8565b600060405180830381600087803b158015611df857600080fd5b505af1158015611e0c573d6000803e3d6000fd5b5050609f54604051636eb1769f60e11b8152600093506001600160a01b03808716935063dd62ed3e92611e46929116903090600401614b12565b60206040518083038186803b158015611e5e57600080fd5b505afa158015611e72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e969190614b2c565b90508460200151811015611f2e57609f5460405163095ea7b360e01b81526001600160a01b038581169263095ea7b392611eda929091169060001990600401614b45565b602060405180830381600087803b158015611ef457600080fd5b505af1158015611f08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f2c9190614b69565b505b46600061a86a821480611f4257508161a869145b90506000811561201757609f5460208901516040808b015160608c01518c51925163a7b856d360e01b81526001600160a01b039095169463a7b856d394611f93949093929130904290600401614bfa565b600060405180830381600087803b158015611fad57600080fd5b505af1925050508015611fe257506040513d6000823e601f3d908101601f19168201604052611fdf9190810190614ca5565b60015b611ff457506000979650505050505050565b8060008151811061200757612007614aa5565b60200260200101519150506120d8565b609f5460208901516040808b01518b519151634401edf760e11b81526001600160a01b0390941693638803dbee936120589390929130904290600401614cd9565b600060405180830381600087803b15801561207257600080fd5b505af19250505080156120a757506040513d6000823e601f3d908101601f191682016040526120a49190810190614ca5565b60015b6120b957506000979650505050505050565b806000815181106120cc576120cc614aa5565b60200260200101519150505b60405163a9059cbb60e01b81526001600160a01b0386169063a9059cbb906121069033908590600401614b45565b602060405180830381600087803b15801561212057600080fd5b505af1158015612134573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a1c9190614b69565b600080826000015160008151811061217257612172614aa5565b602002602001015190506000836000015160018560000151516121959190614a8e565b815181106121a5576121a5614aa5565b60200260200101519050346000141561228c5760a2546001600160a01b031663776062c383333088602001516040518563ffffffff1660e01b81526004016121f09493929190614ae8565b600060405180830381600087803b15801561220a57600080fd5b505af115801561221e573d6000803e3d6000fd5b505060a1546020870151604051632e1a7d4d60e01b81526001600160a01b039092169350632e1a7d4d92506122599160040190815260200190565b600060405180830381600087803b15801561227357600080fd5b505af1158015612287573d6000803e3d6000fd5b505050505b6000341180156122a9575060a1546001600160a01b038281169116145b156123ac5760a160009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b1580156122fe57600080fd5b505af1158015612312573d6000803e3d6000fd5b5050505050806001600160a01b031663a9059cbb61232d3390565b86602001516040518363ffffffff1660e01b815260040161234f929190614b45565b602060405180830381600087803b15801561236957600080fd5b505af115801561237d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123a19190614b69565b506001949350505050565b46600061a86a8214806123c057508161a869145b90506000811561248d57609f5460408089015160608a01518a519251631325dca760e11b81526001600160a01b039094169363264bb94e9361240a93929130904290600401614e04565b600060405180830381600087803b15801561242457600080fd5b505af192505050801561245957506040513d6000823e601f3d908101601f191682016040526124569190810190614ca5565b60015b61246a575060009695505050505050565b8060008151811061247d5761247d614aa5565b6020026020010151915050612546565b609f5460408089015189519151637ff36ab560e01b81526001600160a01b0390931692637ff36ab5926124c7929130904290600401614e4d565b600060405180830381600087803b1580156124e157600080fd5b505af192505050801561251657506040513d6000823e601f3d908101601f191682016040526125139190810190614ca5565b60015b612527575060009695505050505050565b8060008151811061253a5761253a614aa5565b60200260200101519150505b60405163a9059cbb60e01b81526001600160a01b0385169063a9059cbb906125749033908590600401614b45565b602060405180830381600087803b15801561258e57600080fd5b505af11580156125a2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cda9190614b69565b600080600080856000015190506000601482516125e39190614a8e565b9050600160601b81602084010151049350600160601b600060208401015104925034600014156126785760a2546001600160a01b031663776062c38533308b604001516040518563ffffffff1660e01b81526004016126459493929190614ae8565b600060405180830381600087803b15801561265f57600080fd5b505af1158015612673573d6000803e3d6000fd5b505050505b60a1546001600160a01b038581169116148015612696575086606001515b156127255760a1546020880151604051632e1a7d4d60e01b81526001600160a01b0390921691632e1a7d4d916126d29160040190815260200190565b600060405180830381600087803b1580156126ec57600080fd5b505af1158015612700573d6000803e3d6000fd5b5050505085612718576127188760200151610ec73390565b6001945050505050610726565b600034118015612742575060a1546001600160a01b038481169116145b156128465760a160009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b15801561279757600080fd5b505af11580156127ab573d6000803e3d6000fd5b50505050508561271857602087015160405163a9059cbb60e01b81526001600160a01b0385169163a9059cbb916127e6913391600401614b45565b602060405180830381600087803b15801561280057600080fd5b505af1158015612814573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128389190614b69565b506001945050505050610726565b60a054604051636eb1769f60e11b81526000916001600160a01b038088169263dd62ed3e9261287b9216903090600401614b12565b60206040518083038186803b15801561289357600080fd5b505afa1580156128a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128cb9190614b2c565b905087604001518110156129635760a05460405163095ea7b360e01b81526001600160a01b038781169263095ea7b39261290f929091169060001990600401614b45565b602060405180830381600087803b15801561292957600080fd5b505af115801561293d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129619190614b69565b505b6040805160a080820183528a5182523060208084019190915242838501528b015160608301528a8301516080830152549151631e51809360e31b815290916000916001600160a01b039091169063f28c0498906129c4908590600401614dbe565b602060405180830381600087803b1580156129de57600080fd5b505af1925050508015612a0e575060408051601f3d908101601f19168201909252612a0b91810190614b2c565b60015b612a22576000975050505050505050610726565b905060a060009054906101000a90046001600160a01b03166001600160a01b03166312210e8a6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015612a7457600080fd5b505af1158015612a88573d6000803e3d6000fd5b50505050896060015115612b005760a15460208b0151604051632e1a7d4d60e01b81526001600160a01b0390921691632e1a7d4d91612acd9160040190815260200190565b600060405180830381600087803b158015612ae757600080fd5b505af1158015612afb573d6000803e3d6000fd5b505050505b8960400151811015612b9d576001600160a01b03871663a9059cbb33838d60400151612b2c9190614a8e565b6040518363ffffffff1660e01b8152600401612b49929190614b45565b602060405180830381600087803b158015612b6357600080fd5b505af1158015612b77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b9b9190614b69565b505b88612c4557896060015115612bc057612bbb8a60200151610ec73390565b612c45565b60208a015160405163a9059cbb60e01b81526001600160a01b0388169163a9059cbb91612bf1913391600401614b45565b602060405180830381600087803b158015612c0b57600080fd5b505af1158015612c1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c439190614b69565b505b5060019998505050505050505050565b612c5d612cce565b6001600160a01b038116612cc25760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016107d2565b612ccb81612dc0565b50565b6033546001600160a01b03163314610d2c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016107d2565b60655460ff1615610d2c5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016107d2565b612d76613cd6565b6065805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114612e5f576040519150601f19603f3d011682016040523d82523d6000602084013e612e64565b606091505b5050905080612ec65760405162461bcd60e51b815260206004820152602860248201527f4c69625472616e73666572204261736543757272656e6379207472616e7366656044820152671c8819985a5b195960c21b60648201526084016107d2565b505050565b612ed3612d28565b6065805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612da33390565b6000806000806000612f27876060015188604001518960000151613d1f565b60208901519193509150600288516007811115612f4657612f46614e82565b141561302357609a546040516000916001600160a01b0316908390612f6c908790614e98565b60006040518083038185875af1925050503d8060008114612fa9576040519150601f19603f3d011682016040523d82523d6000602084013e612fae565b606091505b505090508715612fd65780612fd157600080600096509650965050505050613c09565b61301d565b8061301d5760405162461bcd60e51b8152602060048201526017602482015276141d5c98da185cd94814d9585c1bdc9d0819985a5b1959604a1b60448201526064016107d2565b50613bd7565b60018851600781111561303857613038614e82565b1415613109576099546040516000916001600160a01b031690839061305e908790614e98565b60006040518083038185875af1925050503d806000811461309b576040519150601f19603f3d011682016040523d82523d6000602084013e6130a0565b606091505b5050905087156130c35780612fd157600080600096509650965050505050613c09565b8061301d5760405162461bcd60e51b8152602060048201526016602482015275141d5c98da185cd94815de5d995c9b8819985a5b195960521b60448201526064016107d2565b60068851600781111561311e5761311e614e82565b14156131f6576097546040516000916001600160a01b0316908390613144908790614e98565b60006040518083038185875af1925050503d8060008114613181576040519150601f19603f3d011682016040523d82523d6000602084013e613186565b606091505b5050905087156131a95780612fd157600080600096509650965050505050613c09565b8061301d5760405162461bcd60e51b815260206004820152601b60248201527f50757263686173652047686f73744d61726b6574206661696c6564000000000060448201526064016107d2565b60008851600781111561320b5761320b614e82565b14156132dd576098546040516000916001600160a01b0316908390613231908790614e98565b60006040518083038185875af1925050503d806000811461326e576040519150601f19603f3d011682016040523d82523d6000602084013e613273565b606091505b5050905087156132965780612fd157600080600096509650965050505050613c09565b8061301d5760405162461bcd60e51b8152602060048201526017602482015276141d5c98da185cd94814985c9a589b194819985a5b1959604a1b60448201526064016107d2565b6003885160078111156132f2576132f2614e82565b14156137855760008380602001905181019061330e91906153a8565b9050871561339057609b5460405163357a150b60e01b81526001600160a01b039091169063357a150b908490613348908590600401615623565b6000604051808303818588803b15801561336157600080fd5b505af193505050508015613373575060015b61338b57600080600096509650965050505050613c09565b6133f5565b609b5460405163357a150b60e01b81526001600160a01b039091169063357a150b9084906133c2908590600401615623565b6000604051808303818588803b1580156133db57600080fd5b505af11580156133ef573d6000803e3d6000fd5b50505050505b60208101515160005b8181101561377d5760008360200151828151811061341e5761341e614aa5565b602002602001015160200151905060008460200151838151811061344457613444614aa5565b602002602001015160400151905060008560000151838151811061346a5761346a614aa5565b60200260200101516101000151828151811061348857613488614aa5565b60200260200101516020015190506000866000015184815181106134ae576134ae614aa5565b602002602001015160e00151511180156134ea57506000866020015185815181106134db576134db614aa5565b602002602001015160c0015151115b1561353c5761353c818760200151868151811061350957613509614aa5565b602002602001015160c001518860000151868151811061352b5761352b614aa5565b602002602001015160e00151613e1a565b855180518490811061355057613550614aa5565b602002602001015160800151600114156136315760008180602001905181019061357a91906157df565b905060005b815181101561362a57600082828151811061359c5761359c614aa5565b6020026020010151905080600001516001600160a01b03166342842e0e306135c13390565b84602001516040518463ffffffff1660e01b81526004016135e49392919061589d565b600060405180830381600087803b1580156135fe57600080fd5b505af1158015613612573d6000803e3d6000fd5b5050505050808061362290614de9565b91505061357f565b5050613769565b855180518490811061364557613645614aa5565b602002602001015160800151600214156137255760008180602001905181019061366f91906158c1565b905060005b815181101561362a57600082828151811061369157613691614aa5565b6020026020010151905080600001516001600160a01b031663f242432a306136b63390565b846020015185604001516040518563ffffffff1660e01b81526004016136df9493929190615987565b600060405180830381600087803b1580156136f957600080fd5b505af115801561370d573d6000803e3d6000fd5b5050505050808061371d90614de9565b915050613674565b60405162461bcd60e51b81526020600482015260196024820152783ab735b737bbb7103232b632b3b0ba32aa3cb832903c193c9960391b60448201526064016107d2565b5050508061377690614de9565b90506133fe565b505050613bd7565b60048851600781111561379a5761379a614e82565b14156139c6576000806000858060200190518101906137b99190615add565b925092509250891561384357609c54604051635a72594b60e11b81526001600160a01b039091169063b4e4b2969086906137f99087908790600401615bc5565b6000604051808303818588803b15801561381257600080fd5b505af193505050508015613824575060015b61383e576000806000985098509850505050505050613c09565b6138aa565b609c54604051635a72594b60e11b81526001600160a01b039091169063b4e4b2969086906138779087908790600401615bc5565b6000604051808303818588803b15801561389057600080fd5b505af11580156138a4573d6000803e3d6000fd5b50505050505b6001600160e01b031981166339d690a360e11b14156139325760408201516001600160a01b03166342842e0e303385608001516040518463ffffffff1660e01b81526004016138fb9392919061589d565b600060405180830381600087803b15801561391557600080fd5b505af1158015613929573d6000803e3d6000fd5b5050505061377d565b6001600160e01b0319811663025ceed960e61b141561398957604082810151608084015160a08501519251637921219560e11b81526001600160a01b039092169263f242432a926138fb9230923392600401615987565b60405162461bcd60e51b8152602060048201526012602482015271556e6b6e6f776e20746f6b656e207479706560701b60448201526064016107d2565b6005885160078111156139db576139db614e82565b1415613aae57609d546040516000916001600160a01b0316908390613a01908790614e98565b60006040518083038185875af1925050503d8060008114613a3e576040519150601f19603f3d011682016040523d82523d6000602084013e613a43565b606091505b505090508715613a665780612fd157600080600096509650965050505050613c09565b8061301d5760405162461bcd60e51b8152602060048201526018602482015277141d5c98da185cd94814dd591bd4ddd85c0819985a5b195960421b60448201526064016107d2565b600788516007811115613ac357613ac3614e82565b1415613b9457609e546040516000916001600160a01b0316908390613ae9908790614e98565b60006040518083038185875af1925050503d8060008114613b26576040519150601f19603f3d011682016040523d82523d6000602084013e613b2b565b606091505b505090508715613b4e5780612fd157600080600096509650965050505050613c09565b8061301d5760405162461bcd60e51b8152602060048201526016602482015275141d5c98da185cd948189b1d5c9a5bc819985a5b195960521b60448201526064016107d2565b60405162461bcd60e51b8152602060048201526018602482015277556e6b6e6f776e2070757263686173652064657461696c7360401b60448201526064016107d2565b613be5828960200151613ec7565b600080613bfa8a604001518b60200151613f71565b60019950909750955050505050505b9250925092565b600082118015613c2857506001600160a01b03811615155b15613c3757613c378183612e12565b5050565b478015612ccb57612ccb3382612e12565b600054610100900460ff16610d2c5760405162461bcd60e51b81526004016107d290615d1f565b600054610100900460ff16613c9a5760405162461bcd60e51b81526004016107d290615d1f565b610d2c33612dc0565b600054610100900460ff16613cca5760405162461bcd60e51b81526004016107d290615d1f565b6065805460ff19169055565b60655460ff16610d2c5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016107d2565b6060806000602085901c61ffff166001811115613d3e57613d3e614e82565b905060606000826001811115613d5657613d56614e82565b1415613d68578693509150613e129050565b6001826001811115613d7c57613d7c614e82565b1415613dca57600087806020019051810190613d989190615d6a565b9050613da386613fa2565b15613dbe578060000151816020015194509450505050613e12565b5193509150613e129050565b60405162461bcd60e51b815260206004820152601a60248201527f756e6b6e6f776e206164646974696f6e616c446174615479706500000000000060448201526064016107d2565b935093915050565b8151835114613e2857600080fd5b8051835114613e3657600080fd5b825160005b81811015613ec057828181518110613e5557613e55614aa5565b01602001516001600160f81b03191615613eb057838181518110613e7b57613e7b614aa5565b602001015160f81c60f81b858281518110613e9857613e98614aa5565b60200101906001600160f81b031916908160001a9053505b613eb981614de9565b9050613e3b565b5050505050565b815160005b81811015613f6b576000848281518110613ee857613ee8614aa5565b60200260200101511115613f5b576000848281518110613f0a57613f0a614aa5565b60200260200101519050600060a0868481518110613f2a57613f2a614aa5565b6020026020010151901c90506000613f4b8287613fea90919063ffffffff16565b9050613f578184613c10565b5050505b613f6481614de9565b9050613ecc565b50505050565b60008061ffff601085901c8116908516613f8b8583613fea565b613f958683613fea565b9350935050509250929050565b60006005826007811115613fb857613fb8614e82565b1480613fd557506004826007811115613fd357613fd3614e82565b145b15613fe257506001919050565b506000919050565b6000612710613ff98385615dfa565b6140039190615e19565b9392505050565b6001600160e01b031981168114612ccb57600080fd5b60006020828403121561403257600080fd5b81356140038161400a565b6001600160a01b0381168114612ccb57600080fd5b60006020828403121561406457600080fd5b81356140038161403d565b634e487b7160e01b600052604160045260246000fd5b604051608081016001600160401b03811182821017156140a7576140a761406f565b60405290565b60405160a081016001600160401b03811182821017156140a7576140a761406f565b604080519081016001600160401b03811182821017156140a7576140a761406f565b6040516101a081016001600160401b03811182821017156140a7576140a761406f565b60405161016081016001600160401b03811182821017156140a7576140a761406f565b60405160c081016001600160401b03811182821017156140a7576140a761406f565b604051606081016001600160401b03811182821017156140a7576140a761406f565b60405161020081016001600160401b03811182821017156140a7576140a761406f565b604051601f8201601f191681016001600160401b03811182821017156141c6576141c661406f565b604052919050565b60006001600160401b038211156141e7576141e761406f565b50601f01601f191660200190565b600082601f83011261420657600080fd5b8135614219614214826141ce565b61419e565b81815284602083860101111561422e57600080fd5b816020850160208301376000918101602001919091529392505050565b6000806000806080858703121561426157600080fd5b843561426c8161403d565b9350602085013561427c8161403d565b92506040850135915060608501356001600160401b0381111561429e57600080fd5b6142aa878288016141f5565b91505092959194509250565b60006001600160401b038211156142cf576142cf61406f565b5060051b60200190565b60088110612ccb57600080fd5b6000608082840312156142f857600080fd5b614300614085565b9050813561430d816142d9565b80825250602082013560208201526040820135604082015260608201356001600160401b0381111561433e57600080fd5b61434a848285016141f5565b60608301525092915050565b600082601f83011261436757600080fd5b81356020614377614214836142b6565b82815260059290921b8401810191818101908684111561439657600080fd5b8286015b848110156143d55780356001600160401b038111156143b95760008081fd5b6143c78986838b01016142e6565b84525091830191830161439a565b509695505050505050565b8015158114612ccb57600080fd5b80356143f9816143e0565b919050565b600082601f83011261440f57600080fd5b8135602061441f614214836142b6565b82815260059290921b8401810191818101908684111561443e57600080fd5b8286015b848110156143d55780358352918301918301614442565b600060a0828403121561446b57600080fd5b6144736140ad565b905081356001600160401b038082111561448c57600080fd5b818401915084601f8301126144a057600080fd5b813560206144b0614214836142b6565b82815260059290921b840181019181810190888411156144cf57600080fd5b948201945b838610156144f65785356144e78161403d565b825294820194908201906144d4565b86525085810135908501525060408085013590840152606084013591508082111561452057600080fd5b5061452d848285016143fe565b60608301525061453f608083016143ee565b608082015292915050565b600080600080600060a0868803121561456257600080fd5b85356001600160401b038082111561457957600080fd5b61458589838a01614356565b9650602088013591506145978261403d565b9094506040870135906145a98261403d565b9093506060870135906145bb826143e0565b909250608087013590808211156145d157600080fd5b506145de88828901614459565b9150509295509295909350565b600080604083850312156145fe57600080fd5b82356001600160401b0381111561461457600080fd5b61462085828601614459565b9250506020830135614631816143e0565b809150509250929050565b60006080828403121561464e57600080fd5b614656614085565b905081356001600160401b0381111561466e57600080fd5b61467a848285016141f5565b8252506020820135602082015260408201356040820152606082013561469f816143e0565b606082015292915050565b600080600080600060a086880312156146c257600080fd5b85356001600160401b03808211156146d957600080fd5b6146e589838a01614356565b9650602088013591506146f78261403d565b9094506040870135906147098261403d565b90935060608701359061471b826143e0565b9092506080870135908082111561473157600080fd5b506145de8882890161463c565b6001600160a01b03169052565b60008060006060848603121561476057600080fd5b83356001600160401b0381111561477657600080fd5b614782868287016142e6565b93505060208401356147938161403d565b915060408401356147a38161403d565b809150509250925092565b6000602082840312156147c057600080fd5b81356001600160401b038111156147d657600080fd5b6147e28482850161463c565b949350505050565b600080600080600080600080610100898b03121561480757600080fd5b88356148128161403d565b975060208901356148228161403d565b965060408901356148328161403d565b955060608901356148428161403d565b945060808901356148528161403d565b935060a08901356148628161403d565b925060c08901356148728161403d565b915060e08901356148828161403d565b809150509295985092959890939650565b600080600080608085870312156148a957600080fd5b84356001600160401b038111156148bf57600080fd5b6148cb87828801614356565b94505060208501356148dc8161403d565b925060408501356148ec8161403d565b915060608501356148fc816143e0565b939692955090935050565b600080600080600060a0868803121561491f57600080fd5b853561492a8161403d565b9450602086013561493a8161403d565b935060408601356001600160401b038082111561495657600080fd5b61496289838a016143fe565b9450606088013591508082111561497857600080fd5b61498489838a016143fe565b9350608088013591508082111561499a57600080fd5b506145de888289016141f5565b6000602082840312156149b957600080fd5b81356001600160401b038111156149cf57600080fd5b6147e284828501614459565b600080604083850312156149ee57600080fd5b82356001600160401b03811115614a0457600080fd5b6146208582860161463c565b600080600080600060a08688031215614a2857600080fd5b8535614a338161403d565b94506020860135614a438161403d565b9350604086013592506060860135915060808601356001600160401b03811115614a6c57600080fd5b6145de888289016141f5565b634e487b7160e01b600052601160045260246000fd5b600082821015614aa057614aa0614a78565b500390565b634e487b7160e01b600052603260045260246000fd5b6020808252601390820152721cddd85c081b9bdd081cdd58d8d95cdcd99d5b606a1b604082015260600190565b6001600160a01b039485168152928416602084015292166040820152606081019190915260800190565b6001600160a01b0392831681529116602082015260400190565b600060208284031215614b3e57600080fd5b5051919050565b6001600160a01b03929092168252602082015260400190565b80516143f9816143e0565b600060208284031215614b7b57600080fd5b8151614003816143e0565b600081518084526020808501945080840160005b83811015614bb657815187529582019590820190600101614b9a565b509495945050505050565b600081518084526020808501945080840160005b83811015614bb65781516001600160a01b031687529582019590820190600101614bd5565b86815285602082015260c060408201526000614c1960c0830187614b86565b8281036060840152614c2b8187614bc1565b6001600160a01b03959095166080840152505060a00152949350505050565b600082601f830112614c5b57600080fd5b81516020614c6b614214836142b6565b82815260059290921b84018101918181019086841115614c8a57600080fd5b8286015b848110156143d55780518352918301918301614c8e565b600060208284031215614cb757600080fd5b81516001600160401b03811115614ccd57600080fd5b6147e284828501614c4a565b85815284602082015260a060408201526000614cf860a0830186614bc1565b6001600160a01b0394909416606083015250608001529392505050565b60005b83811015614d30578181015183820152602001614d18565b83811115613f6b5750506000910152565b60008151808452614d59816020860160208601614d15565b601f01601f19169290920160200192915050565b6000815160a08452614d8260a0850182614d41565b6020848101516001600160a01b031690860152604080850151908601526060808501519086015260809384015193909401929092525090919050565b6020815260006140036020830184614d6d565b60008219821115614de457614de4614a78565b500190565b6000600019821415614dfd57614dfd614a78565b5060010190565b85815260a060208201526000614e1d60a0830187614b86565b8281036040840152614e2f8187614bc1565b6001600160a01b039590951660608401525050608001529392505050565b848152608060208201526000614e666080830186614bc1565b6001600160a01b03949094166040830152506060015292915050565b634e487b7160e01b600052602160045260246000fd5b60008251614eaa818460208701614d15565b9190910192915050565b80516143f98161403d565b600082601f830112614ed057600080fd5b8151614ede614214826141ce565b818152846020838601011115614ef357600080fd5b6147e2826020830160208701614d15565b600082601f830112614f1557600080fd5b81516020614f25614214836142b6565b82815260059290921b84018101918181019086841115614f4457600080fd5b8286015b848110156143d55780516001600160401b0380821115614f685760008081fd5b908801906040828b03601f1901811315614f825760008081fd5b614f8a6140cf565b838801518152908301519082821115614fa35760008081fd5b614fb18c8984870101614ebf565b818901528652505050918301918301614f48565b805160ff811681146143f957600080fd5b600082601f830112614fe757600080fd5b81516020614ff7614214836142b6565b82815260059290921b8401810191818101908684111561501657600080fd5b8286015b848110156143d55780516001600160401b038082111561503a5760008081fd5b908801906101a0828b03601f19018113156150555760008081fd5b61505d6140f1565b8784015181526040615070818601614eb4565b89830152606080860151828401526080915081860151818401525060a0808601518284015260c0915081860151818401525060e06150af818701614eb4565b82840152610100915081860151858111156150ca5760008081fd5b6150d88f8c838a0101614ebf565b82850152505061012080860151858111156150f35760008081fd5b6151018f8c838a0101614f04565b838501525061014094508486015181840152505061016080850151848301526101809350615130848601614fc5565b9082015261513f848301614fc5565b928101929092525084525091830191830161501a565b80516143f9816142d9565b600082601f83011261517157600080fd5b81516020615181614214836142b6565b82815260069290921b840181019181810190868411156151a057600080fd5b8286015b848110156143d557604081890312156151bd5760008081fd5b6151c56140cf565b81518152848201516151d68161403d565b818601528352918301916040016151a4565b600082601f8301126151f957600080fd5b81516020615209614214836142b6565b82815260059290921b8401810191818101908684111561522857600080fd5b8286015b848110156143d55780516001600160401b038082111561524c5760008081fd5b90880190610160828b03601f19018113156152675760008081fd5b61526f614114565b61527a888501615155565b815260408085015189830152606080860151828401526080915081860151818401525060a0808601518284015260c091506152b6828701614eb4565b9083015260e085810151858111156152ce5760008081fd5b6152dc8f8c838a0101614ebf565b83850152506101009150818601518184015250610120808601518284015261014091508186015181840152508285015192508383111561531c5760008081fd5b61532a8d8a85880101615160565b90820152865250505091830191830161522c565b600060c0828403121561535057600080fd5b615358614137565b905081518152602082015160208201526040820151604082015260608201516060820152608082015161538a8161403d565b608082015260a082015161539d816143e0565b60a082015292915050565b6000602082840312156153ba57600080fd5b81516001600160401b03808211156153d157600080fd5b9083019061016082860312156153e657600080fd5b6153ee614137565b8251828111156153fd57600080fd5b61540987828601614fd6565b82525060208301518281111561541e57600080fd5b61542a878286016151e8565b60208301525061543d866040850161533e565b6040820152610100830151606082015261012083015160808201526154656101408401614fc5565b60a082015295945050505050565b600081518084526020808501808196508360051b8101915082860160005b858110156154cf57828403895281518051855285015160408686018190526154bb81870183614d41565b9a87019a9550505090840190600101615491565b5091979650505050505050565b600881106154fa57634e487b7160e01b600052602160045260246000fd5b9052565b600081518084526020808501945080840160005b83811015614bb6578151805188528301516001600160a01b03168388015260409096019590820190600101615512565b600081518084526020808501808196508360051b8101915082860160005b858110156154cf578284038952815161016061557d8683516154dc565b818701518688015260408083015190870152606080830151908701526080808301519087015260a0808301516155b58289018261473e565b505060c08083015182828901526155ce83890182614d41565b60e085810151908a015261010080860151908a015261012080860151908a015261014094850151898203958a0195909552925061560f9150829050836154fe565b9a87019a9550505090840190600101615560565b60006020808352610180808401855161016080858801528282518085526101a094508489019150848160051b8a0101878501945060005b8281101561573e578a820361019f19018452855180518352898101516156828b85018261473e565b5060408181015190840152606080820151908401526080808201519084015260a0808201519084015260c0808201516156bd8286018261473e565b505060e08082015189828601526156d68a860182614d41565b91505061010080830151858303828701526156f18382615473565b925050506101208083015181860152506101408083015181860152508682015161571f8886018260ff169052565b509089015160ff1692890192909252948801949288019260010161565a565b50968a0151898803601f190160408b01529661575a8189615542565b9750505050604088015193506157b06060880185805182526020808201519083015260408082015190830152606080820151908301526080808201516001600160a01b03169083015260a0908101511515910152565b6060880151610120880152608088015161014088015260a09097015160ff169690950195909552509392505050565b600060208083850312156157f257600080fd5b82516001600160401b0381111561580857600080fd5b8301601f8101851361581957600080fd5b8051615827614214826142b6565b81815260069190911b8201830190838101908783111561584657600080fd5b928401925b8284101561589257604084890312156158645760008081fd5b61586c6140cf565b84516158778161403d565b8152848601518682015282526040909301929084019061584b565b979650505050505050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b600060208083850312156158d457600080fd5b82516001600160401b038111156158ea57600080fd5b8301601f810185136158fb57600080fd5b8051615909614214826142b6565b8181526060918202830184019184820191908884111561592857600080fd5b938501935b8385101561597b5780858a0312156159455760008081fd5b61594d614159565b85516159588161403d565b81528587015187820152604080870151908201528352938401939185019161592d565b50979650505050505050565b6001600160a01b0394851681529290931660208301526040820152606081019190915260a06080820181905260009082015260c00190565b600061020082840312156159d257600080fd5b6159da61417b565b90506159e582614b5e565b81526159f360208301614eb4565b6020820152615a0460408301614eb4565b6040820152606082015160608201526080820151608082015260a082015160a0820152615a3360c08301614eb4565b60c0820152615a4460e08301614eb4565b60e08201526101008281015190820152610120808301519082015261014080830151908201526101608083015190820152610180808301516001600160401b03811115615a9057600080fd5b615a9c85828601614ebf565b8284015250506101a0615ab0818401614fc5565b908201526101c082810151908201526101e09182015191810191909152919050565b80516143f98161400a565b600080600060608486031215615af257600080fd5b83516001600160401b0380821115615b0957600080fd5b9085019060c08288031215615b1d57600080fd5b615b25614137565b8251615b30816143e0565b81526020830151615b408161403d565b8060208301525060408301516040820152606083015160608201526080830151608082015260a083015182811115615b7757600080fd5b615b8389828601614ebf565b60a0830152506020870151909550915080821115615ba057600080fd5b50615bad868287016159bf565b925050615bbc60408501615ad2565b90509250925092565b60408152600061010084511515604084015260018060a01b03602086015116606084015260408501516080840152606085015160a0840152608085015160c084015260a085015160c060e0850152615c1f82850182614d41565b848103602086015285511515815290506102006020860151615c44602084018261473e565b506040860151615c57604084018261473e565b50606086015160608301526080860151608083015260a086015160a083015260c0860151615c8860c084018261473e565b5060e0860151615c9b60e084018261473e565b50858301519282019290925261012080860151908201526101408086015190820152610160808601519082015261018080860151818301849052909290615ce482840182614d41565b935050506101a080860151615cfd8284018260ff169052565b50506101c085810151908201526101e094850151940193909352509092915050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600060208284031215615d7c57600080fd5b81516001600160401b0380821115615d9357600080fd5b9083019060408286031215615da757600080fd5b615daf6140cf565b825182811115615dbe57600080fd5b615dca87828601614ebf565b825250602083015182811115615ddf57600080fd5b615deb87828601614c4a565b60208301525095945050505050565b6000816000190483118215151615615e1457615e14614a78565b500290565b600082615e3657634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220d5926290e6ea91af372d524d217987e2646fd13a791e24a2ffe53568e10d049b64736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106102245760003560e01c806387653f801161012e578063c4e55fd3116100ab578063f23a6e611161006f578063f23a6e6114610649578063f2fde38b14610675578063f5c7bd7014610695578063fc40c9c7146106b5578063fee03e9e146106d557600080fd5b8063c4e55fd3146105c3578063c6d0ffd7146105e3578063cd7f4a0f14610603578063d71c4dd014610616578063df6c25581461062957600080fd5b8063a8e90b57116100f2578063a8e90b5714610524578063aa78ae9314610544578063b94ee33214610564578063bc197c8114610577578063c1aa2938146105a357600080fd5b806387653f80146104935780638ae42905146104a65780638da5cb5b146104c6578063996c6cc3146104e4578063a05f32dc1461050457600080fd5b8063596fa9e3116101bc57806373a963d71161018057806373a963d71461040b578063745fdf8e1461042b5780637908716c1461044b5780638456cb591461046b57806386496e7a1461048057600080fd5b8063596fa9e31461037e57806359e868291461039e5780635c975abb146103be5780635ea1e4c9146103d6578063715018a6146103f657600080fd5b806301ffc9a71461023057806308b1571d1461026557806310f91b0b14610287578063150b7a02146102bf5780632bf92a43146103035780632c979b1614610316578063348c4efd146103365780633f4ba83a146103495780634edfc9f91461035e57600080fd5b3661022b57005b600080fd5b34801561023c57600080fd5b5061025061024b366004614020565b6106f5565b60405190151581526020015b60405180910390f35b34801561027157600080fd5b50610285610280366004614052565b61072c565b005b34801561029357600080fd5b5060a0546102a7906001600160a01b031681565b6040516001600160a01b03909116815260200161025c565b3480156102cb57600080fd5b506102ea6102da36600461424b565b630a85bd0160e11b949350505050565b6040516001600160e01b0319909116815260200161025c565b61028561031136600461454a565b610756565b34801561032257600080fd5b506102506103313660046145eb565b610823565b6102856103443660046146aa565b610ce8565b34801561035557600080fd5b50610285610d1c565b34801561036a57600080fd5b506099546102a7906001600160a01b031681565b34801561038a57600080fd5b50609f546102a7906001600160a01b031681565b3480156103aa57600080fd5b506102856103b9366004614052565b610d2e565b3480156103ca57600080fd5b5060655460ff16610250565b3480156103e257600080fd5b50609d546102a7906001600160a01b031681565b34801561040257600080fd5b50610285610d58565b34801561041757600080fd5b50610285610426366004614052565b610d6a565b34801561043757600080fd5b506102506104463660046145eb565b610d94565b34801561045757600080fd5b50610285610466366004614052565b611399565b34801561047757600080fd5b506102856113c3565b61028561048e36600461474b565b6113d3565b6102506104a13660046147ae565b611458565b3480156104b257600080fd5b506102856104c1366004614052565b611a2b565b3480156104d257600080fd5b506033546001600160a01b03166102a7565b3480156104f057600080fd5b5060a1546102a7906001600160a01b031681565b34801561051057600080fd5b506097546102a7906001600160a01b031681565b34801561053057600080fd5b50609c546102a7906001600160a01b031681565b34801561055057600080fd5b5061028561055f3660046147ea565b611a55565b610285610572366004614893565b611bf8565b34801561058357600080fd5b506102ea610592366004614907565b63bc197c8160e01b95945050505050565b3480156105af57600080fd5b506102856105be366004614052565b611d21565b3480156105cf57600080fd5b506102506105de3660046149a7565b611d4b565b3480156105ef57600080fd5b506098546102a7906001600160a01b031681565b6102506106113660046149a7565b612158565b6102506106243660046149db565b6125c6565b34801561063557600080fd5b50609e546102a7906001600160a01b031681565b34801561065557600080fd5b506102ea610664366004614a10565b63f23a6e6160e01b95945050505050565b34801561068157600080fd5b50610285610690366004614052565b612c55565b3480156106a157600080fd5b50609a546102a7906001600160a01b031681565b3480156106c157600080fd5b50609b546102a7906001600160a01b031681565b3480156106e157600080fd5b5060a2546102a7906001600160a01b031681565b60006001600160e01b03198216630271189760e51b148061072657506301ffc9a760e01b6001600160e01b03198316145b92915050565b610734612cce565b609e80546001600160a01b0319166001600160a01b0392909216919091179055565b61075e612d28565b805180516000919061077290600190614a8e565b8151811061078257610782614aa5565b602090810291909101015160a1549091506001600160a01b03808316911614156107e15760006107b3836001610d94565b9050806107db5760405162461bcd60e51b81526004016107d290614abb565b60405180910390fd5b5061080f565b60006107ee836001610823565b90508061080d5760405162461bcd60e51b81526004016107d290614abb565b505b61081b86868686611bf8565b505050505050565b600080836000015160008151811061083d5761083d614aa5565b602090810291909101015160a2549091506001600160a01b031663776062c382333088604001516040518563ffffffff1660e01b81526004016108839493929190614ae8565b600060405180830381600087803b15801561089d57600080fd5b505af11580156108b1573d6000803e3d6000fd5b5050609f54604051636eb1769f60e11b8152600093506001600160a01b03808616935063dd62ed3e926108eb929116903090600401614b12565b60206040518083038186803b15801561090357600080fd5b505afa158015610917573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061093b9190614b2c565b905084604001518110156109d357609f5460405163095ea7b360e01b81526001600160a01b038481169263095ea7b39261097f929091169060001990600401614b45565b602060405180830381600087803b15801561099957600080fd5b505af11580156109ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d19190614b69565b505b46600061a86a8214806109e757508161a869145b905060008115610abc57609f5460208901516040808b015160608c01518c51925163a7b856d360e01b81526001600160a01b039095169463a7b856d394610a38949093929130904290600401614bfa565b600060405180830381600087803b158015610a5257600080fd5b505af1925050508015610a8757506040513d6000823e601f3d908101601f19168201604052610a849190810190614ca5565b60015b610a9957600095505050505050610726565b80600081518110610aac57610aac614aa5565b6020026020010151915050610b7d565b609f5460208901516040808b01518b519151634401edf760e11b81526001600160a01b0390941693638803dbee93610afd9390929130904290600401614cd9565b600060405180830381600087803b158015610b1757600080fd5b505af1925050508015610b4c57506040513d6000823e601f3d908101601f19168201604052610b499190810190614ca5565b60015b610b5e57600095505050505050610726565b80600081518110610b7157610b71614aa5565b60200260200101519150505b8760400151811015610c1a576001600160a01b03851663a9059cbb33838b60400151610ba99190614a8e565b6040518363ffffffff1660e01b8152600401610bc6929190614b45565b602060405180830381600087803b158015610be057600080fd5b505af1158015610bf4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c189190614b69565b505b86610cda578751805160009190610c3390600190614a8e565b81518110610c4357610c43614aa5565b60200260200101519050806001600160a01b031663a9059cbb610c633390565b8b602001516040518363ffffffff1660e01b8152600401610c85929190614b45565b602060405180830381600087803b158015610c9f57600080fd5b505af1158015610cb3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd79190614b69565b50505b506001979650505050505050565b610cf0612d28565b6000610cfd8260016125c6565b90508061080f5760405162461bcd60e51b81526004016107d290614abb565b610d24612cce565b610d2c612d6e565b565b610d36612cce565b60a080546001600160a01b0319166001600160a01b0392909216919091179055565b610d60612cce565b610d2c6000612dc0565b610d72612cce565b609f80546001600160a01b0319166001600160a01b0392909216919091179055565b6000808360000151600081518110610dae57610dae614aa5565b602090810291909101015160a2549091506001600160a01b031663776062c382333088604001516040518563ffffffff1660e01b8152600401610df49493929190614ae8565b600060405180830381600087803b158015610e0e57600080fd5b505af1158015610e22573d6000803e3d6000fd5b505060a1546001600160a01b038481169116149150508015610e45575083608001515b15610ee05760a1546040808601519051632e1a7d4d60e01b81526001600160a01b0390921691632e1a7d4d91610e819160040190815260200190565b600060405180830381600087803b158015610e9b57600080fd5b505af1158015610eaf573d6000803e3d6000fd5b5050505082610ed657610ed68460400151610ec73390565b6001600160a01b031690612e12565b6001915050610726565b609f54604051636eb1769f60e11b81526000916001600160a01b038085169263dd62ed3e92610f159216903090600401614b12565b60206040518083038186803b158015610f2d57600080fd5b505afa158015610f41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f659190614b2c565b90508460400151811015610ffd57609f5460405163095ea7b360e01b81526001600160a01b038481169263095ea7b392610fa9929091169060001990600401614b45565b602060405180830381600087803b158015610fc357600080fd5b505af1158015610fd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ffb9190614b69565b505b46600061a86a82148061101157508161a869145b9050600081156110e657609f5460208901516040808b015160608c01518c519251636d3420ed60e01b81526001600160a01b0390951694636d3420ed94611062949093929130904290600401614bfa565b600060405180830381600087803b15801561107c57600080fd5b505af19250505080156110b157506040513d6000823e601f3d908101601f191682016040526110ae9190810190614ca5565b60015b6110c357600095505050505050610726565b806000815181106110d6576110d6614aa5565b60200260200101519150506111a7565b609f5460208901516040808b01518b519151632512eca560e11b81526001600160a01b0390941693634a25d94a936111279390929130904290600401614cd9565b600060405180830381600087803b15801561114157600080fd5b505af192505050801561117657506040513d6000823e601f3d908101601f191682016040526111739190810190614ca5565b60015b61118857600095505050505050610726565b8060008151811061119b5761119b614aa5565b60200260200101519150505b8760400151811015611244576001600160a01b03851663a9059cbb33838b604001516111d39190614a8e565b6040518363ffffffff1660e01b81526004016111f0929190614b45565b602060405180830381600087803b15801561120a57600080fd5b505af115801561121e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112429190614b69565b505b8760800151156112bc5760a160009054906101000a90046001600160a01b03166001600160a01b031663d0e30db089602001516040518263ffffffff1660e01b81526004016000604051808303818588803b1580156112a257600080fd5b505af11580156112b6573d6000803e3d6000fd5b50505050505b86610cda5787608001511561138a5787518051600091906112df90600190614a8e565b815181106112ef576112ef614aa5565b60200260200101519050806001600160a01b031663a9059cbb61130f3390565b8b602001516040518363ffffffff1660e01b8152600401611331929190614b45565b602060405180830381600087803b15801561134b57600080fd5b505af115801561135f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113839190614b69565b5050610cda565b610cda8860200151610ec73390565b6113a1612cce565b609880546001600160a01b0319166001600160a01b0392909216919091179055565b6113cb612cce565b610d2c612ecb565b6113db612d28565b60008060006113eb866000612f08565b9250925092506113f83390565b6001600160a01b03167fc5dd8c21802b423a9c822ee9c934f042186e6bb7097a1dd17717343ee84df71484604051611434911515815260200190565b60405180910390a26114468286613c10565b6114508185613c10565b61081b613c3b565b600080600080846000015190506000601482516114759190614a8e565b9050600160601b81602084010151049350600160601b6000602084010151049250346000141561150a5760a2546001600160a01b031663776062c38533308a602001516040518563ffffffff1660e01b81526004016114d79493929190614ae8565b600060405180830381600087803b1580156114f157600080fd5b505af1158015611505573d6000803e3d6000fd5b505050505b60a1546001600160a01b038581169116148015611528575085606001515b156115b15760a1546020870151604051632e1a7d4d60e01b81526001600160a01b0390921691632e1a7d4d916115649160040190815260200190565b600060405180830381600087803b15801561157e57600080fd5b505af1158015611592573d6000803e3d6000fd5b505050506115a58660200151610ec73390565b50600195945050505050565b6000341180156115ce575060a1546001600160a01b038481169116145b156116d35760a160009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b15801561162357600080fd5b505af1158015611637573d6000803e3d6000fd5b5050505050826001600160a01b031663a9059cbb6116523390565b88602001516040518363ffffffff1660e01b8152600401611674929190614b45565b602060405180830381600087803b15801561168e57600080fd5b505af11580156116a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116c69190614b69565b5060019695505050505050565b60a054604051636eb1769f60e11b81526000916001600160a01b038088169263dd62ed3e926117089216903090600401614b12565b60206040518083038186803b15801561172057600080fd5b505afa158015611734573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117589190614b2c565b905086602001518110156117f05760a05460405163095ea7b360e01b81526001600160a01b038781169263095ea7b39261179c929091169060001990600401614b45565b602060405180830381600087803b1580156117b657600080fd5b505af11580156117ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117ee9190614b69565b505b6040805160a08082018352895182523060208084019190915242838501528a0151606083015289830151608083015254915163c04b8d5960e01b815290916000916001600160a01b039091169063c04b8d5990611851908590600401614dbe565b602060405180830381600087803b15801561186b57600080fd5b505af192505050801561189b575060408051601f3d908101601f1916820190925261189891810190614b2c565b60015b6118ae5750600098975050505050505050565b905060a060009054906101000a90046001600160a01b03166001600160a01b03166312210e8a6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561190057600080fd5b505af1158015611914573d6000803e3d6000fd5b505050508860600151156119815760a154604051632e1a7d4d60e01b8152600481018390526001600160a01b0390911690632e1a7d4d90602401600060405180830381600087803b15801561196857600080fd5b505af115801561197c573d6000803e3d6000fd5b505050505b88606001511561199a576119958133610ec7565b611a1c565b60405163a9059cbb60e01b81526001600160a01b0387169063a9059cbb906119c89033908590600401614b45565b602060405180830381600087803b1580156119e257600080fd5b505af11580156119f6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a1a9190614b69565b505b50600198975050505050505050565b611a33612cce565b60a280546001600160a01b0319166001600160a01b0392909216919091179055565b600054610100900460ff1615808015611a755750600054600160ff909116105b80611a8f5750303b158015611a8f575060005460ff166001145b611af25760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016107d2565b6000805460ff191660011790558015611b15576000805461ff0019166101001790555b611b1d613c4c565b611b25613c73565b611b2d613ca3565b609780546001600160a01b03199081166001600160a01b03808d1691909117909255609880548216838c16179055609980548216838b16179055609a80548216838a16179055609b80548216838916179055609c80548216838816179055609d80548216838716179055609e80549091169184169190911790558015611bed576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050505050565b611c00612d28565b6000806000808751905060005b81811015611cb2576000806000611c3d8c8581518110611c2f57611c2f614aa5565b60200260200101518a612f08565b9250925092508580611c4c5750825b604051841515815290965033907fc5dd8c21802b423a9c822ee9c934f042186e6bb7097a1dd17717343ee84df7149060200160405180910390a2611c908289614dd1565b9750611c9c8188614dd1565b965050505080611cab90614de9565b9050611c0d565b5081611cfb5760405162461bcd60e51b81526020600482015260186024820152776e6f207375636365737366756c20657865637574696f6e7360401b60448201526064016107d2565b611d058488613c10565b611d0f8387613c10565b611d17613c3b565b5050505050505050565b611d29612cce565b60a180546001600160a01b0319166001600160a01b0392909216919091179055565b6000808260000151600081518110611d6557611d65614aa5565b60200260200101519050600083600001516001856000015151611d889190614a8e565b81518110611d9857611d98614aa5565b602090810291909101015160a2549091506001600160a01b031663776062c383333088602001516040518563ffffffff1660e01b8152600401611dde9493929190614ae8565b600060405180830381600087803b158015611df857600080fd5b505af1158015611e0c573d6000803e3d6000fd5b5050609f54604051636eb1769f60e11b8152600093506001600160a01b03808716935063dd62ed3e92611e46929116903090600401614b12565b60206040518083038186803b158015611e5e57600080fd5b505afa158015611e72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e969190614b2c565b90508460200151811015611f2e57609f5460405163095ea7b360e01b81526001600160a01b038581169263095ea7b392611eda929091169060001990600401614b45565b602060405180830381600087803b158015611ef457600080fd5b505af1158015611f08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f2c9190614b69565b505b46600061a86a821480611f4257508161a869145b90506000811561201757609f5460208901516040808b015160608c01518c51925163a7b856d360e01b81526001600160a01b039095169463a7b856d394611f93949093929130904290600401614bfa565b600060405180830381600087803b158015611fad57600080fd5b505af1925050508015611fe257506040513d6000823e601f3d908101601f19168201604052611fdf9190810190614ca5565b60015b611ff457506000979650505050505050565b8060008151811061200757612007614aa5565b60200260200101519150506120d8565b609f5460208901516040808b01518b519151634401edf760e11b81526001600160a01b0390941693638803dbee936120589390929130904290600401614cd9565b600060405180830381600087803b15801561207257600080fd5b505af19250505080156120a757506040513d6000823e601f3d908101601f191682016040526120a49190810190614ca5565b60015b6120b957506000979650505050505050565b806000815181106120cc576120cc614aa5565b60200260200101519150505b60405163a9059cbb60e01b81526001600160a01b0386169063a9059cbb906121069033908590600401614b45565b602060405180830381600087803b15801561212057600080fd5b505af1158015612134573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a1c9190614b69565b600080826000015160008151811061217257612172614aa5565b602002602001015190506000836000015160018560000151516121959190614a8e565b815181106121a5576121a5614aa5565b60200260200101519050346000141561228c5760a2546001600160a01b031663776062c383333088602001516040518563ffffffff1660e01b81526004016121f09493929190614ae8565b600060405180830381600087803b15801561220a57600080fd5b505af115801561221e573d6000803e3d6000fd5b505060a1546020870151604051632e1a7d4d60e01b81526001600160a01b039092169350632e1a7d4d92506122599160040190815260200190565b600060405180830381600087803b15801561227357600080fd5b505af1158015612287573d6000803e3d6000fd5b505050505b6000341180156122a9575060a1546001600160a01b038281169116145b156123ac5760a160009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b1580156122fe57600080fd5b505af1158015612312573d6000803e3d6000fd5b5050505050806001600160a01b031663a9059cbb61232d3390565b86602001516040518363ffffffff1660e01b815260040161234f929190614b45565b602060405180830381600087803b15801561236957600080fd5b505af115801561237d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123a19190614b69565b506001949350505050565b46600061a86a8214806123c057508161a869145b90506000811561248d57609f5460408089015160608a01518a519251631325dca760e11b81526001600160a01b039094169363264bb94e9361240a93929130904290600401614e04565b600060405180830381600087803b15801561242457600080fd5b505af192505050801561245957506040513d6000823e601f3d908101601f191682016040526124569190810190614ca5565b60015b61246a575060009695505050505050565b8060008151811061247d5761247d614aa5565b6020026020010151915050612546565b609f5460408089015189519151637ff36ab560e01b81526001600160a01b0390931692637ff36ab5926124c7929130904290600401614e4d565b600060405180830381600087803b1580156124e157600080fd5b505af192505050801561251657506040513d6000823e601f3d908101601f191682016040526125139190810190614ca5565b60015b612527575060009695505050505050565b8060008151811061253a5761253a614aa5565b60200260200101519150505b60405163a9059cbb60e01b81526001600160a01b0385169063a9059cbb906125749033908590600401614b45565b602060405180830381600087803b15801561258e57600080fd5b505af11580156125a2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cda9190614b69565b600080600080856000015190506000601482516125e39190614a8e565b9050600160601b81602084010151049350600160601b600060208401015104925034600014156126785760a2546001600160a01b031663776062c38533308b604001516040518563ffffffff1660e01b81526004016126459493929190614ae8565b600060405180830381600087803b15801561265f57600080fd5b505af1158015612673573d6000803e3d6000fd5b505050505b60a1546001600160a01b038581169116148015612696575086606001515b156127255760a1546020880151604051632e1a7d4d60e01b81526001600160a01b0390921691632e1a7d4d916126d29160040190815260200190565b600060405180830381600087803b1580156126ec57600080fd5b505af1158015612700573d6000803e3d6000fd5b5050505085612718576127188760200151610ec73390565b6001945050505050610726565b600034118015612742575060a1546001600160a01b038481169116145b156128465760a160009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b15801561279757600080fd5b505af11580156127ab573d6000803e3d6000fd5b50505050508561271857602087015160405163a9059cbb60e01b81526001600160a01b0385169163a9059cbb916127e6913391600401614b45565b602060405180830381600087803b15801561280057600080fd5b505af1158015612814573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128389190614b69565b506001945050505050610726565b60a054604051636eb1769f60e11b81526000916001600160a01b038088169263dd62ed3e9261287b9216903090600401614b12565b60206040518083038186803b15801561289357600080fd5b505afa1580156128a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128cb9190614b2c565b905087604001518110156129635760a05460405163095ea7b360e01b81526001600160a01b038781169263095ea7b39261290f929091169060001990600401614b45565b602060405180830381600087803b15801561292957600080fd5b505af115801561293d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129619190614b69565b505b6040805160a080820183528a5182523060208084019190915242838501528b015160608301528a8301516080830152549151631e51809360e31b815290916000916001600160a01b039091169063f28c0498906129c4908590600401614dbe565b602060405180830381600087803b1580156129de57600080fd5b505af1925050508015612a0e575060408051601f3d908101601f19168201909252612a0b91810190614b2c565b60015b612a22576000975050505050505050610726565b905060a060009054906101000a90046001600160a01b03166001600160a01b03166312210e8a6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015612a7457600080fd5b505af1158015612a88573d6000803e3d6000fd5b50505050896060015115612b005760a15460208b0151604051632e1a7d4d60e01b81526001600160a01b0390921691632e1a7d4d91612acd9160040190815260200190565b600060405180830381600087803b158015612ae757600080fd5b505af1158015612afb573d6000803e3d6000fd5b505050505b8960400151811015612b9d576001600160a01b03871663a9059cbb33838d60400151612b2c9190614a8e565b6040518363ffffffff1660e01b8152600401612b49929190614b45565b602060405180830381600087803b158015612b6357600080fd5b505af1158015612b77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b9b9190614b69565b505b88612c4557896060015115612bc057612bbb8a60200151610ec73390565b612c45565b60208a015160405163a9059cbb60e01b81526001600160a01b0388169163a9059cbb91612bf1913391600401614b45565b602060405180830381600087803b158015612c0b57600080fd5b505af1158015612c1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c439190614b69565b505b5060019998505050505050505050565b612c5d612cce565b6001600160a01b038116612cc25760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016107d2565b612ccb81612dc0565b50565b6033546001600160a01b03163314610d2c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016107d2565b60655460ff1615610d2c5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016107d2565b612d76613cd6565b6065805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114612e5f576040519150601f19603f3d011682016040523d82523d6000602084013e612e64565b606091505b5050905080612ec65760405162461bcd60e51b815260206004820152602860248201527f4c69625472616e73666572204261736543757272656e6379207472616e7366656044820152671c8819985a5b195960c21b60648201526084016107d2565b505050565b612ed3612d28565b6065805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612da33390565b6000806000806000612f27876060015188604001518960000151613d1f565b60208901519193509150600288516007811115612f4657612f46614e82565b141561302357609a546040516000916001600160a01b0316908390612f6c908790614e98565b60006040518083038185875af1925050503d8060008114612fa9576040519150601f19603f3d011682016040523d82523d6000602084013e612fae565b606091505b505090508715612fd65780612fd157600080600096509650965050505050613c09565b61301d565b8061301d5760405162461bcd60e51b8152602060048201526017602482015276141d5c98da185cd94814d9585c1bdc9d0819985a5b1959604a1b60448201526064016107d2565b50613bd7565b60018851600781111561303857613038614e82565b1415613109576099546040516000916001600160a01b031690839061305e908790614e98565b60006040518083038185875af1925050503d806000811461309b576040519150601f19603f3d011682016040523d82523d6000602084013e6130a0565b606091505b5050905087156130c35780612fd157600080600096509650965050505050613c09565b8061301d5760405162461bcd60e51b8152602060048201526016602482015275141d5c98da185cd94815de5d995c9b8819985a5b195960521b60448201526064016107d2565b60068851600781111561311e5761311e614e82565b14156131f6576097546040516000916001600160a01b0316908390613144908790614e98565b60006040518083038185875af1925050503d8060008114613181576040519150601f19603f3d011682016040523d82523d6000602084013e613186565b606091505b5050905087156131a95780612fd157600080600096509650965050505050613c09565b8061301d5760405162461bcd60e51b815260206004820152601b60248201527f50757263686173652047686f73744d61726b6574206661696c6564000000000060448201526064016107d2565b60008851600781111561320b5761320b614e82565b14156132dd576098546040516000916001600160a01b0316908390613231908790614e98565b60006040518083038185875af1925050503d806000811461326e576040519150601f19603f3d011682016040523d82523d6000602084013e613273565b606091505b5050905087156132965780612fd157600080600096509650965050505050613c09565b8061301d5760405162461bcd60e51b8152602060048201526017602482015276141d5c98da185cd94814985c9a589b194819985a5b1959604a1b60448201526064016107d2565b6003885160078111156132f2576132f2614e82565b14156137855760008380602001905181019061330e91906153a8565b9050871561339057609b5460405163357a150b60e01b81526001600160a01b039091169063357a150b908490613348908590600401615623565b6000604051808303818588803b15801561336157600080fd5b505af193505050508015613373575060015b61338b57600080600096509650965050505050613c09565b6133f5565b609b5460405163357a150b60e01b81526001600160a01b039091169063357a150b9084906133c2908590600401615623565b6000604051808303818588803b1580156133db57600080fd5b505af11580156133ef573d6000803e3d6000fd5b50505050505b60208101515160005b8181101561377d5760008360200151828151811061341e5761341e614aa5565b602002602001015160200151905060008460200151838151811061344457613444614aa5565b602002602001015160400151905060008560000151838151811061346a5761346a614aa5565b60200260200101516101000151828151811061348857613488614aa5565b60200260200101516020015190506000866000015184815181106134ae576134ae614aa5565b602002602001015160e00151511180156134ea57506000866020015185815181106134db576134db614aa5565b602002602001015160c0015151115b1561353c5761353c818760200151868151811061350957613509614aa5565b602002602001015160c001518860000151868151811061352b5761352b614aa5565b602002602001015160e00151613e1a565b855180518490811061355057613550614aa5565b602002602001015160800151600114156136315760008180602001905181019061357a91906157df565b905060005b815181101561362a57600082828151811061359c5761359c614aa5565b6020026020010151905080600001516001600160a01b03166342842e0e306135c13390565b84602001516040518463ffffffff1660e01b81526004016135e49392919061589d565b600060405180830381600087803b1580156135fe57600080fd5b505af1158015613612573d6000803e3d6000fd5b5050505050808061362290614de9565b91505061357f565b5050613769565b855180518490811061364557613645614aa5565b602002602001015160800151600214156137255760008180602001905181019061366f91906158c1565b905060005b815181101561362a57600082828151811061369157613691614aa5565b6020026020010151905080600001516001600160a01b031663f242432a306136b63390565b846020015185604001516040518563ffffffff1660e01b81526004016136df9493929190615987565b600060405180830381600087803b1580156136f957600080fd5b505af115801561370d573d6000803e3d6000fd5b5050505050808061371d90614de9565b915050613674565b60405162461bcd60e51b81526020600482015260196024820152783ab735b737bbb7103232b632b3b0ba32aa3cb832903c193c9960391b60448201526064016107d2565b5050508061377690614de9565b90506133fe565b505050613bd7565b60048851600781111561379a5761379a614e82565b14156139c6576000806000858060200190518101906137b99190615add565b925092509250891561384357609c54604051635a72594b60e11b81526001600160a01b039091169063b4e4b2969086906137f99087908790600401615bc5565b6000604051808303818588803b15801561381257600080fd5b505af193505050508015613824575060015b61383e576000806000985098509850505050505050613c09565b6138aa565b609c54604051635a72594b60e11b81526001600160a01b039091169063b4e4b2969086906138779087908790600401615bc5565b6000604051808303818588803b15801561389057600080fd5b505af11580156138a4573d6000803e3d6000fd5b50505050505b6001600160e01b031981166339d690a360e11b14156139325760408201516001600160a01b03166342842e0e303385608001516040518463ffffffff1660e01b81526004016138fb9392919061589d565b600060405180830381600087803b15801561391557600080fd5b505af1158015613929573d6000803e3d6000fd5b5050505061377d565b6001600160e01b0319811663025ceed960e61b141561398957604082810151608084015160a08501519251637921219560e11b81526001600160a01b039092169263f242432a926138fb9230923392600401615987565b60405162461bcd60e51b8152602060048201526012602482015271556e6b6e6f776e20746f6b656e207479706560701b60448201526064016107d2565b6005885160078111156139db576139db614e82565b1415613aae57609d546040516000916001600160a01b0316908390613a01908790614e98565b60006040518083038185875af1925050503d8060008114613a3e576040519150601f19603f3d011682016040523d82523d6000602084013e613a43565b606091505b505090508715613a665780612fd157600080600096509650965050505050613c09565b8061301d5760405162461bcd60e51b8152602060048201526018602482015277141d5c98da185cd94814dd591bd4ddd85c0819985a5b195960421b60448201526064016107d2565b600788516007811115613ac357613ac3614e82565b1415613b9457609e546040516000916001600160a01b0316908390613ae9908790614e98565b60006040518083038185875af1925050503d8060008114613b26576040519150601f19603f3d011682016040523d82523d6000602084013e613b2b565b606091505b505090508715613b4e5780612fd157600080600096509650965050505050613c09565b8061301d5760405162461bcd60e51b8152602060048201526016602482015275141d5c98da185cd948189b1d5c9a5bc819985a5b195960521b60448201526064016107d2565b60405162461bcd60e51b8152602060048201526018602482015277556e6b6e6f776e2070757263686173652064657461696c7360401b60448201526064016107d2565b613be5828960200151613ec7565b600080613bfa8a604001518b60200151613f71565b60019950909750955050505050505b9250925092565b600082118015613c2857506001600160a01b03811615155b15613c3757613c378183612e12565b5050565b478015612ccb57612ccb3382612e12565b600054610100900460ff16610d2c5760405162461bcd60e51b81526004016107d290615d1f565b600054610100900460ff16613c9a5760405162461bcd60e51b81526004016107d290615d1f565b610d2c33612dc0565b600054610100900460ff16613cca5760405162461bcd60e51b81526004016107d290615d1f565b6065805460ff19169055565b60655460ff16610d2c5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016107d2565b6060806000602085901c61ffff166001811115613d3e57613d3e614e82565b905060606000826001811115613d5657613d56614e82565b1415613d68578693509150613e129050565b6001826001811115613d7c57613d7c614e82565b1415613dca57600087806020019051810190613d989190615d6a565b9050613da386613fa2565b15613dbe578060000151816020015194509450505050613e12565b5193509150613e129050565b60405162461bcd60e51b815260206004820152601a60248201527f756e6b6e6f776e206164646974696f6e616c446174615479706500000000000060448201526064016107d2565b935093915050565b8151835114613e2857600080fd5b8051835114613e3657600080fd5b825160005b81811015613ec057828181518110613e5557613e55614aa5565b01602001516001600160f81b03191615613eb057838181518110613e7b57613e7b614aa5565b602001015160f81c60f81b858281518110613e9857613e98614aa5565b60200101906001600160f81b031916908160001a9053505b613eb981614de9565b9050613e3b565b5050505050565b815160005b81811015613f6b576000848281518110613ee857613ee8614aa5565b60200260200101511115613f5b576000848281518110613f0a57613f0a614aa5565b60200260200101519050600060a0868481518110613f2a57613f2a614aa5565b6020026020010151901c90506000613f4b8287613fea90919063ffffffff16565b9050613f578184613c10565b5050505b613f6481614de9565b9050613ecc565b50505050565b60008061ffff601085901c8116908516613f8b8583613fea565b613f958683613fea565b9350935050509250929050565b60006005826007811115613fb857613fb8614e82565b1480613fd557506004826007811115613fd357613fd3614e82565b145b15613fe257506001919050565b506000919050565b6000612710613ff98385615dfa565b6140039190615e19565b9392505050565b6001600160e01b031981168114612ccb57600080fd5b60006020828403121561403257600080fd5b81356140038161400a565b6001600160a01b0381168114612ccb57600080fd5b60006020828403121561406457600080fd5b81356140038161403d565b634e487b7160e01b600052604160045260246000fd5b604051608081016001600160401b03811182821017156140a7576140a761406f565b60405290565b60405160a081016001600160401b03811182821017156140a7576140a761406f565b604080519081016001600160401b03811182821017156140a7576140a761406f565b6040516101a081016001600160401b03811182821017156140a7576140a761406f565b60405161016081016001600160401b03811182821017156140a7576140a761406f565b60405160c081016001600160401b03811182821017156140a7576140a761406f565b604051606081016001600160401b03811182821017156140a7576140a761406f565b60405161020081016001600160401b03811182821017156140a7576140a761406f565b604051601f8201601f191681016001600160401b03811182821017156141c6576141c661406f565b604052919050565b60006001600160401b038211156141e7576141e761406f565b50601f01601f191660200190565b600082601f83011261420657600080fd5b8135614219614214826141ce565b61419e565b81815284602083860101111561422e57600080fd5b816020850160208301376000918101602001919091529392505050565b6000806000806080858703121561426157600080fd5b843561426c8161403d565b9350602085013561427c8161403d565b92506040850135915060608501356001600160401b0381111561429e57600080fd5b6142aa878288016141f5565b91505092959194509250565b60006001600160401b038211156142cf576142cf61406f565b5060051b60200190565b60088110612ccb57600080fd5b6000608082840312156142f857600080fd5b614300614085565b9050813561430d816142d9565b80825250602082013560208201526040820135604082015260608201356001600160401b0381111561433e57600080fd5b61434a848285016141f5565b60608301525092915050565b600082601f83011261436757600080fd5b81356020614377614214836142b6565b82815260059290921b8401810191818101908684111561439657600080fd5b8286015b848110156143d55780356001600160401b038111156143b95760008081fd5b6143c78986838b01016142e6565b84525091830191830161439a565b509695505050505050565b8015158114612ccb57600080fd5b80356143f9816143e0565b919050565b600082601f83011261440f57600080fd5b8135602061441f614214836142b6565b82815260059290921b8401810191818101908684111561443e57600080fd5b8286015b848110156143d55780358352918301918301614442565b600060a0828403121561446b57600080fd5b6144736140ad565b905081356001600160401b038082111561448c57600080fd5b818401915084601f8301126144a057600080fd5b813560206144b0614214836142b6565b82815260059290921b840181019181810190888411156144cf57600080fd5b948201945b838610156144f65785356144e78161403d565b825294820194908201906144d4565b86525085810135908501525060408085013590840152606084013591508082111561452057600080fd5b5061452d848285016143fe565b60608301525061453f608083016143ee565b608082015292915050565b600080600080600060a0868803121561456257600080fd5b85356001600160401b038082111561457957600080fd5b61458589838a01614356565b9650602088013591506145978261403d565b9094506040870135906145a98261403d565b9093506060870135906145bb826143e0565b909250608087013590808211156145d157600080fd5b506145de88828901614459565b9150509295509295909350565b600080604083850312156145fe57600080fd5b82356001600160401b0381111561461457600080fd5b61462085828601614459565b9250506020830135614631816143e0565b809150509250929050565b60006080828403121561464e57600080fd5b614656614085565b905081356001600160401b0381111561466e57600080fd5b61467a848285016141f5565b8252506020820135602082015260408201356040820152606082013561469f816143e0565b606082015292915050565b600080600080600060a086880312156146c257600080fd5b85356001600160401b03808211156146d957600080fd5b6146e589838a01614356565b9650602088013591506146f78261403d565b9094506040870135906147098261403d565b90935060608701359061471b826143e0565b9092506080870135908082111561473157600080fd5b506145de8882890161463c565b6001600160a01b03169052565b60008060006060848603121561476057600080fd5b83356001600160401b0381111561477657600080fd5b614782868287016142e6565b93505060208401356147938161403d565b915060408401356147a38161403d565b809150509250925092565b6000602082840312156147c057600080fd5b81356001600160401b038111156147d657600080fd5b6147e28482850161463c565b949350505050565b600080600080600080600080610100898b03121561480757600080fd5b88356148128161403d565b975060208901356148228161403d565b965060408901356148328161403d565b955060608901356148428161403d565b945060808901356148528161403d565b935060a08901356148628161403d565b925060c08901356148728161403d565b915060e08901356148828161403d565b809150509295985092959890939650565b600080600080608085870312156148a957600080fd5b84356001600160401b038111156148bf57600080fd5b6148cb87828801614356565b94505060208501356148dc8161403d565b925060408501356148ec8161403d565b915060608501356148fc816143e0565b939692955090935050565b600080600080600060a0868803121561491f57600080fd5b853561492a8161403d565b9450602086013561493a8161403d565b935060408601356001600160401b038082111561495657600080fd5b61496289838a016143fe565b9450606088013591508082111561497857600080fd5b61498489838a016143fe565b9350608088013591508082111561499a57600080fd5b506145de888289016141f5565b6000602082840312156149b957600080fd5b81356001600160401b038111156149cf57600080fd5b6147e284828501614459565b600080604083850312156149ee57600080fd5b82356001600160401b03811115614a0457600080fd5b6146208582860161463c565b600080600080600060a08688031215614a2857600080fd5b8535614a338161403d565b94506020860135614a438161403d565b9350604086013592506060860135915060808601356001600160401b03811115614a6c57600080fd5b6145de888289016141f5565b634e487b7160e01b600052601160045260246000fd5b600082821015614aa057614aa0614a78565b500390565b634e487b7160e01b600052603260045260246000fd5b6020808252601390820152721cddd85c081b9bdd081cdd58d8d95cdcd99d5b606a1b604082015260600190565b6001600160a01b039485168152928416602084015292166040820152606081019190915260800190565b6001600160a01b0392831681529116602082015260400190565b600060208284031215614b3e57600080fd5b5051919050565b6001600160a01b03929092168252602082015260400190565b80516143f9816143e0565b600060208284031215614b7b57600080fd5b8151614003816143e0565b600081518084526020808501945080840160005b83811015614bb657815187529582019590820190600101614b9a565b509495945050505050565b600081518084526020808501945080840160005b83811015614bb65781516001600160a01b031687529582019590820190600101614bd5565b86815285602082015260c060408201526000614c1960c0830187614b86565b8281036060840152614c2b8187614bc1565b6001600160a01b03959095166080840152505060a00152949350505050565b600082601f830112614c5b57600080fd5b81516020614c6b614214836142b6565b82815260059290921b84018101918181019086841115614c8a57600080fd5b8286015b848110156143d55780518352918301918301614c8e565b600060208284031215614cb757600080fd5b81516001600160401b03811115614ccd57600080fd5b6147e284828501614c4a565b85815284602082015260a060408201526000614cf860a0830186614bc1565b6001600160a01b0394909416606083015250608001529392505050565b60005b83811015614d30578181015183820152602001614d18565b83811115613f6b5750506000910152565b60008151808452614d59816020860160208601614d15565b601f01601f19169290920160200192915050565b6000815160a08452614d8260a0850182614d41565b6020848101516001600160a01b031690860152604080850151908601526060808501519086015260809384015193909401929092525090919050565b6020815260006140036020830184614d6d565b60008219821115614de457614de4614a78565b500190565b6000600019821415614dfd57614dfd614a78565b5060010190565b85815260a060208201526000614e1d60a0830187614b86565b8281036040840152614e2f8187614bc1565b6001600160a01b039590951660608401525050608001529392505050565b848152608060208201526000614e666080830186614bc1565b6001600160a01b03949094166040830152506060015292915050565b634e487b7160e01b600052602160045260246000fd5b60008251614eaa818460208701614d15565b9190910192915050565b80516143f98161403d565b600082601f830112614ed057600080fd5b8151614ede614214826141ce565b818152846020838601011115614ef357600080fd5b6147e2826020830160208701614d15565b600082601f830112614f1557600080fd5b81516020614f25614214836142b6565b82815260059290921b84018101918181019086841115614f4457600080fd5b8286015b848110156143d55780516001600160401b0380821115614f685760008081fd5b908801906040828b03601f1901811315614f825760008081fd5b614f8a6140cf565b838801518152908301519082821115614fa35760008081fd5b614fb18c8984870101614ebf565b818901528652505050918301918301614f48565b805160ff811681146143f957600080fd5b600082601f830112614fe757600080fd5b81516020614ff7614214836142b6565b82815260059290921b8401810191818101908684111561501657600080fd5b8286015b848110156143d55780516001600160401b038082111561503a5760008081fd5b908801906101a0828b03601f19018113156150555760008081fd5b61505d6140f1565b8784015181526040615070818601614eb4565b89830152606080860151828401526080915081860151818401525060a0808601518284015260c0915081860151818401525060e06150af818701614eb4565b82840152610100915081860151858111156150ca5760008081fd5b6150d88f8c838a0101614ebf565b82850152505061012080860151858111156150f35760008081fd5b6151018f8c838a0101614f04565b838501525061014094508486015181840152505061016080850151848301526101809350615130848601614fc5565b9082015261513f848301614fc5565b928101929092525084525091830191830161501a565b80516143f9816142d9565b600082601f83011261517157600080fd5b81516020615181614214836142b6565b82815260069290921b840181019181810190868411156151a057600080fd5b8286015b848110156143d557604081890312156151bd5760008081fd5b6151c56140cf565b81518152848201516151d68161403d565b818601528352918301916040016151a4565b600082601f8301126151f957600080fd5b81516020615209614214836142b6565b82815260059290921b8401810191818101908684111561522857600080fd5b8286015b848110156143d55780516001600160401b038082111561524c5760008081fd5b90880190610160828b03601f19018113156152675760008081fd5b61526f614114565b61527a888501615155565b815260408085015189830152606080860151828401526080915081860151818401525060a0808601518284015260c091506152b6828701614eb4565b9083015260e085810151858111156152ce5760008081fd5b6152dc8f8c838a0101614ebf565b83850152506101009150818601518184015250610120808601518284015261014091508186015181840152508285015192508383111561531c5760008081fd5b61532a8d8a85880101615160565b90820152865250505091830191830161522c565b600060c0828403121561535057600080fd5b615358614137565b905081518152602082015160208201526040820151604082015260608201516060820152608082015161538a8161403d565b608082015260a082015161539d816143e0565b60a082015292915050565b6000602082840312156153ba57600080fd5b81516001600160401b03808211156153d157600080fd5b9083019061016082860312156153e657600080fd5b6153ee614137565b8251828111156153fd57600080fd5b61540987828601614fd6565b82525060208301518281111561541e57600080fd5b61542a878286016151e8565b60208301525061543d866040850161533e565b6040820152610100830151606082015261012083015160808201526154656101408401614fc5565b60a082015295945050505050565b600081518084526020808501808196508360051b8101915082860160005b858110156154cf57828403895281518051855285015160408686018190526154bb81870183614d41565b9a87019a9550505090840190600101615491565b5091979650505050505050565b600881106154fa57634e487b7160e01b600052602160045260246000fd5b9052565b600081518084526020808501945080840160005b83811015614bb6578151805188528301516001600160a01b03168388015260409096019590820190600101615512565b600081518084526020808501808196508360051b8101915082860160005b858110156154cf578284038952815161016061557d8683516154dc565b818701518688015260408083015190870152606080830151908701526080808301519087015260a0808301516155b58289018261473e565b505060c08083015182828901526155ce83890182614d41565b60e085810151908a015261010080860151908a015261012080860151908a015261014094850151898203958a0195909552925061560f9150829050836154fe565b9a87019a9550505090840190600101615560565b60006020808352610180808401855161016080858801528282518085526101a094508489019150848160051b8a0101878501945060005b8281101561573e578a820361019f19018452855180518352898101516156828b85018261473e565b5060408181015190840152606080820151908401526080808201519084015260a0808201519084015260c0808201516156bd8286018261473e565b505060e08082015189828601526156d68a860182614d41565b91505061010080830151858303828701526156f18382615473565b925050506101208083015181860152506101408083015181860152508682015161571f8886018260ff169052565b509089015160ff1692890192909252948801949288019260010161565a565b50968a0151898803601f190160408b01529661575a8189615542565b9750505050604088015193506157b06060880185805182526020808201519083015260408082015190830152606080820151908301526080808201516001600160a01b03169083015260a0908101511515910152565b6060880151610120880152608088015161014088015260a09097015160ff169690950195909552509392505050565b600060208083850312156157f257600080fd5b82516001600160401b0381111561580857600080fd5b8301601f8101851361581957600080fd5b8051615827614214826142b6565b81815260069190911b8201830190838101908783111561584657600080fd5b928401925b8284101561589257604084890312156158645760008081fd5b61586c6140cf565b84516158778161403d565b8152848601518682015282526040909301929084019061584b565b979650505050505050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b600060208083850312156158d457600080fd5b82516001600160401b038111156158ea57600080fd5b8301601f810185136158fb57600080fd5b8051615909614214826142b6565b8181526060918202830184019184820191908884111561592857600080fd5b938501935b8385101561597b5780858a0312156159455760008081fd5b61594d614159565b85516159588161403d565b81528587015187820152604080870151908201528352938401939185019161592d565b50979650505050505050565b6001600160a01b0394851681529290931660208301526040820152606081019190915260a06080820181905260009082015260c00190565b600061020082840312156159d257600080fd5b6159da61417b565b90506159e582614b5e565b81526159f360208301614eb4565b6020820152615a0460408301614eb4565b6040820152606082015160608201526080820151608082015260a082015160a0820152615a3360c08301614eb4565b60c0820152615a4460e08301614eb4565b60e08201526101008281015190820152610120808301519082015261014080830151908201526101608083015190820152610180808301516001600160401b03811115615a9057600080fd5b615a9c85828601614ebf565b8284015250506101a0615ab0818401614fc5565b908201526101c082810151908201526101e09182015191810191909152919050565b80516143f98161400a565b600080600060608486031215615af257600080fd5b83516001600160401b0380821115615b0957600080fd5b9085019060c08288031215615b1d57600080fd5b615b25614137565b8251615b30816143e0565b81526020830151615b408161403d565b8060208301525060408301516040820152606083015160608201526080830151608082015260a083015182811115615b7757600080fd5b615b8389828601614ebf565b60a0830152506020870151909550915080821115615ba057600080fd5b50615bad868287016159bf565b925050615bbc60408501615ad2565b90509250925092565b60408152600061010084511515604084015260018060a01b03602086015116606084015260408501516080840152606085015160a0840152608085015160c084015260a085015160c060e0850152615c1f82850182614d41565b848103602086015285511515815290506102006020860151615c44602084018261473e565b506040860151615c57604084018261473e565b50606086015160608301526080860151608083015260a086015160a083015260c0860151615c8860c084018261473e565b5060e0860151615c9b60e084018261473e565b50858301519282019290925261012080860151908201526101408086015190820152610160808601519082015261018080860151818301849052909290615ce482840182614d41565b935050506101a080860151615cfd8284018260ff169052565b50506101c085810151908201526101e094850151940193909352509092915050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600060208284031215615d7c57600080fd5b81516001600160401b0380821115615d9357600080fd5b9083019060408286031215615da757600080fd5b615daf6140cf565b825182811115615dbe57600080fd5b615dca87828601614ebf565b825250602083015182811115615ddf57600080fd5b615deb87828601614c4a565b60208301525095945050505050565b6000816000190483118215151615615e1457615e14614a78565b500290565b600082615e3657634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220d5926290e6ea91af372d524d217987e2646fd13a791e24a2ffe53568e10d049b64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "bulkPurchase((uint8,uint256,uint256,bytes)[],address,address,bool)": {
        "params": {
          "allowFail": "- true if fails while executing orders are allowed, false if fail of a single order means fail of the whole batch",
          "feeRecipientFirst": "- address of the first fee recipient",
          "feeRecipientSecond": "- address of the second fee recipient",
          "purchaseDetails": "- array of details about the purchases (more info in PurchaseDetails struct)"
        }
      },
      "bulkPurchaseWithSwap((uint8,uint256,uint256,bytes)[],address,address,bool,(bytes,uint256,uint256,bool))": {
        "params": {
          "allowFail": "- true if fails while executing orders are allowed, false if fail of a single order means fail of the whole batch",
          "feeRecipientFirst": "- address of the first fee recipient",
          "feeRecipientSecond": "- address of the second fee recipient",
          "purchaseDetails": "- array of details about the purchases (more info in PurchaseDetails struct)",
          "swapDetails": "- swapDetails v3"
        }
      },
      "bulkPurchaseWithV2Swap((uint8,uint256,uint256,bytes)[],address,address,bool,(address[],uint256,uint256,uint256[],bool))": {
        "params": {
          "allowFail": "- true if fails while executing orders are allowed, false if fail of a single order means fail of the whole batch",
          "feeRecipientFirst": "- address of the first fee recipient",
          "feeRecipientSecond": "- address of the second fee recipient",
          "purchaseDetails": "- array of details about the purchases (more info in PurchaseDetails struct)",
          "swapDetails": "- swapDetails v2"
        }
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "singlePurchase((uint8,uint256,uint256,bytes),address,address)": {
        "params": {
          "feeRecipientFirst": "- address of the first fee recipient",
          "feeRecipientSecond": "- address of the second fee recipient",
          "purchaseDetails": "- details about the purchase (more info in PurchaseDetails struct)"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "swapExactTokensForTokens((bytes,uint256,uint256,bool))": {
        "params": {
          "swapDetails": "swapDetails required"
        }
      },
      "swapTokensForExactTokens((bytes,uint256,uint256,bool),bool)": {
        "params": {
          "combined": "combined swap + buy - if true funds are not sent back to sender buy kept for trade",
          "swapDetails": "swapDetails required"
        }
      },
      "swapV2ExactETHOrWETHForTokens((address[],uint256,uint256,uint256[],bool))": {
        "params": {
          "swapDetails": "swapDetails required"
        }
      },
      "swapV2ExactTokensForTokens((address[],uint256,uint256,uint256[],bool))": {
        "params": {
          "swapDetails": "swapDetails required"
        }
      },
      "swapV2TokensForExactETHOrWETH((address[],uint256,uint256,uint256[],bool),bool)": {
        "params": {
          "combined": "combined swap + buy - if true funds are not sent back to sender buy kept for trade",
          "swapDetails": "swapDetails required"
        }
      },
      "swapV2TokensForExactTokens((address[],uint256,uint256,uint256[],bool),bool)": {
        "params": {
          "combined": "combined swap + buy - if true funds are not sent back to sender buy kept for trade",
          "swapDetails": "swapDetails required"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "bulkPurchase((uint8,uint256,uint256,bytes)[],address,address,bool)": {
        "notice": "executes an array of purchases"
      },
      "bulkPurchaseWithSwap((uint8,uint256,uint256,bytes)[],address,address,bool,(bytes,uint256,uint256,bool))": {
        "notice": "executes an array of purchases - with swap v3"
      },
      "bulkPurchaseWithV2Swap((uint8,uint256,uint256,bytes)[],address,address,bool,(address[],uint256,uint256,uint256[],bool))": {
        "notice": "executes an array of purchases - with swap v2 - tokens for tokens or tokens for eth/weth"
      },
      "pause()": {
        "notice": "Pause the contract"
      },
      "setRarible(address)": {
        "notice": "temp for upgrade - to remove once initialized"
      },
      "setTransferProxy(address)": {
        "notice": "Set erc20 transfer proxy"
      },
      "setUniswapV2(address)": {
        "notice": "Set uniswap v2 router"
      },
      "setUniswapV3(address)": {
        "notice": "Set uniswap v3 router"
      },
      "setWrapped(address)": {
        "notice": "Set wrapped token"
      },
      "singlePurchase((uint8,uint256,uint256,bytes),address,address)": {
        "notice": "executes a single purchase"
      },
      "swapExactTokensForTokens((bytes,uint256,uint256,bool))": {
        "notice": "swaps exact tokens for tokens - uniswap v3"
      },
      "swapTokensForExactTokens((bytes,uint256,uint256,bool),bool)": {
        "notice": "swaps tokens for exact tokens - uniswap v3"
      },
      "swapV2ExactETHOrWETHForTokens((address[],uint256,uint256,uint256[],bool))": {
        "notice": "swaps exact ETH or WETH for tokens - uniswap v2"
      },
      "swapV2ExactTokensForTokens((address[],uint256,uint256,uint256[],bool))": {
        "notice": "swaps exact tokens for tokens - uniswap v2"
      },
      "swapV2TokensForExactETHOrWETH((address[],uint256,uint256,uint256[],bool),bool)": {
        "notice": "swaps tokens for exact ETH or WETH - uniswap v2"
      },
      "swapV2TokensForExactTokens((address[],uint256,uint256,uint256[],bool),bool)": {
        "notice": "swaps tokens for exact tokens - uniswap v2"
      },
      "unpause()": {
        "notice": "Unpause the contract"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 138,
        "contract": "src/exchange-wrapper/ExchangeWrapper.sol:ExchangeWrapper",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 141,
        "contract": "src/exchange-wrapper/ExchangeWrapper.sol:ExchangeWrapper",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1326,
        "contract": "src/exchange-wrapper/ExchangeWrapper.sol:ExchangeWrapper",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "src/exchange-wrapper/ExchangeWrapper.sol:ExchangeWrapper",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "src/exchange-wrapper/ExchangeWrapper.sol:ExchangeWrapper",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 303,
        "contract": "src/exchange-wrapper/ExchangeWrapper.sol:ExchangeWrapper",
        "label": "_paused",
        "offset": 0,
        "slot": "101",
        "type": "t_bool"
      },
      {
        "astId": 408,
        "contract": "src/exchange-wrapper/ExchangeWrapper.sol:ExchangeWrapper",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2362,
        "contract": "src/exchange-wrapper/ExchangeWrapper.sol:ExchangeWrapper",
        "label": "exchangeV2",
        "offset": 0,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 2364,
        "contract": "src/exchange-wrapper/ExchangeWrapper.sol:ExchangeWrapper",
        "label": "rarible",
        "offset": 0,
        "slot": "152",
        "type": "t_address"
      },
      {
        "astId": 2366,
        "contract": "src/exchange-wrapper/ExchangeWrapper.sol:ExchangeWrapper",
        "label": "wyvern",
        "offset": 0,
        "slot": "153",
        "type": "t_address"
      },
      {
        "astId": 2368,
        "contract": "src/exchange-wrapper/ExchangeWrapper.sol:ExchangeWrapper",
        "label": "seaport",
        "offset": 0,
        "slot": "154",
        "type": "t_address"
      },
      {
        "astId": 2370,
        "contract": "src/exchange-wrapper/ExchangeWrapper.sol:ExchangeWrapper",
        "label": "x2y2",
        "offset": 0,
        "slot": "155",
        "type": "t_address"
      },
      {
        "astId": 2372,
        "contract": "src/exchange-wrapper/ExchangeWrapper.sol:ExchangeWrapper",
        "label": "looksrare",
        "offset": 0,
        "slot": "156",
        "type": "t_address"
      },
      {
        "astId": 2374,
        "contract": "src/exchange-wrapper/ExchangeWrapper.sol:ExchangeWrapper",
        "label": "sudoswap",
        "offset": 0,
        "slot": "157",
        "type": "t_address"
      },
      {
        "astId": 2376,
        "contract": "src/exchange-wrapper/ExchangeWrapper.sol:ExchangeWrapper",
        "label": "blur",
        "offset": 0,
        "slot": "158",
        "type": "t_address"
      },
      {
        "astId": 2379,
        "contract": "src/exchange-wrapper/ExchangeWrapper.sol:ExchangeWrapper",
        "label": "uniswapRouterV2",
        "offset": 0,
        "slot": "159",
        "type": "t_contract(ISwapRouterV2)5584"
      },
      {
        "astId": 2382,
        "contract": "src/exchange-wrapper/ExchangeWrapper.sol:ExchangeWrapper",
        "label": "uniswapRouterV3",
        "offset": 0,
        "slot": "160",
        "type": "t_contract(ISwapRouterV3)5634"
      },
      {
        "astId": 2384,
        "contract": "src/exchange-wrapper/ExchangeWrapper.sol:ExchangeWrapper",
        "label": "wrappedToken",
        "offset": 0,
        "slot": "161",
        "type": "t_address"
      },
      {
        "astId": 2386,
        "contract": "src/exchange-wrapper/ExchangeWrapper.sol:ExchangeWrapper",
        "label": "erc20TransferProxy",
        "offset": 0,
        "slot": "162",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ISwapRouterV2)5584": {
        "encoding": "inplace",
        "label": "contract ISwapRouterV2",
        "numberOfBytes": "20"
      },
      "t_contract(ISwapRouterV3)5634": {
        "encoding": "inplace",
        "label": "contract ISwapRouterV3",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}