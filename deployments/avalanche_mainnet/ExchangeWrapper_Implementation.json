{
  "address": "0xAB8944314D0eA90fba56644A4989Dd9924F56748",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "result",
          "type": "bool"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "Execution",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_exchangeV2",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rarible",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_seaport_1_4",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_seaport_1_5",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_x2y2",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_looksrare",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_sudoswap",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_blur",
          "type": "address"
        }
      ],
      "name": "__ExchangeWrapper_init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "blur",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "enum ExchangeWrapperCore.Markets",
              "name": "marketId",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "paymentToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "fees",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct ExchangeWrapperCore.PurchaseDetails[]",
          "name": "purchaseDetails",
          "type": "tuple[]"
        },
        {
          "internalType": "address",
          "name": "feeRecipientFirst",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "feeRecipientSecond",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "allowFail",
          "type": "bool"
        }
      ],
      "name": "bulkPurchase",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "enum ExchangeWrapperCore.Markets",
              "name": "marketId",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "paymentToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "fees",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct ExchangeWrapperCore.PurchaseDetails[]",
          "name": "purchaseDetails",
          "type": "tuple[]"
        },
        {
          "internalType": "address",
          "name": "feeRecipientFirst",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "feeRecipientSecond",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "allowFail",
          "type": "bool"
        },
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "path",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountInMaximum",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "unwrap",
              "type": "bool"
            }
          ],
          "internalType": "struct ExchangeWrapperCore.SwapDetailsIn",
          "name": "swapDetails",
          "type": "tuple"
        }
      ],
      "name": "bulkPurchaseWithSwap",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "enum ExchangeWrapperCore.Markets",
              "name": "marketId",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "paymentToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "fees",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct ExchangeWrapperCore.PurchaseDetails[]",
          "name": "purchaseDetails",
          "type": "tuple[]"
        },
        {
          "internalType": "address",
          "name": "feeRecipientFirst",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "feeRecipientSecond",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "allowFail",
          "type": "bool"
        },
        {
          "components": [
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountInMaximum",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "binSteps",
              "type": "uint256[]"
            },
            {
              "internalType": "bool",
              "name": "unwrap",
              "type": "bool"
            }
          ],
          "internalType": "struct ExchangeWrapperCore.SwapV2DetailsIn",
          "name": "swapDetails",
          "type": "tuple"
        }
      ],
      "name": "bulkPurchaseWithV2Swap",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "erc20TransferProxy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exchangeV2",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "looksrare",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ExchangeWrapperCore.Markets",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "proxies",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rarible",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "seaport_1_4",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "seaport_1_5",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_blur",
          "type": "address"
        }
      ],
      "name": "setBlur",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_looksrare",
          "type": "address"
        }
      ],
      "name": "setLooksRare",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ExchangeWrapperCore.Markets",
          "name": "marketId",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "proxy",
          "type": "address"
        }
      ],
      "name": "setMarketProxy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rarible",
          "type": "address"
        }
      ],
      "name": "setRarible",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_seaport",
          "type": "address"
        }
      ],
      "name": "setSeaport14",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_seaport",
          "type": "address"
        }
      ],
      "name": "setSeaport15",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sudoswap",
          "type": "address"
        }
      ],
      "name": "setSudoSwap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_erc20TransferProxy",
          "type": "address"
        }
      ],
      "name": "setTransferProxy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISwapRouterV2",
          "name": "_uniswapRouterV2",
          "type": "address"
        }
      ],
      "name": "setUniswapV2",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISwapRouterV3",
          "name": "_uniswapRouterV3",
          "type": "address"
        }
      ],
      "name": "setUniswapV3",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_wrappedToken",
          "type": "address"
        }
      ],
      "name": "setWrapped",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_x2y2",
          "type": "address"
        }
      ],
      "name": "setX2Y2",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "enum ExchangeWrapperCore.Markets",
              "name": "marketId",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "paymentToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "fees",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct ExchangeWrapperCore.PurchaseDetails",
          "name": "purchaseDetails",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "feeRecipientFirst",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "feeRecipientSecond",
          "type": "address"
        }
      ],
      "name": "singlePurchase",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sudoswap",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniswapRouterV2",
      "outputs": [
        {
          "internalType": "contract ISwapRouterV2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniswapRouterV3",
      "outputs": [
        {
          "internalType": "contract ISwapRouterV3",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wrappedToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "x2y2",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x8111568ba0cafbce475ab16fda92837783976c32df7feaf2a344ad9cc99e260b",
  "receipt": {
    "to": null,
    "from": "0x07714A8BF073510996D948D8aA39f8E32627fe62",
    "contractAddress": "0xAB8944314D0eA90fba56644A4989Dd9924F56748",
    "transactionIndex": 94,
    "gasUsed": "5275091",
    "logsBloom": "0x
    "blockHash": "0xc8507029386772e2d706b1b791435fd9eb65ddad8596255fe10f1c4946faa495",
    "transactionHash": "0x8111568ba0cafbce475ab16fda92837783976c32df7feaf2a344ad9cc99e260b",
    "logs": [],
    "blockNumber": 38773377,
    "cumulativeGasUsed": "8059251",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 4,
  "solcInputHash": "b409e2163f540739a526753a3a6c5675",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"Execution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_exchangeV2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rarible\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_seaport_1_4\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_seaport_1_5\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_x2y2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_looksrare\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sudoswap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_blur\",\"type\":\"address\"}],\"name\":\"__ExchangeWrapper_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blur\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum ExchangeWrapperCore.Markets\",\"name\":\"marketId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct ExchangeWrapperCore.PurchaseDetails[]\",\"name\":\"purchaseDetails\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"feeRecipientFirst\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeRecipientSecond\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowFail\",\"type\":\"bool\"}],\"name\":\"bulkPurchase\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum ExchangeWrapperCore.Markets\",\"name\":\"marketId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct ExchangeWrapperCore.PurchaseDetails[]\",\"name\":\"purchaseDetails\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"feeRecipientFirst\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeRecipientSecond\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowFail\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMaximum\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"unwrap\",\"type\":\"bool\"}],\"internalType\":\"struct ExchangeWrapperCore.SwapDetailsIn\",\"name\":\"swapDetails\",\"type\":\"tuple\"}],\"name\":\"bulkPurchaseWithSwap\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum ExchangeWrapperCore.Markets\",\"name\":\"marketId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct ExchangeWrapperCore.PurchaseDetails[]\",\"name\":\"purchaseDetails\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"feeRecipientFirst\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeRecipientSecond\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowFail\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMaximum\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"binSteps\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"unwrap\",\"type\":\"bool\"}],\"internalType\":\"struct ExchangeWrapperCore.SwapV2DetailsIn\",\"name\":\"swapDetails\",\"type\":\"tuple\"}],\"name\":\"bulkPurchaseWithV2Swap\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc20TransferProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeV2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"looksrare\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ExchangeWrapperCore.Markets\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"proxies\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rarible\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seaport_1_4\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seaport_1_5\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_blur\",\"type\":\"address\"}],\"name\":\"setBlur\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_looksrare\",\"type\":\"address\"}],\"name\":\"setLooksRare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ExchangeWrapperCore.Markets\",\"name\":\"marketId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"}],\"name\":\"setMarketProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rarible\",\"type\":\"address\"}],\"name\":\"setRarible\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_seaport\",\"type\":\"address\"}],\"name\":\"setSeaport14\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_seaport\",\"type\":\"address\"}],\"name\":\"setSeaport15\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sudoswap\",\"type\":\"address\"}],\"name\":\"setSudoSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20TransferProxy\",\"type\":\"address\"}],\"name\":\"setTransferProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISwapRouterV2\",\"name\":\"_uniswapRouterV2\",\"type\":\"address\"}],\"name\":\"setUniswapV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISwapRouterV3\",\"name\":\"_uniswapRouterV3\",\"type\":\"address\"}],\"name\":\"setUniswapV3\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wrappedToken\",\"type\":\"address\"}],\"name\":\"setWrapped\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_x2y2\",\"type\":\"address\"}],\"name\":\"setX2Y2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum ExchangeWrapperCore.Markets\",\"name\":\"marketId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct ExchangeWrapperCore.PurchaseDetails\",\"name\":\"purchaseDetails\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"feeRecipientFirst\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeRecipientSecond\",\"type\":\"address\"}],\"name\":\"singlePurchase\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sudoswap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapRouterV2\",\"outputs\":[{\"internalType\":\"contract ISwapRouterV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapRouterV3\",\"outputs\":[{\"internalType\":\"contract ISwapRouterV3\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrappedToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"x2y2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"bulkPurchase((uint8,uint256,address,uint256,bytes)[],address,address,bool)\":{\"params\":{\"allowFail\":\"- true if fails while executing orders are allowed, false if fail of a single order means fail of the whole batch\",\"feeRecipientFirst\":\"- address of the first fee recipient\",\"feeRecipientSecond\":\"- address of the second fee recipient\",\"purchaseDetails\":\"- array of details about the purchases (more info in PurchaseDetails struct)\"}},\"bulkPurchaseWithSwap((uint8,uint256,address,uint256,bytes)[],address,address,bool,(bytes,uint256,uint256,bool))\":{\"params\":{\"allowFail\":\"- true if fails while executing orders are allowed, false if fail of a single order means fail of the whole batch\",\"feeRecipientFirst\":\"- address of the first fee recipient\",\"feeRecipientSecond\":\"- address of the second fee recipient\",\"purchaseDetails\":\"- array of details about the purchases (more info in PurchaseDetails struct)\",\"swapDetails\":\"- swapDetails v3\"}},\"bulkPurchaseWithV2Swap((uint8,uint256,address,uint256,bytes)[],address,address,bool,(address[],uint256,uint256,uint256[],bool))\":{\"params\":{\"allowFail\":\"- true if fails while executing orders are allowed, false if fail of a single order means fail of the whole batch\",\"feeRecipientFirst\":\"- address of the first fee recipient\",\"feeRecipientSecond\":\"- address of the second fee recipient\",\"purchaseDetails\":\"- array of details about the purchases (more info in PurchaseDetails struct)\",\"swapDetails\":\"- swapDetails v2\"}},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"singlePurchase((uint8,uint256,address,uint256,bytes),address,address)\":{\"params\":{\"feeRecipientFirst\":\"- address of the first fee recipient\",\"feeRecipientSecond\":\"- address of the second fee recipient\",\"purchaseDetails\":\"- details about the purchase (more info in PurchaseDetails struct)\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"bulkPurchase((uint8,uint256,address,uint256,bytes)[],address,address,bool)\":{\"notice\":\"executes an array of purchases\"},\"bulkPurchaseWithSwap((uint8,uint256,address,uint256,bytes)[],address,address,bool,(bytes,uint256,uint256,bool))\":{\"notice\":\"executes an array of purchases - with swap v3\"},\"bulkPurchaseWithV2Swap((uint8,uint256,address,uint256,bytes)[],address,address,bool,(address[],uint256,uint256,uint256[],bool))\":{\"notice\":\"executes an array of purchases - with swap v2 - tokens for tokens or tokens for eth/weth\"},\"pause()\":{\"notice\":\"Pause the contract\"},\"setBlur(address)\":{\"notice\":\"set blur - temporary to remove\"},\"setLooksRare(address)\":{\"notice\":\"set looksrare - temporary to remove\"},\"setMarketProxy(uint8,address)\":{\"notice\":\"Set erc20 proxy for market\"},\"setRarible(address)\":{\"notice\":\"set rarible - temporary to remove\"},\"setSeaport14(address)\":{\"notice\":\"set seaport 1.4 - temporary to remove\"},\"setSeaport15(address)\":{\"notice\":\"set seaport 1.5 - temporary to remove\"},\"setSudoSwap(address)\":{\"notice\":\"set sudoswap - temporary to remove\"},\"setTransferProxy(address)\":{\"notice\":\"Set erc20 transfer proxy\"},\"setUniswapV2(address)\":{\"notice\":\"Set uniswap v2 router\"},\"setUniswapV3(address)\":{\"notice\":\"Set uniswap v3 router\"},\"setWrapped(address)\":{\"notice\":\"Set wrapped token\"},\"setX2Y2(address)\":{\"notice\":\"set x2y2 - temporary to remove\"},\"singlePurchase((uint8,uint256,address,uint256,bytes),address,address)\":{\"notice\":\"executes a single purchase\"},\"unpause()\":{\"notice\":\"Unpause the contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/exchange-wrapper/ExchangeWrapper.sol\":\"ExchangeWrapper\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x091a49ef99a2be002680781a10cc9dd74c0f348301ede5482c4ea625f79a8ffe\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xcc70d8e2281fb3ff69e8ab242500f10142cd0a7fa8dd9e45882be270d4d09024\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf42efac0d704b136c4d85e970562d4dbc1160d726ee93b5133122eb14fe368df\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x016298e66a5810253c6c905e61966bb31c8775c3f3517bf946ff56ee31d6c005\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155Receiver.sol\\\";\\n\\n/**\\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\\n *\\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\\n * stuck.\\n *\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x2e024ca51ce5abe16c0d34e6992a1104f356e2244eb4ccbec970435e8b3405e3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x3dd5e1a66a56f30302108a1da97d677a42b1daa60e503696b2bcbbf3e4c95bcb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x0108bf6a6ebd5f96678bed33a35947537263f96766131ee91461fb6485805028\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"src/exchange-wrapper/ExchangeWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./ExchangeWrapperCore.sol\\\";\\n\\ncontract ExchangeWrapper is ExchangeWrapperCore {\\n    function __ExchangeWrapper_init(\\n        address _exchangeV2,\\n        address _rarible,\\n        address _seaport_1_4,\\n        address _seaport_1_5,\\n        address _x2y2,\\n        address _looksrare,\\n        address _sudoswap,\\n        address _blur\\n    ) external initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n        __Pausable_init_unchained();\\n        __ExchangeWrapper_init_unchained(\\n            _exchangeV2,\\n            _rarible,\\n            _seaport_1_4,\\n            _seaport_1_5,\\n            _x2y2,\\n            _looksrare,\\n            _sudoswap,\\n            _blur\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x0b6df667765f0c4e21ebc5adecc407dd3da5c7bc5bb8fc183e02db4809cb5406\",\"license\":\"MIT\"},\"src/exchange-wrapper/ExchangeWrapperCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../librairies/LibTransfer.sol\\\";\\nimport \\\"../librairies/BpLibrary.sol\\\";\\nimport \\\"../librairies/LibPart.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\n\\nimport \\\"./interfaces/IExchangeV2.sol\\\";\\nimport \\\"./interfaces/ISeaPort.sol\\\";\\nimport \\\"./interfaces/Ix2y2.sol\\\";\\nimport \\\"./interfaces/ILooksRare.sol\\\";\\nimport \\\"./interfaces/IBlurExchange.sol\\\";\\nimport \\\"./interfaces/IWETH.sol\\\";\\nimport \\\"./interfaces/ISwapRouterV3.sol\\\";\\nimport \\\"./interfaces/ISwapRouterV2.sol\\\";\\nimport \\\"../interfaces/INftTransferProxy.sol\\\";\\nimport \\\"../interfaces/IERC20TransferProxy.sol\\\";\\n\\nabstract contract ExchangeWrapperCore is\\n    Initializable,\\n    OwnableUpgradeable,\\n    PausableUpgradeable,\\n    ERC721Holder,\\n    ERC1155Holder\\n{\\n    using LibTransfer for address;\\n    using BpLibrary for uint;\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    address public exchangeV2;\\n    address public rarible;\\n    address public seaport_1_4;\\n    address public seaport_1_5;\\n    address public x2y2;\\n    address public looksrare;\\n    address public sudoswap;\\n    address public blur;\\n    ISwapRouterV2 public uniswapRouterV2;\\n    ISwapRouterV3 public uniswapRouterV3;\\n    address public wrappedToken;\\n    address public erc20TransferProxy;\\n\\n    // mapping market id <> market erc20 proxy\\n    mapping(Markets => address) public proxies;\\n\\n    event Execution(bool result, address indexed sender);\\n\\n    enum Markets {\\n        Rarible,\\n        SeaPort_1_4,\\n        SeaPort_1_5,\\n        X2Y2,\\n        LooksRare,\\n        SudoSwap,\\n        ExchangeV2,\\n        Blur\\n    }\\n\\n    enum AdditionalDataTypes {\\n        NoAdditionalData,\\n        RoyaltiesAdditionalData\\n    }\\n\\n    /**\\n        @notice struct for the purchase data\\n        @param marketId - market key from Markets enum (what market to use)\\n        @param amount - eth price (amount of eth that needs to be send to the marketplace)\\n        @param paymentToken - payment token required for the order\\n        @param fees - 2 fees (in base points) that are going to be taken on top of order amount encoded in 1 uint256\\n                        bytes (27,28) used for dataType\\n                        bytes (29,30) used for the first value (goes to feeRecipientFirst)\\n                        bytes (31,32) are used for the second value (goes to feeRecipientSecond)\\n        @param data - data for market call\\n     */\\n    struct PurchaseDetails {\\n        Markets marketId;\\n        uint256 amount;\\n        address paymentToken;\\n        uint fees;\\n        bytes data;\\n    }\\n\\n    /**\\n        @notice struct for the data with additional data\\n        @param data - data for market call\\n        @param additionalRoyalties - array additional Royalties (in base points plus address Royalty recipient)\\n     */\\n    struct AdditionalData {\\n        bytes data;\\n        uint[] additionalRoyalties;\\n    }\\n\\n    /**\\n        @notice struct for the swap in v3 data\\n        @param path - tokenIn\\n        @param amountOut - amountOut\\n        @param amountInMaximum - amountInMaximum\\n        @param unwrap - unwrap\\n     */\\n    struct SwapDetailsIn {\\n        bytes path;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        bool unwrap;\\n    }\\n\\n    /**\\n        @notice struct for the swap in v2 data\\n        @param path - tokenIn\\n        @param amountOut - amountOut\\n        @param amountInMaximum - amountInMaximum\\n        @param binSteps - binSteps\\n        @param unwrap - unwrap\\n     */\\n    struct SwapV2DetailsIn {\\n        address[] path;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint256[] binSteps;\\n        bool unwrap;\\n    }\\n\\n    function __ExchangeWrapper_init_unchained(\\n        address _exchangeV2,\\n        address _rarible,\\n        address _seaport_1_4,\\n        address _seaport_1_5,\\n        address _x2y2,\\n        address _looksrare,\\n        address _sudoswap,\\n        address _blur\\n    ) internal {\\n        exchangeV2 = _exchangeV2;\\n        rarible = _rarible;\\n        seaport_1_4 = _seaport_1_4;\\n        seaport_1_5 = _seaport_1_5;\\n        x2y2 = _x2y2;\\n        looksrare = _looksrare;\\n        sudoswap = _sudoswap;\\n        blur = _blur;\\n    }\\n\\n    /// @notice Pause the contract\\n    function pause() public onlyOwner {\\n        _pause();\\n    }\\n\\n    /// @notice Unpause the contract\\n    function unpause() public onlyOwner {\\n        _unpause();\\n    }\\n\\n    /// @notice Set uniswap v2 router\\n    function setUniswapV2(ISwapRouterV2 _uniswapRouterV2) external onlyOwner {\\n        uniswapRouterV2 = _uniswapRouterV2;\\n    }\\n\\n    /// @notice Set uniswap v3 router\\n    function setUniswapV3(ISwapRouterV3 _uniswapRouterV3) external onlyOwner {\\n        uniswapRouterV3 = _uniswapRouterV3;\\n    }\\n\\n    /// @notice Set wrapped token\\n    function setWrapped(address _wrappedToken) external onlyOwner {\\n        wrappedToken = _wrappedToken;\\n    }\\n\\n    /// @notice Set erc20 transfer proxy\\n    function setTransferProxy(address _erc20TransferProxy) external onlyOwner {\\n        erc20TransferProxy = _erc20TransferProxy;\\n    }\\n\\n    /// @notice Set erc20 proxy for market\\n    function setMarketProxy(Markets marketId, address proxy) external onlyOwner {\\n        proxies[marketId] = proxy;\\n    }\\n\\n    /// @notice set seaport 1.4 - temporary to remove\\n    function setSeaport14(address _seaport) external onlyOwner {\\n        seaport_1_4 = _seaport;\\n    }\\n\\n    /// @notice set seaport 1.5 - temporary to remove\\n    function setSeaport15(address _seaport) external onlyOwner {\\n        seaport_1_5 = _seaport;\\n    }\\n\\n    /// @notice set blur - temporary to remove\\n    function setBlur(address _blur) external onlyOwner {\\n        blur = _blur;\\n    }\\n\\n    /// @notice set looksrare - temporary to remove\\n    function setLooksRare(address _looksrare) external onlyOwner {\\n        looksrare = _looksrare;\\n    }\\n\\n    /// @notice set rarible - temporary to remove\\n    function setRarible(address _rarible) external onlyOwner {\\n        rarible = _rarible;\\n    }\\n\\n    /// @notice set sudoswap - temporary to remove\\n    function setSudoSwap(address _sudoswap) external onlyOwner {\\n        sudoswap = _sudoswap;\\n    }\\n\\n    /// @notice set x2y2 - temporary to remove\\n    function setX2Y2(address _x2y2) external onlyOwner {\\n        x2y2 = _x2y2;\\n    }\\n\\n    /**\\n        @notice executes a single purchase\\n        @param purchaseDetails - details about the purchase (more info in PurchaseDetails struct)\\n        @param feeRecipientFirst - address of the first fee recipient\\n        @param feeRecipientSecond - address of the second fee recipient\\n     */\\n    function singlePurchase(\\n        PurchaseDetails memory purchaseDetails,\\n        address feeRecipientFirst,\\n        address feeRecipientSecond\\n    ) external payable whenNotPaused {\\n        (bool success, uint feeAmountFirst, uint feeAmountSecond) = purchase(purchaseDetails, false);\\n        emit Execution(success, _msgSender());\\n\\n        if (purchaseDetails.paymentToken == address(0)) {\\n            transferFee(feeAmountFirst, feeRecipientFirst);\\n            transferFee(feeAmountSecond, feeRecipientSecond);\\n        } else {\\n            transferFeeToken(purchaseDetails.paymentToken, feeAmountFirst, feeRecipientFirst);\\n            transferFeeToken(purchaseDetails.paymentToken, feeAmountSecond, feeRecipientSecond);\\n\\n            transferFeeChange(purchaseDetails.paymentToken);\\n        }\\n\\n        transferChange();\\n    }\\n\\n    /**\\n        @notice executes an array of purchases - with swap v2 - tokens for tokens or tokens for eth/weth\\n        @param purchaseDetails - array of details about the purchases (more info in PurchaseDetails struct)\\n        @param feeRecipientFirst - address of the first fee recipient\\n        @param feeRecipientSecond - address of the second fee recipient\\n        @param allowFail - true if fails while executing orders are allowed, false if fail of a single order means fail of the whole batch\\n        @param swapDetails - swapDetails v2\\n     */\\n\\n    function bulkPurchaseWithV2Swap(\\n        PurchaseDetails[] memory purchaseDetails,\\n        address feeRecipientFirst,\\n        address feeRecipientSecond,\\n        bool allowFail,\\n        SwapV2DetailsIn memory swapDetails\\n    ) external payable whenNotPaused {\\n        address tokenIn = swapDetails.path[0];\\n        address tokenOut = swapDetails.path[swapDetails.path.length - 1];\\n        // tokens for eth or weth\\n        if (tokenOut == wrappedToken) {\\n            bool isSwapExecuted = swapV2TokensForExactETHOrWETH(swapDetails);\\n            require(isSwapExecuted, \\\"swap not successful\\\");\\n        }\\n        // eth or weth for tokens\\n        else if (tokenIn == wrappedToken) {\\n            bool isSwapExecuted = swapV2ETHOrWETHForExactTokens(swapDetails);\\n            require(isSwapExecuted, \\\"swap not successful\\\");\\n        }\\n        // tokens for tokens\\n        else {\\n            bool isSwapExecuted = swapV2TokensForExactTokens(swapDetails);\\n            require(isSwapExecuted, \\\"swap not successful\\\");\\n        }\\n\\n        bulkPurchase(purchaseDetails, feeRecipientFirst, feeRecipientSecond, allowFail);\\n    }\\n\\n    /**\\n        @notice executes an array of purchases - with swap v3\\n        @param purchaseDetails - array of details about the purchases (more info in PurchaseDetails struct)\\n        @param feeRecipientFirst - address of the first fee recipient\\n        @param feeRecipientSecond - address of the second fee recipient\\n        @param allowFail - true if fails while executing orders are allowed, false if fail of a single order means fail of the whole batch\\n        @param swapDetails - swapDetails v3\\n     */\\n\\n    function bulkPurchaseWithSwap(\\n        PurchaseDetails[] memory purchaseDetails,\\n        address feeRecipientFirst,\\n        address feeRecipientSecond,\\n        bool allowFail,\\n        SwapDetailsIn memory swapDetails\\n    ) external payable whenNotPaused {\\n        bool isSwapExecuted = swapTokensForExactTokens(swapDetails);\\n        require(isSwapExecuted, \\\"swap not successful\\\");\\n        bulkPurchase(purchaseDetails, feeRecipientFirst, feeRecipientSecond, allowFail);\\n    }\\n\\n    /**\\n        @notice executes an array of purchases\\n        @param purchaseDetails - array of details about the purchases (more info in PurchaseDetails struct)\\n        @param feeRecipientFirst - address of the first fee recipient\\n        @param feeRecipientSecond - address of the second fee recipient\\n        @param allowFail - true if fails while executing orders are allowed, false if fail of a single order means fail of the whole batch\\n     */\\n\\n    function bulkPurchase(\\n        PurchaseDetails[] memory purchaseDetails,\\n        address feeRecipientFirst,\\n        address feeRecipientSecond,\\n        bool allowFail\\n    ) public payable whenNotPaused {\\n        uint sumFirstFees = 0;\\n        uint sumSecondFees = 0;\\n        bool result = false;\\n\\n        uint length = purchaseDetails.length;\\n        for (uint i; i < length; ++i) {\\n            (bool success, uint firstFeeAmount, uint secondFeeAmount) = purchase(purchaseDetails[i], allowFail);\\n\\n            result = result || success;\\n            emit Execution(success, _msgSender());\\n\\n            if (purchaseDetails[i].paymentToken == address(0)) {\\n                sumFirstFees = sumFirstFees + (firstFeeAmount);\\n                sumSecondFees = sumSecondFees + (secondFeeAmount);\\n            }\\n            // erc20 fees transferred right after each purchase to avoid having to store total\\n            else {\\n                transferFeeToken(purchaseDetails[i].paymentToken, firstFeeAmount, feeRecipientFirst);\\n                transferFeeToken(purchaseDetails[i].paymentToken, secondFeeAmount, feeRecipientSecond);\\n            }\\n        }\\n\\n        require(result, \\\"no successful executions\\\");\\n\\n        transferFee(sumFirstFees, feeRecipientFirst);\\n        transferFee(sumSecondFees, feeRecipientSecond);\\n\\n        transferFeeChange(purchaseDetails);\\n        transferChange();\\n    }\\n\\n    /**\\n        @notice executes one purchase\\n        @param purchaseDetails - details about the purchase\\n        @param allowFail - true if errors are handled, false if revert on errors\\n        @return result false if execution failed, true if succeded\\n        @return firstFeeAmount amount of the first fee of the purchase, 0 if failed\\n        @return secondFeeAmount amount of the second fee of the purchase, 0 if failed\\n     */\\n    function purchase(PurchaseDetails memory purchaseDetails, bool allowFail) internal returns (bool, uint, uint) {\\n        (bytes memory marketData, uint[] memory additionalRoyalties) = getDataAndAdditionalData(\\n            purchaseDetails.data,\\n            purchaseDetails.fees,\\n            purchaseDetails.marketId\\n        );\\n\\n        uint nativeAmountToSend = purchaseDetails.amount;\\n\\n        (uint firstFeeAmount, uint secondFeeAmount) = getFees(purchaseDetails.fees, purchaseDetails.amount);\\n\\n        // purchase with ERC20\\n        if (purchaseDetails.paymentToken != address(0)) {\\n            // Set native value to 0 for ERC20\\n            nativeAmountToSend = 0;\\n\\n            // Check balance in contract as there might be some from swap\\n            uint currentBalance = IERC20Upgradeable(purchaseDetails.paymentToken).balanceOf(address(this));\\n\\n            // set token value to amount + fees\\n            uint tokenAmountToSend = purchaseDetails.amount + firstFeeAmount + secondFeeAmount;\\n\\n            // Move tokenIn to contract and move what's missing if any\\n            if (tokenAmountToSend > currentBalance) {\\n                IERC20TransferProxy(erc20TransferProxy).erc20safeTransferFrom(\\n                    IERC20Upgradeable(purchaseDetails.paymentToken),\\n                    _msgSender(),\\n                    address(this),\\n                    tokenAmountToSend - currentBalance\\n                );\\n            }\\n\\n            // Approve tokenIn on market proxy\\n            address marketProxy = getMarketProxy(purchaseDetails.marketId);\\n            uint256 allowance = IERC20Upgradeable(purchaseDetails.paymentToken).allowance(marketProxy, address(this));\\n            if (allowance < tokenAmountToSend) {\\n                IERC20Upgradeable(purchaseDetails.paymentToken).approve(address(marketProxy), type(uint256).max);\\n            }\\n        }\\n\\n        if (purchaseDetails.marketId == Markets.SeaPort_1_5) {\\n            (bool success, ) = address(seaport_1_5).call{value: nativeAmountToSend}(marketData);\\n            if (allowFail) {\\n                if (!success) {\\n                    return (false, 0, 0);\\n                }\\n            } else {\\n                require(success, \\\"Purchase SeaPort_1_5 failed\\\");\\n            }\\n        } else if (purchaseDetails.marketId == Markets.SeaPort_1_4) {\\n            (bool success, ) = address(seaport_1_4).call{value: nativeAmountToSend}(marketData);\\n            if (allowFail) {\\n                if (!success) {\\n                    return (false, 0, 0);\\n                }\\n            } else {\\n                require(success, \\\"Purchase SeaPort_1_4 failed\\\");\\n            }\\n        } else if (purchaseDetails.marketId == Markets.ExchangeV2) {\\n            (bool success, ) = address(exchangeV2).call{value: nativeAmountToSend}(marketData);\\n            if (allowFail) {\\n                if (!success) {\\n                    return (false, 0, 0);\\n                }\\n            } else {\\n                require(success, \\\"Purchase GhostMarket failed\\\");\\n            }\\n        } else if (purchaseDetails.marketId == Markets.Rarible) {\\n            (bool success, ) = address(rarible).call{value: nativeAmountToSend}(marketData);\\n            if (allowFail) {\\n                if (!success) {\\n                    return (false, 0, 0);\\n                }\\n            } else {\\n                require(success, \\\"Purchase Rarible failed\\\");\\n            }\\n        } else if (purchaseDetails.marketId == Markets.X2Y2) {\\n            Ix2y2.RunInput memory input = abi.decode(marketData, (Ix2y2.RunInput));\\n\\n            if (allowFail) {\\n                try Ix2y2(x2y2).run{value: nativeAmountToSend}(input) {} catch {\\n                    return (false, 0, 0);\\n                }\\n            } else {\\n                Ix2y2(x2y2).run{value: nativeAmountToSend}(input);\\n            }\\n\\n            // for every element in input.details[] getting\\n            // order = input.details[i].orderIdx\\n            // and from that order getting item = input.details[i].itemId\\n            uint length = input.details.length;\\n            for (uint i; i < length; ++i) {\\n                uint orderId = input.details[i].orderIdx;\\n                uint itemId = input.details[i].itemIdx;\\n                bytes memory data = input.orders[orderId].items[itemId].data;\\n                {\\n                    if (input.orders[orderId].dataMask.length > 0 && input.details[i].dataReplacement.length > 0) {\\n                        _arrayReplace(data, input.details[i].dataReplacement, input.orders[orderId].dataMask);\\n                    }\\n                }\\n\\n                // 1 = erc-721\\n                if (input.orders[orderId].delegateType == 1) {\\n                    Ix2y2.Pair721[] memory pairs = abi.decode(data, (Ix2y2.Pair721[]));\\n\\n                    for (uint256 j = 0; j < pairs.length; j++) {\\n                        Ix2y2.Pair721 memory p = pairs[j];\\n                        IERC721Upgradeable(address(p.token)).safeTransferFrom(address(this), _msgSender(), p.tokenId);\\n                    }\\n                } else if (input.orders[orderId].delegateType == 2) {\\n                    // 2 = erc-1155\\n                    Ix2y2.Pair1155[] memory pairs = abi.decode(data, (Ix2y2.Pair1155[]));\\n\\n                    for (uint256 j = 0; j < pairs.length; j++) {\\n                        Ix2y2.Pair1155 memory p = pairs[j];\\n                        IERC1155Upgradeable(address(p.token)).safeTransferFrom(\\n                            address(this),\\n                            _msgSender(),\\n                            p.tokenId,\\n                            p.amount,\\n                            \\\"\\\"\\n                        );\\n                    }\\n                } else {\\n                    revert(\\\"unknown delegateType x2y2\\\");\\n                }\\n            }\\n        } else if (purchaseDetails.marketId == Markets.LooksRare) {\\n            (LibLooksRare.TakerOrder memory takerOrder, LibLooksRare.MakerOrder memory makerOrder, bytes4 typeNft) = abi\\n                .decode(marketData, (LibLooksRare.TakerOrder, LibLooksRare.MakerOrder, bytes4));\\n            if (allowFail) {\\n                try\\n                    ILooksRare(looksrare).matchAskWithTakerBidUsingETHAndWETH{value: nativeAmountToSend}(\\n                        takerOrder,\\n                        makerOrder\\n                    )\\n                {} catch {\\n                    return (false, 0, 0);\\n                }\\n            } else {\\n                ILooksRare(looksrare).matchAskWithTakerBidUsingETHAndWETH{value: nativeAmountToSend}(\\n                    takerOrder,\\n                    makerOrder\\n                );\\n            }\\n            if (typeNft == LibAsset.ERC721_ASSET_CLASS) {\\n                IERC721Upgradeable(makerOrder.collection).safeTransferFrom(\\n                    address(this),\\n                    _msgSender(),\\n                    makerOrder.tokenId\\n                );\\n            } else if (typeNft == LibAsset.ERC1155_ASSET_CLASS) {\\n                IERC1155Upgradeable(makerOrder.collection).safeTransferFrom(\\n                    address(this),\\n                    _msgSender(),\\n                    makerOrder.tokenId,\\n                    makerOrder.amount,\\n                    \\\"\\\"\\n                );\\n            } else {\\n                revert(\\\"Unknown token type\\\");\\n            }\\n        } else if (purchaseDetails.marketId == Markets.SudoSwap) {\\n            (bool success, ) = address(sudoswap).call{value: nativeAmountToSend}(marketData);\\n            if (allowFail) {\\n                if (!success) {\\n                    return (false, 0, 0);\\n                }\\n            } else {\\n                require(success, \\\"Purchase SudoSwap failed\\\");\\n            }\\n        } else if (purchaseDetails.marketId == Markets.Blur) {\\n            (IBlur.Input memory sell, IBlur.Input memory buy, bytes4 typeNft) = abi.decode(\\n                marketData,\\n                (IBlur.Input, IBlur.Input, bytes4)\\n            );\\n            if (allowFail) {\\n                try IBlur(blur).execute{value: nativeAmountToSend}(sell, buy) {} catch {\\n                    return (false, 0, 0);\\n                }\\n            } else {\\n                IBlur(blur).execute{value: nativeAmountToSend}(sell, buy);\\n            }\\n            if (typeNft == LibAsset.ERC721_ASSET_CLASS) {\\n                IERC721Upgradeable(sell.order.collection).safeTransferFrom(\\n                    address(this),\\n                    _msgSender(),\\n                    sell.order.tokenId\\n                );\\n            } else if (typeNft == LibAsset.ERC1155_ASSET_CLASS) {\\n                IERC1155Upgradeable(sell.order.collection).safeTransferFrom(\\n                    address(this),\\n                    _msgSender(),\\n                    sell.order.tokenId,\\n                    sell.order.amount,\\n                    \\\"\\\"\\n                );\\n            } else {\\n                revert(\\\"Unknown token type\\\");\\n            }\\n        } else {\\n            revert(\\\"Unknown purchase details\\\");\\n        }\\n\\n        //transferring royalties\\n        transferAdditionalRoyalties(additionalRoyalties, purchaseDetails.amount);\\n\\n        return (true, firstFeeAmount, secondFeeAmount);\\n    }\\n\\n    /**\\n        @notice transfers fee native to feeRecipient\\n        @param feeAmount - amount to be transfered\\n        @param feeRecipient - address of the recipient\\n     */\\n    function transferFee(uint feeAmount, address feeRecipient) internal {\\n        if (feeAmount > 0 && feeRecipient != address(0)) {\\n            LibTransfer.transferEth(feeRecipient, feeAmount);\\n        }\\n    }\\n\\n    /**\\n        @notice transfers fee token to feeRecipient\\n        @param paymentToken - token to be transfered\\n        @param feeAmount - amount to be transfered\\n        @param feeRecipient - address of the recipient\\n     */\\n    function transferFeeToken(address paymentToken, uint feeAmount, address feeRecipient) internal {\\n        if (feeAmount > 0 && feeRecipient != address(0)) {\\n            IERC20Upgradeable(paymentToken).transfer(feeRecipient, feeAmount);\\n        }\\n    }\\n\\n    /**\\n        @notice transfers change native back to sender\\n     */\\n    function transferChange() internal {\\n        uint ethAmount = address(this).balance;\\n        if (ethAmount > 0) {\\n            address(msg.sender).transferEth(ethAmount);\\n        }\\n    }\\n\\n    /**\\n        @notice transfers change fee back to sender\\n     */\\n    function transferFeeChange(address paymentToken) internal {\\n        uint tokenAmount = IERC20Upgradeable(paymentToken).balanceOf(address(this));\\n        if (tokenAmount > 0) {\\n            IERC20Upgradeable(paymentToken).transfer(_msgSender(), tokenAmount);\\n        }\\n    }\\n\\n    /**\\n        @notice transfers change fees back to sender\\n     */\\n    function transferFeeChange(PurchaseDetails[] memory purchaseDetails) internal {\\n        uint length = purchaseDetails.length;\\n        for (uint i; i < length; ++i) {\\n            if (purchaseDetails[i].paymentToken != address(0)) {\\n                transferFeeChange(purchaseDetails[i].paymentToken);\\n            }\\n        }\\n    }\\n\\n    /**\\n        @notice return market proxy based on market id\\n        @param marketId market id\\n        @return address market proxy address\\n     */\\n    function getMarketProxy(Markets marketId) internal view returns (address) {\\n        return proxies[marketId];\\n    }\\n\\n    /**\\n        @notice parses fees in base points from one uint and calculates real amount of fees\\n        @param fees two fees encoded in one uint, 29 and 30 bytes are used for the first fee, 31 and 32 bytes for second fee\\n        @param amount price of the order\\n        @return firstFeeAmount real amount for the first fee\\n        @return secondFeeAmount real amount for the second fee\\n     */\\n    function getFees(uint fees, uint amount) internal pure returns (uint, uint) {\\n        uint firstFee = uint(uint16(fees >> 16));\\n        uint secondFee = uint(uint16(fees));\\n        return (amount.bp(firstFee), amount.bp(secondFee));\\n    }\\n\\n    /**\\n        @notice parses _data to data for market call and additionalData\\n        @param feesAndDataType 27 and 28 bytes for dataType\\n        @return marketData data for market call\\n        @return additionalRoyalties array uint256, (base point + address)\\n     */\\n    function getDataAndAdditionalData(\\n        bytes memory _data,\\n        uint feesAndDataType,\\n        Markets marketId\\n    ) internal pure returns (bytes memory, uint[] memory) {\\n        AdditionalDataTypes dataType = AdditionalDataTypes(uint16(feesAndDataType >> 32));\\n        uint[] memory additionalRoyalties;\\n\\n        //return no royalties if wrong data type\\n        if (dataType == AdditionalDataTypes.NoAdditionalData) {\\n            return (_data, additionalRoyalties);\\n        }\\n\\n        if (dataType == AdditionalDataTypes.RoyaltiesAdditionalData) {\\n            AdditionalData memory additionalData = abi.decode(_data, (AdditionalData));\\n\\n            //return no royalties if market doesn't support royalties\\n            if (supportsRoyalties(marketId)) {\\n                return (additionalData.data, additionalData.additionalRoyalties);\\n            } else {\\n                return (additionalData.data, additionalRoyalties);\\n            }\\n        }\\n\\n        revert(\\\"unknown additionalDataType\\\");\\n    }\\n\\n    /**\\n        @notice transfer additional royalties\\n        @param _additionalRoyalties array uint256 (base point + royalty recipient address)\\n     */\\n    function transferAdditionalRoyalties(uint[] memory _additionalRoyalties, uint amount) internal {\\n        uint length = _additionalRoyalties.length;\\n        for (uint i; i < length; ++i) {\\n            if (_additionalRoyalties[i] > 0) {\\n                address payable account = payable(address(uint160(_additionalRoyalties[i])));\\n                uint basePoint = uint(_additionalRoyalties[i] >> 160);\\n                uint value = amount.bp(basePoint);\\n                transferFee(value, account);\\n            }\\n        }\\n    }\\n\\n    // modifies `src`\\n    function _arrayReplace(bytes memory src, bytes memory replacement, bytes memory mask) internal view virtual {\\n        require(src.length == replacement.length);\\n        require(src.length == mask.length);\\n\\n        uint256 length = src.length;\\n        for (uint256 i; i < length; ++i) {\\n            if (mask[i] != 0) {\\n                src[i] = replacement[i];\\n            }\\n        }\\n    }\\n\\n    /**\\n        @notice returns true if this contract supports additional royalties for the marketplace\\n        now royalties support only for marketId = sudoswap & looksrare\\n    */\\n    function supportsRoyalties(Markets marketId) internal pure returns (bool) {\\n        if (marketId == Markets.SudoSwap || marketId == Markets.LooksRare) {\\n            return true;\\n        }\\n\\n        return false;\\n    }\\n\\n    /**\\n     * @notice swaps tokens for exact tokens - uniswap v2\\n     * @param swapDetails swapDetails required\\n     */\\n    function swapV2TokensForExactTokens(SwapV2DetailsIn memory swapDetails) internal returns (bool) {\\n        // extract tokenIn from path\\n        address tokenIn = swapDetails.path[0];\\n\\n        // Move tokenIn to contract\\n        IERC20TransferProxy(erc20TransferProxy).erc20safeTransferFrom(\\n            IERC20Upgradeable(tokenIn),\\n            _msgSender(),\\n            address(this),\\n            swapDetails.amountInMaximum\\n        );\\n\\n        // Approve tokenIn on uniswap\\n        uint256 allowance = IERC20Upgradeable(tokenIn).allowance(address(uniswapRouterV2), address(this));\\n        if (allowance < swapDetails.amountInMaximum) {\\n            IERC20Upgradeable(tokenIn).approve(address(uniswapRouterV2), type(uint256).max);\\n        }\\n\\n        // Swap\\n        uint256 chainId = block.chainid;\\n        bool isAvalanche = chainId == 43114 || chainId == 43113;\\n        uint256 amountIn;\\n\\n        if (isAvalanche) {\\n            uint[] memory amounts = uniswapRouterV2.swapTokensForExactTokens(\\n                swapDetails.amountOut, // amountOut\\n                swapDetails.amountInMaximum, // amountInMaximum\\n                swapDetails.binSteps, // binSteps\\n                swapDetails.path, // path\\n                address(this), // recipient\\n                block.timestamp // deadline\\n            );\\n            amountIn = amounts[0];\\n        } else {\\n            uint[] memory amounts = uniswapRouterV2.swapTokensForExactTokens(\\n                swapDetails.amountOut, // amountOut\\n                swapDetails.amountInMaximum, // amountInMaximum\\n                swapDetails.path, // path\\n                address(this), // recipient\\n                block.timestamp // deadline\\n            );\\n            amountIn = amounts[0];\\n        }\\n\\n        // Refund tokenIn left if any\\n        if (amountIn < swapDetails.amountInMaximum) {\\n            IERC20Upgradeable(tokenIn).transfer(_msgSender(), swapDetails.amountInMaximum - amountIn);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice swaps tokens for exact ETH or WETH - uniswap v2\\n     * @param swapDetails swapDetails required\\n     */\\n    function swapV2TokensForExactETHOrWETH(SwapV2DetailsIn memory swapDetails) internal returns (bool) {\\n        // extract tokenIn / tokenOut from path\\n        address tokenIn = swapDetails.path[0];\\n        address tokenOut = swapDetails.path[swapDetails.path.length - 1];\\n\\n        // Move tokenIn to contract\\n        IERC20TransferProxy(erc20TransferProxy).erc20safeTransferFrom(\\n            IERC20Upgradeable(tokenIn),\\n            _msgSender(),\\n            address(this),\\n            swapDetails.amountInMaximum\\n        );\\n\\n        // if source = wrapped and destination = native, unwrap and return\\n        if (tokenIn == wrappedToken && swapDetails.unwrap) {\\n            try IWETH(wrappedToken).withdraw(swapDetails.amountInMaximum) {} catch {\\n                return false;\\n            }\\n            return true;\\n        }\\n\\n        // if source = native and destination = wrapped, wrap and return\\n        if (msg.value > 0 && tokenOut == wrappedToken) {\\n            try IWETH(wrappedToken).deposit{value: msg.value}() {} catch {\\n                return false;\\n            }\\n            return true;\\n        }\\n\\n        // Approve tokenIn on uniswap\\n        uint256 allowance = IERC20Upgradeable(tokenIn).allowance(address(uniswapRouterV2), address(this));\\n        if (allowance < swapDetails.amountInMaximum) {\\n            IERC20Upgradeable(tokenIn).approve(address(uniswapRouterV2), type(uint256).max);\\n        }\\n\\n        // Swap\\n        uint256 chainId = block.chainid;\\n        bool isAvalanche = chainId == 43114 || chainId == 43113;\\n        uint256 amountIn;\\n        uint256 balanceEthBefore = address(this).balance;\\n\\n        if (isAvalanche) {\\n            uint[] memory amounts = uniswapRouterV2.swapTokensForExactAVAX(\\n                swapDetails.amountOut, // amountOut\\n                swapDetails.amountInMaximum, // amountInMaximum\\n                swapDetails.binSteps, // binSteps\\n                swapDetails.path, // path\\n                payable(address(this)), // recipient\\n                block.timestamp // deadline\\n            );\\n            amountIn = amounts[0];\\n        } else {\\n            uint[] memory amounts = uniswapRouterV2.swapTokensForExactETH(\\n                swapDetails.amountOut, // amountOut\\n                swapDetails.amountInMaximum, // amountInMaximum\\n                swapDetails.path, // path\\n                payable(address(this)), // recipient\\n                block.timestamp // deadline\\n            );\\n            amountIn = amounts[0];\\n        }\\n\\n        uint256 balanceEthAfter = address(this).balance;\\n\\n        // Refund tokenIn left if any\\n        if (amountIn < swapDetails.amountInMaximum) {\\n            IERC20Upgradeable(tokenIn).transfer(_msgSender(), swapDetails.amountInMaximum - amountIn);\\n        }\\n\\n        // Wrap if required\\n        if (swapDetails.unwrap) {\\n            try IWETH(wrappedToken).deposit{value: balanceEthAfter - balanceEthBefore}() {} catch {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice swaps ETH or WETH for exact tokens - uniswap v2\\n     * @param swapDetails swapDetails required\\n     */\\n    function swapV2ETHOrWETHForExactTokens(SwapV2DetailsIn memory swapDetails) internal returns (bool) {\\n        // extract tokenIn / tokenOut from path\\n        address tokenIn = swapDetails.path[0];\\n        address tokenOut = swapDetails.path[swapDetails.path.length - 1];\\n\\n        // Move tokenIn to contract if ERC20\\n        if (msg.value == 0) {\\n            IERC20TransferProxy(erc20TransferProxy).erc20safeTransferFrom(\\n                IERC20Upgradeable(tokenIn),\\n                _msgSender(),\\n                address(this),\\n                swapDetails.amountInMaximum\\n            );\\n\\n            try IWETH(wrappedToken).withdraw(swapDetails.amountInMaximum) {} catch {\\n                return false;\\n            }\\n        }\\n\\n        // if source = native and destination = wrapped, wrap and return\\n        if (msg.value > 0 && tokenOut == wrappedToken) {\\n            try IWETH(wrappedToken).deposit{value: msg.value}() {} catch {\\n                return false;\\n            }\\n            IERC20Upgradeable(tokenOut).transfer(_msgSender(), swapDetails.amountInMaximum);\\n            return true;\\n        }\\n\\n        // Swap\\n        uint256 chainId = block.chainid;\\n        bool isAvalanche = chainId == 43114 || chainId == 43113;\\n\\n        if (isAvalanche) {\\n            uniswapRouterV2.swapAVAXForExactTokens{value: swapDetails.amountInMaximum}(\\n                swapDetails.amountOut, // amountOutMinimum\\n                swapDetails.binSteps, // binSteps\\n                swapDetails.path, // path\\n                address(this), // recipient\\n                block.timestamp // deadline\\n            );\\n        } else {\\n            uniswapRouterV2.swapETHForExactTokens{value: swapDetails.amountInMaximum}(\\n                swapDetails.amountOut, // amountOutMinimum\\n                swapDetails.path, // path\\n                address(this), // recipient\\n                block.timestamp // deadline\\n            );\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice swaps tokens for exact tokens - uniswap v3\\n     * @param swapDetails swapDetails required\\n     */\\n    function swapTokensForExactTokens(SwapDetailsIn memory swapDetails) internal returns (bool) {\\n        // extract tokenIn / tokenOut from path\\n        address tokenIn;\\n        address tokenOut;\\n        bytes memory _path = swapDetails.path;\\n        uint _start = _path.length - 20;\\n        assembly {\\n            tokenIn := div(mload(add(add(_path, 0x20), _start)), 0x1000000000000000000000000)\\n            tokenOut := div(mload(add(add(_path, 0x20), 0)), 0x1000000000000000000000000)\\n        }\\n\\n        // Move tokenIn to contract if ERC20\\n        if (msg.value == 0) {\\n            IERC20TransferProxy(erc20TransferProxy).erc20safeTransferFrom(\\n                IERC20Upgradeable(tokenIn),\\n                _msgSender(),\\n                address(this),\\n                swapDetails.amountInMaximum\\n            );\\n        }\\n\\n        // if source = wrapped and destination = native, unwrap and return\\n        if (tokenIn == wrappedToken && swapDetails.unwrap) {\\n            try IWETH(wrappedToken).withdraw(swapDetails.amountOut) {} catch {\\n                return false;\\n            }\\n            return true;\\n        }\\n\\n        // if source = native and destination = wrapped, wrap and return\\n        if (msg.value > 0 && tokenOut == wrappedToken) {\\n            try IWETH(wrappedToken).deposit{value: msg.value}() {} catch {\\n                return false;\\n            }\\n            return true;\\n        }\\n\\n        // Approve tokenIn on uniswap\\n        uint256 allowance = IERC20Upgradeable(tokenIn).allowance(address(uniswapRouterV3), address(this));\\n        if (allowance < swapDetails.amountInMaximum) {\\n            IERC20Upgradeable(tokenIn).approve(address(uniswapRouterV3), type(uint256).max);\\n        }\\n\\n        // Set the order parameters\\n        ISwapRouterV3.ExactOutputParams memory params = ISwapRouterV3.ExactOutputParams(\\n            swapDetails.path, // path\\n            address(this), // recipient\\n            block.timestamp, // deadline\\n            swapDetails.amountOut, // amountOut\\n            swapDetails.amountInMaximum // amountInMaximum\\n        );\\n\\n        // Swap\\n        uint256 amountIn;\\n        try uniswapRouterV3.exactOutput{value: msg.value}(params) returns (uint256 amount) {\\n            amountIn = amount;\\n        } catch {\\n            return false;\\n        }\\n\\n        // Refund ETH from swap if any\\n        uniswapRouterV3.refundETH();\\n\\n        // Unwrap if required\\n        if (swapDetails.unwrap) {\\n            try IWETH(wrappedToken).withdraw(swapDetails.amountOut) {} catch {\\n                return false;\\n            }\\n        }\\n\\n        // Refund tokenIn left if any\\n        if (amountIn < swapDetails.amountInMaximum) {\\n            if (msg.value == 0) {\\n                IERC20Upgradeable(tokenIn).transfer(_msgSender(), swapDetails.amountInMaximum - amountIn);\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x6c500d509090054bf0628e8c79107ba555c4aed91f81f7d896a3b94cf822b857\",\"license\":\"MIT\"},\"src/exchange-wrapper/interfaces/IBlurExchange.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IBlur {\\n    enum Side {\\n        Buy,\\n        Sell\\n    }\\n    enum SignatureVersion {\\n        Single,\\n        Bulk\\n    }\\n    enum AssetType {\\n        ERC721,\\n        ERC1155\\n    }\\n\\n    struct Fee {\\n        uint16 rate;\\n        address payable recipient;\\n    }\\n\\n    struct Order {\\n        address trader;\\n        Side side;\\n        address matchingPolicy;\\n        address collection;\\n        uint256 tokenId;\\n        uint256 amount;\\n        address paymentToken;\\n        uint256 price;\\n        uint256 listingTime;\\n        /* Order expiration timestamp - 0 for oracle cancellations. */\\n        uint256 expirationTime;\\n        Fee[] fees;\\n        uint256 salt;\\n        bytes extraParams;\\n    }\\n\\n    struct Input {\\n        Order order;\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n        bytes extraSignature;\\n        SignatureVersion signatureVersion;\\n        uint256 blockNumber;\\n    }\\n\\n    function execute(Input calldata sell, Input calldata buy) external payable;\\n}\\n\",\"keccak256\":\"0xbaac14476dfefec086193a138385b01b826713f774452d60e4a719ac6c980576\",\"license\":\"MIT\"},\"src/exchange-wrapper/interfaces/IExchangeV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../librairies/LibOrder.sol\\\";\\nimport \\\"../../librairies/LibDirectTransfer.sol\\\";\\n\\ninterface IExchangeV2 {\\n    function matchOrders(\\n        LibOrder.Order memory orderLeft,\\n        bytes memory signatureLeft,\\n        LibOrder.Order memory orderRight,\\n        bytes memory signatureRight\\n    ) external payable;\\n\\n    function directPurchase(LibDirectTransfer.Purchase calldata direct) external payable;\\n}\\n\",\"keccak256\":\"0xf4eed7681b4dd3457dd85dbae86772ab4fc98153dd6e304685dd87ca62ddd788\",\"license\":\"MIT\"},\"src/exchange-wrapper/interfaces/ILooksRare.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../librairies/LibLooksRare.sol\\\";\\n\\ninterface ILooksRare {\\n    function matchAskWithTakerBidUsingETHAndWETH(\\n        LibLooksRare.TakerOrder calldata takerBid,\\n        LibLooksRare.MakerOrder calldata makerAsk\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x9e50703072fcc59668f236dcab4407773ff4bdd077f878a92b394ad375b4dd2f\",\"license\":\"MIT\"},\"src/exchange-wrapper/interfaces/ISeaPort.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../librairies/LibSeaPort.sol\\\";\\n\\ninterface ISeaPort {\\n    function fulfillAdvancedOrder(\\n        LibSeaPort.AdvancedOrder calldata advancedOrder,\\n        LibSeaPort.CriteriaResolver[] calldata criteriaResolvers,\\n        bytes32 fulfillerConduitKey,\\n        address recipient\\n    ) external payable returns (bool fulfilled);\\n\\n    function fulfillAvailableAdvancedOrders(\\n        LibSeaPort.AdvancedOrder[] memory advancedOrders,\\n        LibSeaPort.CriteriaResolver[] calldata criteriaResolvers,\\n        LibSeaPort.FulfillmentComponent[][] calldata offerFulfillments,\\n        LibSeaPort.FulfillmentComponent[][] calldata considerationFulfillments,\\n        bytes32 fulfillerConduitKey,\\n        address recipient,\\n        uint256 maximumFulfilled\\n    ) external payable returns (bool[] memory availableOrders, LibSeaPort.Execution[] memory executions);\\n\\n    function fulfillBasicOrder(\\n        LibSeaPort.BasicOrderParameters calldata parameters\\n    ) external payable returns (bool fulfilled);\\n}\\n\",\"keccak256\":\"0x630b82f01b62b6bcdcb986898173fdad081c92c2cde794fce6c16aa346b8170a\",\"license\":\"MIT\"},\"src/exchange-wrapper/interfaces/ISwapRouterV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V2\\ninterface ISwapRouterV2 {\\n    // regular\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMinimum,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMaximum,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint amountOutMinimum,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountOut);\\n\\n    function swapTokensForExactETH(\\n        uint amountOut,\\n        uint amountInMaximum,\\n        address[] calldata path,\\n        address payable to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint amountIn,\\n        uint amountOutMinimum,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function swapETHForExactTokens(\\n        uint amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint[] memory amounts);\\n\\n    // avalanche\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMinimum,\\n        uint[] calldata binSteps,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMaximum,\\n        uint[] calldata binSteps,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function swapExactAVAXForTokens(\\n        uint amountOutMinimum,\\n        uint[] calldata binSteps,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountOut);\\n\\n    function swapTokensForExactAVAX(\\n        uint amountOut,\\n        uint amountInMaximum,\\n        uint[] calldata binSteps,\\n        address[] calldata path,\\n        address payable to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function swapExactTokensForAVAX(\\n        uint amountIn,\\n        uint amountOutMinimum,\\n        uint[] calldata binSteps,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function swapAVAXForExactTokens(\\n        uint amountOut,\\n        uint[] calldata binSteps,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0x7816d4a88bfe221f9be18d2fcf407bb7b03b0ffff6d6e6ec51a06c6068c91bce\",\"license\":\"MIT\"},\"src/exchange-wrapper/interfaces/ISwapRouterV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IUniswapV3SwapCallback.sol\\\";\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouterV3 is IUniswapV3SwapCallback {\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n\\n    function refundETH() external payable;\\n}\\n\",\"keccak256\":\"0xa17dd22883339d768b4e61aa5fb1f5eef43711350c166854ac72c63aa8db40f1\",\"license\":\"MIT\"},\"src/exchange-wrapper/interfaces/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(int256 amount0Delta, int256 amount1Delta, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x17d2c73932caae1344981336a10736ba15af274c4e224bf7ebe95a02eba5ac51\",\"license\":\"MIT\"},\"src/exchange-wrapper/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0x8696c755e73523ec30014bbc75ccdcc5d90c6b688d73dea0df2d2666c5e47484\",\"license\":\"MIT\"},\"src/exchange-wrapper/interfaces/Ix2y2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface Ix2y2 {\\n    struct OrderItem {\\n        uint256 price;\\n        bytes data;\\n    }\\n\\n    struct Pair721 {\\n        address token;\\n        uint256 tokenId;\\n    }\\n\\n    struct Pair1155 {\\n        address token;\\n        uint256 tokenId;\\n        uint256 amount;\\n    }\\n\\n    struct Order {\\n        uint256 salt;\\n        address user;\\n        uint256 network;\\n        uint256 intent;\\n        uint256 delegateType;\\n        uint256 deadline;\\n        address currency;\\n        bytes dataMask;\\n        OrderItem[] items;\\n        // signature\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n        uint8 signVersion;\\n    }\\n\\n    struct Fee {\\n        uint256 percentage;\\n        address to;\\n    }\\n\\n    struct SettleDetail {\\n        Op op;\\n        uint256 orderIdx;\\n        uint256 itemIdx;\\n        uint256 price;\\n        bytes32 itemHash;\\n        address executionDelegate;\\n        bytes dataReplacement;\\n        uint256 bidIncentivePct;\\n        uint256 aucMinIncrementPct;\\n        uint256 aucIncDurationSecs;\\n        Fee[] fees;\\n    }\\n\\n    struct SettleShared {\\n        uint256 salt;\\n        uint256 deadline;\\n        uint256 amountToEth;\\n        uint256 amountToWeth;\\n        address user;\\n        bool canFail;\\n    }\\n\\n    struct RunInput {\\n        Order[] orders;\\n        SettleDetail[] details;\\n        SettleShared shared;\\n        // signature\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n    }\\n\\n    enum Op {\\n        INVALID,\\n        // off-chain\\n        COMPLETE_SELL_OFFER,\\n        COMPLETE_BUY_OFFER,\\n        CANCEL_OFFER,\\n        // auction\\n        BID,\\n        COMPLETE_AUCTION,\\n        REFUND_AUCTION,\\n        REFUND_AUCTION_STUCK_ITEM\\n    }\\n\\n    function run(RunInput memory input) external payable;\\n}\\n\",\"keccak256\":\"0xc96a3556fb1ee0b06eacc31618dd68667b63bdfb0d4c57ac8cf040b6d79b6010\",\"license\":\"MIT\"},\"src/exchange-wrapper/librairies/LibLooksRare.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nlibrary LibLooksRare {\\n    struct MakerOrder {\\n        bool isOrderAsk; // true --> ask / false --> bid\\n        address signer; // signer of the maker order\\n        address collection; // collection address\\n        uint256 price; // price (used as )\\n        uint256 tokenId; // id of the token\\n        uint256 amount; // amount of tokens to sell/purchase (must be 1 for ERC721, 1+ for ERC1155)\\n        address strategy; // strategy for trade execution (e.g., DutchAuction, StandardSaleForFixedPrice)\\n        address currency; // currency (e.g., WETH)\\n        uint256 nonce; // order nonce (must be unique unless new maker order is meant to override existing one e.g., lower ask price)\\n        uint256 startTime; // startTime in timestamp\\n        uint256 endTime; // endTime in timestamp\\n        uint256 minPercentageToAsk; // slippage protection (9000 --> 90% of the final price must return to ask)\\n        bytes params; // additional parameters\\n        uint8 v; // v: parameter (27 or 28)\\n        bytes32 r; // r: parameter\\n        bytes32 s; // s: parameter\\n    }\\n\\n    struct TakerOrder {\\n        bool isOrderAsk; // true --> ask / false --> bid\\n        address taker; // msg.sender\\n        uint256 price; // final price for the purchase\\n        uint256 tokenId;\\n        uint256 minPercentageToAsk; // // slippage protection (9000 --> 90% of the final price must return to ask)\\n        bytes params; // other params (e.g., tokenId)\\n    }\\n}\\n\",\"keccak256\":\"0x81cd487dbce83f2b49ae5589c88eac890525e85909838bcf3949fd69b90945e5\",\"license\":\"MIT\"},\"src/exchange-wrapper/librairies/LibSeaPort.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nlibrary LibSeaPort {\\n    /**\\n     * @dev For basic orders involving ETH / native / ERC20 <=> ERC721 / ERC1155\\n     *      matching, a group of six functions may be called that only requires a\\n     *      subset of the usual order arguments. Note the use of a \\\"basicOrderType\\\"\\n     *      enum; this represents both the usual order type as well as the \\\"route\\\"\\n     *      of the basic order (a simple derivation function for the basic order\\n     *      type is `basicOrderType = orderType + (4 * basicOrderRoute)`.)\\n     */\\n    struct BasicOrderParameters {\\n        address considerationToken; // 0x24\\n        uint256 considerationIdentifier; // 0x44\\n        uint256 considerationAmount; // 0x64\\n        address payable offerer; // 0x84\\n        address zone; // 0xa4\\n        address offerToken; // 0xc4\\n        uint256 offerIdentifier; // 0xe4\\n        uint256 offerAmount; // 0x104\\n        BasicOrderType basicOrderType; // 0x124\\n        uint256 startTime; // 0x144\\n        uint256 endTime; // 0x164\\n        bytes32 zoneHash; // 0x184\\n        uint256 salt; // 0x1a4\\n        bytes32 offererConduitKey; // 0x1c4\\n        bytes32 fulfillerConduitKey; // 0x1e4\\n        uint256 totalOriginalAdditionalRecipients; // 0x204\\n        AdditionalRecipient[] additionalRecipients; // 0x224\\n        bytes signature; // 0x244\\n    }\\n    /**\\n     * @dev Basic orders can supply any number of additional recipients, with the\\n     *      implied assumption that they are supplied from the offered ETH (or other\\n     *      native token) or ERC20 token for the order.\\n     */\\n    struct AdditionalRecipient {\\n        uint256 amount;\\n        address payable recipient;\\n    }\\n\\n    // prettier-ignore\\n    enum BasicOrderType {\\n        // 0: no partial fills, anyone can execute\\n        ETH_TO_ERC721_FULL_OPEN,\\n\\n        // 1: partial fills supported, anyone can execute\\n        ETH_TO_ERC721_PARTIAL_OPEN,\\n\\n        // 2: no partial fills, only offerer or zone can execute\\n        ETH_TO_ERC721_FULL_RESTRICTED,\\n\\n        // 3: partial fills supported, only offerer or zone can execute\\n        ETH_TO_ERC721_PARTIAL_RESTRICTED,\\n\\n        // 4: no partial fills, anyone can execute\\n        ETH_TO_ERC1155_FULL_OPEN,\\n\\n        // 5: partial fills supported, anyone can execute\\n        ETH_TO_ERC1155_PARTIAL_OPEN,\\n\\n        // 6: no partial fills, only offerer or zone can execute\\n        ETH_TO_ERC1155_FULL_RESTRICTED,\\n\\n        // 7: partial fills supported, only offerer or zone can execute\\n        ETH_TO_ERC1155_PARTIAL_RESTRICTED,\\n\\n        // 8: no partial fills, anyone can execute\\n        ERC20_TO_ERC721_FULL_OPEN,\\n\\n        // 9: partial fills supported, anyone can execute\\n        ERC20_TO_ERC721_PARTIAL_OPEN,\\n\\n        // 10: no partial fills, only offerer or zone can execute\\n        ERC20_TO_ERC721_FULL_RESTRICTED,\\n\\n        // 11: partial fills supported, only offerer or zone can execute\\n        ERC20_TO_ERC721_PARTIAL_RESTRICTED,\\n\\n        // 12: no partial fills, anyone can execute\\n        ERC20_TO_ERC1155_FULL_OPEN,\\n\\n        // 13: partial fills supported, anyone can execute\\n        ERC20_TO_ERC1155_PARTIAL_OPEN,\\n\\n        // 14: no partial fills, only offerer or zone can execute\\n        ERC20_TO_ERC1155_FULL_RESTRICTED,\\n\\n        // 15: partial fills supported, only offerer or zone can execute\\n        ERC20_TO_ERC1155_PARTIAL_RESTRICTED,\\n\\n        // 16: no partial fills, anyone can execute\\n        ERC721_TO_ERC20_FULL_OPEN,\\n\\n        // 17: partial fills supported, anyone can execute\\n        ERC721_TO_ERC20_PARTIAL_OPEN,\\n\\n        // 18: no partial fills, only offerer or zone can execute\\n        ERC721_TO_ERC20_FULL_RESTRICTED,\\n\\n        // 19: partial fills supported, only offerer or zone can execute\\n        ERC721_TO_ERC20_PARTIAL_RESTRICTED,\\n\\n        // 20: no partial fills, anyone can execute\\n        ERC1155_TO_ERC20_FULL_OPEN,\\n\\n        // 21: partial fills supported, anyone can execute\\n        ERC1155_TO_ERC20_PARTIAL_OPEN,\\n\\n        // 22: no partial fills, only offerer or zone can execute\\n        ERC1155_TO_ERC20_FULL_RESTRICTED,\\n\\n        // 23: partial fills supported, only offerer or zone can execute\\n        ERC1155_TO_ERC20_PARTIAL_RESTRICTED\\n    }\\n\\n    /**\\n     * @dev The full set of order components, with the exception of the counter,\\n     *      must be supplied when fulfilling more sophisticated orders or groups of\\n     *      orders. The total number of original consideration items must also be\\n     *      supplied, as the caller may specify additional consideration items.\\n     */\\n    struct OrderParameters {\\n        address offerer; // 0x00\\n        address zone; // 0x20\\n        OfferItem[] offer; // 0x40\\n        ConsiderationItem[] consideration; // 0x60\\n        OrderType orderType; // 0x80\\n        uint256 startTime; // 0xa0\\n        uint256 endTime; // 0xc0\\n        bytes32 zoneHash; // 0xe0\\n        uint256 salt; // 0x100\\n        bytes32 conduitKey; // 0x120\\n        uint256 totalOriginalConsiderationItems; // 0x140\\n        // offer.length                          // 0x160\\n    }\\n\\n    /**\\n     * @dev Orders require a signature in addition to the other order parameters.\\n     */\\n    struct Order {\\n        OrderParameters parameters;\\n        bytes signature;\\n    }\\n\\n    struct AdvancedOrder {\\n        OrderParameters parameters;\\n        uint120 numerator;\\n        uint120 denominator;\\n        bytes signature;\\n        bytes extraData;\\n    }\\n\\n    struct OfferItem {\\n        ItemType itemType;\\n        address token;\\n        uint256 identifierOrCriteria;\\n        uint256 startAmount;\\n        uint256 endAmount;\\n    }\\n\\n    /**\\n     * @dev A consideration item has the same five components as an offer item and\\n     *      an additional sixth component designating the required recipient of the\\n     *      item.\\n     */\\n    struct ConsiderationItem {\\n        ItemType itemType;\\n        address token;\\n        uint256 identifierOrCriteria;\\n        uint256 startAmount;\\n        uint256 endAmount;\\n        address payable recipient;\\n    }\\n\\n    // prettier-ignore\\n    enum OrderType {\\n        // 0: no partial fills, anyone can execute\\n        FULL_OPEN,\\n\\n        // 1: partial fills supported, anyone can execute\\n        PARTIAL_OPEN,\\n\\n        // 2: no partial fills, only offerer or zone can execute\\n        FULL_RESTRICTED,\\n\\n        // 3: partial fills supported, only offerer or zone can execute\\n        PARTIAL_RESTRICTED\\n    }\\n\\n    // prettier-ignore\\n    enum ItemType {\\n        // 0: ETH on mainnet, MATIC on polygon, etc.\\n        NATIVE,\\n\\n        // 1: ERC20 items (ERC777 and ERC20 analogues could also technically work)\\n        ERC20,\\n\\n        // 2: ERC721 items\\n        ERC721,\\n\\n        // 3: ERC1155 items\\n        ERC1155,\\n\\n        // 4: ERC721 items where a number of tokenIds are supported\\n        ERC721_WITH_CRITERIA,\\n\\n        // 5: ERC1155 items where a number of ids are supported\\n        ERC1155_WITH_CRITERIA\\n    }\\n\\n    /**\\n     * @dev A fulfillment is applied to a group of orders. It decrements a series of\\n     *      offer and consideration items, then generates a single execution\\n     *      element. A given fulfillment can be applied to as many offer and\\n     *      consideration items as desired, but must contain at least one offer and\\n     *      at least one consideration that match. The fulfillment must also remain\\n     *      consistent on all key parameters across all offer items (same offerer,\\n     *      token, type, tokenId, and conduit preference) as well as across all\\n     *      consideration items (token, type, tokenId, and recipient).\\n     */\\n    struct Fulfillment {\\n        FulfillmentComponent[] offerComponents;\\n        FulfillmentComponent[] considerationComponents;\\n    }\\n\\n    /**\\n     * @dev Each fulfillment component contains one index referencing a specific\\n     *      order and another referencing a specific offer or consideration item.\\n     */\\n    struct FulfillmentComponent {\\n        uint256 orderIndex;\\n        uint256 itemIndex;\\n    }\\n\\n    /**\\n     * @dev An execution is triggered once all consideration items have been zeroed\\n     *      out. It sends the item in question from the offerer to the item's\\n     *      recipient, optionally sourcing approvals from either this contract\\n     *      directly or from the offerer's chosen conduit if one is specified. An\\n     *      execution is not provided as an argument, but rather is derived via\\n     *      orders, criteria resolvers, and fulfillments (where the total number of\\n     *      executions will be less than or equal to the total number of indicated\\n     *      fulfillments) and returned as part of `matchOrders`.\\n     */\\n    struct Execution {\\n        ReceivedItem item;\\n        address offerer;\\n        bytes32 conduitKey;\\n    }\\n\\n    /**\\n     * @dev A received item is translated from a utilized consideration item and has\\n     *      the same four components as a spent item, as well as an additional fifth\\n     *      component designating the required recipient of the item.\\n     */\\n    struct ReceivedItem {\\n        ItemType itemType;\\n        address token;\\n        uint256 identifier;\\n        uint256 amount;\\n        address payable recipient;\\n    }\\n\\n    struct CriteriaResolver {\\n        uint256 orderIndex;\\n        Side side;\\n        uint256 index;\\n        uint256 identifier;\\n        bytes32[] criteriaProof;\\n    }\\n\\n    // prettier-ignore\\n    enum Side {\\n        // 0: Items that can be spent\\n        OFFER,\\n\\n        // 1: Items that must be received\\n        CONSIDERATION\\n    }\\n}\\n\",\"keccak256\":\"0x91809d3c08054e053a147bf214e37995ac10a5ef3fa56952ebcc987aafed91b6\",\"license\":\"MIT\"},\"src/interfaces/IERC20TransferProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\ninterface IERC20TransferProxy {\\n    function erc20safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) external;\\n}\\n\",\"keccak256\":\"0x73d3cb89e7f7626882b328ede811afc71c77835f14fad09c2cb1c8e0fb2ff66a\",\"license\":\"MIT\"},\"src/interfaces/INftTransferProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\\\";\\n\\ninterface INftTransferProxy {\\n    function erc721safeTransferFrom(IERC721Upgradeable token, address from, address to, uint256 tokenId) external;\\n\\n    function erc1155safeTransferFrom(\\n        IERC1155Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x051dbb17a3bd2ef87619192abf8f02c486d175a6bb5b2cbb4aac855ecbe87d80\",\"license\":\"MIT\"},\"src/librairies/BpLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nlibrary BpLibrary {\\n    function bp(uint256 value, uint256 bpValue) internal pure returns (uint256) {\\n        return (value * (bpValue)) / (10000);\\n    }\\n}\\n\",\"keccak256\":\"0x24d598e4d4b0fae9b4202a96bc4082aea9a1bd224f52a6ec7d92a873ef06b010\",\"license\":\"MIT\"},\"src/librairies/LibAsset.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nlibrary LibAsset {\\n    bytes4 public constant ETH_ASSET_CLASS = bytes4(keccak256(\\\"ETH\\\"));\\n    bytes4 public constant ERC20_ASSET_CLASS = bytes4(keccak256(\\\"ERC20\\\"));\\n    bytes4 public constant ERC721_ASSET_CLASS = bytes4(keccak256(\\\"ERC721\\\"));\\n    bytes4 public constant ERC1155_ASSET_CLASS = bytes4(keccak256(\\\"ERC1155\\\"));\\n    bytes4 public constant COLLECTION = bytes4(keccak256(\\\"COLLECTION\\\"));\\n    bytes4 public constant CRYPTO_PUNKS = bytes4(keccak256(\\\"CRYPTO_PUNKS\\\"));\\n\\n    bytes32 public constant ASSET_TYPE_TYPEHASH = keccak256(\\\"AssetType(bytes4 assetClass,bytes data)\\\");\\n\\n    bytes32 public constant ASSET_TYPEHASH =\\n        keccak256(\\\"Asset(AssetType assetType,uint256 value)AssetType(bytes4 assetClass,bytes data)\\\");\\n\\n    struct AssetType {\\n        bytes4 assetClass;\\n        bytes data;\\n    }\\n\\n    struct Asset {\\n        AssetType assetType;\\n        uint256 value;\\n    }\\n\\n    function hash(AssetType memory assetType) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(ASSET_TYPE_TYPEHASH, assetType.assetClass, keccak256(assetType.data)));\\n    }\\n\\n    function hash(Asset memory asset) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(ASSET_TYPEHASH, hash(asset.assetType), asset.value));\\n    }\\n}\\n\",\"keccak256\":\"0x10f962b944a4ffa957d22d70073318bc5376a3666d6e6b858affc8eb258d7d8d\",\"license\":\"MIT\"},\"src/librairies/LibDirectTransfer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./LibAsset.sol\\\";\\n\\nlibrary LibDirectTransfer {\\n    //LibDirectTransfers\\n    /*All buy parameters need for create buyOrder and sellOrder*/\\n    struct Purchase {\\n        address sellOrderMaker; //\\n        uint256 sellOrderNftAmount;\\n        bytes4 nftAssetClass;\\n        bytes nftData;\\n        uint256 sellOrderPaymentAmount;\\n        address paymentToken;\\n        uint256 sellOrderSalt;\\n        uint sellOrderStart;\\n        uint sellOrderEnd;\\n        bytes4 sellOrderDataType;\\n        bytes sellOrderData;\\n        bytes sellOrderSignature;\\n        uint256 buyOrderPaymentAmount;\\n        uint256 buyOrderNftAmount;\\n        bytes buyOrderData;\\n    }\\n\\n    /*All accept bid parameters need for create buyOrder and sellOrder*/\\n    struct AcceptBid {\\n        address bidMaker; //\\n        uint256 bidNftAmount;\\n        bytes4 nftAssetClass;\\n        bytes nftData;\\n        uint256 bidPaymentAmount;\\n        address paymentToken;\\n        uint256 bidSalt;\\n        uint bidStart;\\n        uint bidEnd;\\n        bytes4 bidDataType;\\n        bytes bidData;\\n        bytes bidSignature;\\n        uint256 sellOrderPaymentAmount;\\n        uint256 sellOrderNftAmount;\\n        bytes sellOrderData;\\n    }\\n}\\n\",\"keccak256\":\"0xd4df19802dce7c617ac5c7dbb7c332a3ea300b30e4b43ec101005d66c8a3ebad\",\"license\":\"MIT\"},\"src/librairies/LibMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nlibrary LibMath {\\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\\n    ///      Reverts if rounding error is >= 0.1%\\n    /// @param numerator Numerator.\\n    /// @param denominator Denominator.\\n    /// @param target Value to calculate partial of.\\n    /// @return partialAmount value of target rounded down.\\n    function safeGetPartialAmountFloor(\\n        uint256 numerator,\\n        uint256 denominator,\\n        uint256 target\\n    ) internal pure returns (uint256 partialAmount) {\\n        if (isRoundingErrorFloor(numerator, denominator, target)) {\\n            revert(\\\"rounding error\\\");\\n        }\\n        partialAmount = (numerator * (target)) / (denominator);\\n    }\\n\\n    /// @dev Checks if rounding error >= 0.1% when rounding down.\\n    /// @param numerator Numerator.\\n    /// @param denominator Denominator.\\n    /// @param target Value to multiply with numerator/denominator.\\n    /// @return isError Rounding error is present.\\n    function isRoundingErrorFloor(\\n        uint256 numerator,\\n        uint256 denominator,\\n        uint256 target\\n    ) internal pure returns (bool isError) {\\n        if (denominator == 0) {\\n            revert(\\\"division by zero\\\");\\n        }\\n\\n        // The absolute rounding error is the difference between the rounded\\n        // value and the ideal value. The relative rounding error is the\\n        // absolute rounding error divided by the absolute value of the\\n        // ideal value. This is undefined when the ideal value is zero.\\n        //\\n        // The ideal value is `numerator * target / denominator`.\\n        // Let's call `numerator * target % denominator` the remainder.\\n        // The absolute error is `remainder / denominator`.\\n        //\\n        // When the ideal value is zero, we require the absolute error to\\n        // be zero. Fortunately, this is always the case. The ideal value is\\n        // zero iff `numerator == 0` and/or `target == 0`. In this case the\\n        // remainder and absolute error are also zero.\\n        if (target == 0 || numerator == 0) {\\n            return false;\\n        }\\n\\n        // Otherwise, we want the relative rounding error to be strictly\\n        // less than 0.1%.\\n        // The relative error is `remainder / (numerator * target)`.\\n        // We want the relative error less than 1 / 1000:\\n        //        remainder / (numerator * target)  <  1 / 1000\\n        // or equivalently:\\n        //        1000 * remainder  <  numerator * target\\n        // so we have a rounding error iff:\\n        //        1000 * remainder  >=  numerator * target\\n        uint256 remainder = mulmod(target, numerator, denominator);\\n        isError = remainder * (1000) >= numerator * (target);\\n    }\\n\\n    function safeGetPartialAmountCeil(\\n        uint256 numerator,\\n        uint256 denominator,\\n        uint256 target\\n    ) internal pure returns (uint256 partialAmount) {\\n        if (isRoundingErrorCeil(numerator, denominator, target)) {\\n            revert(\\\"rounding error\\\");\\n        }\\n        partialAmount = (numerator * (target)) + (denominator - (1)) / (denominator);\\n    }\\n\\n    /// @dev Checks if rounding error >= 0.1% when rounding up.\\n    /// @param numerator Numerator.\\n    /// @param denominator Denominator.\\n    /// @param target Value to multiply with numerator/denominator.\\n    /// @return isError Rounding error is present.\\n    function isRoundingErrorCeil(\\n        uint256 numerator,\\n        uint256 denominator,\\n        uint256 target\\n    ) internal pure returns (bool isError) {\\n        if (denominator == 0) {\\n            revert(\\\"division by zero\\\");\\n        }\\n\\n        // See the comments in `isRoundingError`.\\n        if (target == 0 || numerator == 0) {\\n            // When either is zero, the ideal value and rounded value are zero\\n            // and there is no rounding error. (Although the relative error\\n            // is undefined.)\\n            return false;\\n        }\\n        // Compute remainder as before\\n        uint256 remainder = mulmod(target, numerator, denominator);\\n        remainder = denominator - ((remainder) % denominator);\\n        isError = remainder * (1000) >= numerator * (target);\\n        return isError;\\n    }\\n}\\n\",\"keccak256\":\"0x37ff06f06bf5c378e17b7c166e469b66058be11979f0d983e580c06090123b7d\",\"license\":\"MIT\"},\"src/librairies/LibOrder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./LibAsset.sol\\\";\\nimport \\\"./LibMath.sol\\\";\\nimport \\\"./LibOrderDataV3.sol\\\";\\nimport \\\"./LibOrderDataV2.sol\\\";\\nimport \\\"./LibOrderDataV1.sol\\\";\\n\\nlibrary LibOrder {\\n    bytes32 public constant ORDER_TYPEHASH =\\n        keccak256(\\n            \\\"Order(address maker,Asset makeAsset,address taker,Asset takeAsset,uint256 salt,uint256 start,uint256 end,bytes4 dataType,bytes data)Asset(AssetType assetType,uint256 value)AssetType(bytes4 assetClass,bytes data)\\\"\\n        );\\n\\n    bytes4 public constant DEFAULT_ORDER_TYPE = 0xffffffff;\\n\\n    struct Order {\\n        address maker;\\n        LibAsset.Asset makeAsset;\\n        address taker;\\n        LibAsset.Asset takeAsset;\\n        uint salt;\\n        uint start;\\n        uint end;\\n        bytes4 dataType;\\n        bytes data;\\n    }\\n\\n    function calculateRemaining(\\n        Order memory order,\\n        uint fill,\\n        bool isMakeFill\\n    ) internal pure returns (uint makeValue, uint takeValue) {\\n        if (isMakeFill) {\\n            makeValue = order.makeAsset.value - (fill);\\n            takeValue = LibMath.safeGetPartialAmountFloor(order.takeAsset.value, order.makeAsset.value, makeValue);\\n        } else {\\n            takeValue = order.takeAsset.value - (fill);\\n            makeValue = LibMath.safeGetPartialAmountFloor(order.makeAsset.value, order.takeAsset.value, takeValue);\\n        }\\n    }\\n\\n    function hashKey(Order memory order) internal pure returns (bytes32) {\\n        if (order.dataType == LibOrderDataV1.V1 || order.dataType == DEFAULT_ORDER_TYPE) {\\n            return\\n                keccak256(\\n                    abi.encode(\\n                        order.maker,\\n                        LibAsset.hash(order.makeAsset.assetType),\\n                        LibAsset.hash(order.takeAsset.assetType),\\n                        order.salt\\n                    )\\n                );\\n        } else {\\n            //order.data is in hash for V2, V3 and all new order\\n            return\\n                keccak256(\\n                    abi.encode(\\n                        order.maker,\\n                        LibAsset.hash(order.makeAsset.assetType),\\n                        LibAsset.hash(order.takeAsset.assetType),\\n                        order.salt,\\n                        order.data\\n                    )\\n                );\\n        }\\n    }\\n\\n    function hash(Order memory order) internal pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    ORDER_TYPEHASH,\\n                    order.maker,\\n                    LibAsset.hash(order.makeAsset),\\n                    order.taker,\\n                    LibAsset.hash(order.takeAsset),\\n                    order.salt,\\n                    order.start,\\n                    order.end,\\n                    order.dataType,\\n                    keccak256(order.data)\\n                )\\n            );\\n    }\\n\\n    function validateOrderTime(LibOrder.Order memory order) internal view {\\n        require(order.start == 0 || order.start < block.timestamp, \\\"Order start validation failed\\\");\\n        require(order.end == 0 || order.end > block.timestamp, \\\"Order end validation failed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x9d40d06c9001c1f5a4a3b994fdcb3ce6746eae901b575998ea1dc7fca76cbc5c\",\"license\":\"MIT\"},\"src/librairies/LibOrderDataV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./LibPart.sol\\\";\\n\\nlibrary LibOrderDataV1 {\\n    bytes4 public constant V1 = bytes4(keccak256(\\\"V1\\\"));\\n\\n    struct DataV1 {\\n        LibPart.Part[] payouts;\\n        LibPart.Part[] originFees;\\n    }\\n}\\n\",\"keccak256\":\"0x43b6827718725ecbd90b9d9fbd0e96f39221d65197c87a7d0b6afb0d03105fe8\",\"license\":\"MIT\"},\"src/librairies/LibOrderDataV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./LibPart.sol\\\";\\n\\nlibrary LibOrderDataV2 {\\n    bytes4 public constant V2 = bytes4(keccak256(\\\"V2\\\"));\\n\\n    struct DataV2 {\\n        LibPart.Part[] payouts;\\n        LibPart.Part[] originFees;\\n        bool isMakeFill;\\n    }\\n}\\n\",\"keccak256\":\"0x40d057f168ce6ca96e58ecd0418fdf99f8e39af544af59f0260c55bb0d961dac\",\"license\":\"MIT\"},\"src/librairies/LibOrderDataV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./LibPart.sol\\\";\\n\\nlibrary LibOrderDataV3 {\\n    bytes4 public constant V3_SELL = bytes4(keccak256(\\\"V3_SELL\\\"));\\n    bytes4 public constant V3_BUY = bytes4(keccak256(\\\"V3_BUY\\\"));\\n\\n    struct DataV3_SELL {\\n        uint payouts;\\n        uint originFeeFirst;\\n        uint originFeeSecond;\\n        uint maxFeesBasePoint;\\n        bytes32 marketplaceMarker;\\n    }\\n\\n    struct DataV3_BUY {\\n        uint payouts;\\n        uint originFeeFirst;\\n        uint originFeeSecond;\\n        bytes32 marketplaceMarker;\\n    }\\n}\\n\",\"keccak256\":\"0xf931bfd1f243272c5e106e85b66a6fab9527e1258e5633f10b6bc0bb7a83c3e5\",\"license\":\"MIT\"},\"src/librairies/LibPart.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nlibrary LibPart {\\n    bytes32 public constant TYPE_HASH = keccak256(\\\"Part(address account,uint96 value)\\\");\\n\\n    struct Part {\\n        address payable account;\\n        uint96 value;\\n    }\\n\\n    function hash(Part memory part) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(TYPE_HASH, part.account, part.value));\\n    }\\n}\\n\",\"keccak256\":\"0xedbb696dbf7cd7d5325fc114fd5b7531cf1b1676df98cc5a4cf6330b609ef651\",\"license\":\"MIT\"},\"src/librairies/LibTransfer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nlibrary LibTransfer {\\n    function transferEth(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(\\\"\\\");\\n        require(success, \\\"LibTransfer BaseCurrency transfer failed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x1755b75d1a33d9acb9ba3428698657d091681399b949c43e0844bf1dc4847b2c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50615e7a80620000216000396000f3fe60806040526004361061023f5760003560e01c806386619edf1161012e578063acf342bd116100ab578063df6c25581161006f578063df6c2558146106b6578063f23a6e61146106d6578063f2fde38b14610702578063fc40c9c714610722578063fee03e9e1461074257600080fd5b8063acf342bd14610617578063bc197c8114610637578063c1aa293814610663578063c6d0ffd714610683578063d6dc927f146106a357600080fd5b8063996c6cc3116100f2578063996c6cc3146105775780639981a6d714610597578063a05f32dc146105b7578063a8e90b57146105d7578063aa78ae93146105f757600080fd5b806386619edf146104d05780638ae42905146104e35780638da5cb5b146105035780639137f9c21461052157806392e871bf1461055757600080fd5b806359e86829116101bc578063715018a611610180578063715018a61461044657806373a963d71461045b5780637908716c1461047b5780637da50dd61461049b5780638456cb59146104bb57600080fd5b806359e86829146103bb5780635c975abb146103db5780635ea1e4c9146103f35780635f2772e31461041357806365c5bb061461042657600080fd5b8063368c802c11610203578063368c802c146103335780633f4ba83a146103465780634fe356691461035b57806357f57d6a1461037b578063596fa9e31461039b57600080fd5b806301ffc9a71461024b57806308b1571d1461028057806310f91b0b146102a2578063150b7a02146102cf5780631d9a08be1461031357600080fd5b3661024657005b600080fd5b34801561025757600080fd5b5061026b610266366004613bdb565b610762565b60405190151581526020015b60405180910390f35b34801561028c57600080fd5b506102a061029b366004613c0d565b610799565b005b3480156102ae57600080fd5b5060a0546102c2906001600160a01b031681565b6040516102779190613c2a565b3480156102db57600080fd5b506102fa6102ea366004613e3c565b630a85bd0160e11b949350505050565b6040516001600160e01b03199091168152602001610277565b34801561031f57600080fd5b506102a061032e366004613c0d565b6107c3565b6102a0610341366004613f58565b6107ed565b34801561035257600080fd5b506102a06108bc565b34801561036757600080fd5b506099546102c2906001600160a01b031681565b34801561038757600080fd5b506102a0610396366004613c0d565b6108ce565b3480156103a757600080fd5b50609f546102c2906001600160a01b031681565b3480156103c757600080fd5b506102a06103d6366004613c0d565b6108f8565b3480156103e757600080fd5b5060655460ff1661026b565b3480156103ff57600080fd5b50609d546102c2906001600160a01b031681565b6102a06104213660046140ee565b610922565b34801561043257600080fd5b506102a0610441366004613c0d565b610a35565b34801561045257600080fd5b506102a0610a5f565b34801561046757600080fd5b506102a0610476366004613c0d565b610a71565b34801561048757600080fd5b506102a0610496366004613c0d565b610a9b565b3480156104a757600080fd5b506102a06104b636600461425e565b610ac5565b3480156104c757600080fd5b506102a0610b2b565b6102a06104de366004614297565b610b3b565b3480156104ef57600080fd5b506102a06104fe366004613c0d565b610b79565b34801561050f57600080fd5b506033546001600160a01b03166102c2565b34801561052d57600080fd5b506102c261053c366004614392565b60a3602052600090815260409020546001600160a01b031681565b34801561056357600080fd5b506102a0610572366004613c0d565b610ba3565b34801561058357600080fd5b5060a1546102c2906001600160a01b031681565b3480156105a357600080fd5b506102a06105b2366004613c0d565b610bcd565b3480156105c357600080fd5b506097546102c2906001600160a01b031681565b3480156105e357600080fd5b50609c546102c2906001600160a01b031681565b34801561060357600080fd5b506102a06106123660046143af565b610bf7565b34801561062357600080fd5b50609a546102c2906001600160a01b031681565b34801561064357600080fd5b506102fa610652366004614458565b63bc197c8160e01b95945050505050565b34801561066f57600080fd5b506102a061067e366004613c0d565b610d9a565b34801561068f57600080fd5b506098546102c2906001600160a01b031681565b6102a06106b1366004614505565b610dc4565b3480156106c257600080fd5b50609e546102c2906001600160a01b031681565b3480156106e257600080fd5b506102fa6106f1366004614579565b63f23a6e6160e01b95945050505050565b34801561070e57600080fd5b506102a061071d366004613c0d565b610f83565b34801561072e57600080fd5b50609b546102c2906001600160a01b031681565b34801561074e57600080fd5b5060a2546102c2906001600160a01b031681565b60006001600160e01b03198216630271189760e51b148061079357506301ffc9a760e01b6001600160e01b03198316145b92915050565b6107a1610ffc565b609e80546001600160a01b0319166001600160a01b0392909216919091179055565b6107cb610ffc565b609b80546001600160a01b0319166001600160a01b0392909216919091179055565b6107f5611056565b600080600061080586600061109c565b9250925092506108123390565b6001600160a01b03167fc5dd8c21802b423a9c822ee9c934f042186e6bb7097a1dd17717343ee84df7148460405161084e911515815260200190565b60405180910390a260408601516001600160a01b031661088157610872828661211e565b61087c818561211e565b6108ac565b61089086604001518387612149565b61089f86604001518286612149565b6108ac86604001516121ed565b6108b46122f4565b505050505050565b6108c4610ffc565b6108cc612305565b565b6108d6610ffc565b609c80546001600160a01b0319166001600160a01b0392909216919091179055565b610900610ffc565b60a080546001600160a01b0319166001600160a01b0392909216919091179055565b61092a611056565b60008160000151600081518110610943576109436145e1565b60200260200101519050600082600001516001846000015151610966919061460d565b81518110610976576109766145e1565b602090810291909101015160a1549091506001600160a01b03808316911614156109d35760006109a584612351565b9050806109cd5760405162461bcd60e51b81526004016109c490614624565b60405180910390fd5b50610a20565b60a1546001600160a01b03838116911614156109f45760006109a584612916565b60006109ff84612cd0565b905080610a1e5760405162461bcd60e51b81526004016109c490614624565b505b610a2c87878787610dc4565b50505050505050565b610a3d610ffc565b609d80546001600160a01b0319166001600160a01b0392909216919091179055565b610a67610ffc565b6108cc60006130c3565b610a79610ffc565b609f80546001600160a01b0319166001600160a01b0392909216919091179055565b610aa3610ffc565b609880546001600160a01b0319166001600160a01b0392909216919091179055565b610acd610ffc565b8060a36000846007811115610ae457610ae4614651565b6007811115610af557610af5614651565b815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055505050565b610b33610ffc565b6108cc613115565b610b43611056565b6000610b4e82613152565b905080610b6d5760405162461bcd60e51b81526004016109c490614624565b6108b486868686610dc4565b610b81610ffc565b60a280546001600160a01b0319166001600160a01b0392909216919091179055565b610bab610ffc565b609a80546001600160a01b0319166001600160a01b0392909216919091179055565b610bd5610ffc565b609980546001600160a01b0319166001600160a01b0392909216919091179055565b600054610100900460ff1615808015610c175750600054600160ff909116105b80610c315750303b158015610c31575060005460ff166001145b610c945760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016109c4565b6000805460ff191660011790558015610cb7576000805461ff0019166101001790555b610cbf613696565b610cc76136bd565b610ccf6136ed565b609780546001600160a01b03199081166001600160a01b03808d1691909117909255609880548216838c16179055609980548216838b16179055609a80548216838a16179055609b80548216838916179055609c80548216838816179055609d80548216838716179055609e80549091169184169190911790558015610d8f576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050505050565b610da2610ffc565b60a180546001600160a01b0319166001600160a01b0392909216919091179055565b610dcc611056565b6000806000808751905060005b81811015610f0b576000806000610e098c8581518110610dfb57610dfb6145e1565b60200260200101518a61109c565b9250925092508580610e185750825b604051841515815290965033907fc5dd8c21802b423a9c822ee9c934f042186e6bb7097a1dd17717343ee84df7149060200160405180910390a260006001600160a01b03168c8581518110610e6f57610e6f6145e1565b6020026020010151604001516001600160a01b03161415610ea757610e948289614667565b9750610ea08188614667565b9650610ef7565b610ecf8c8581518110610ebc57610ebc6145e1565b602002602001015160400151838d612149565b610ef78c8581518110610ee457610ee46145e1565b602002602001015160400151828c612149565b50505080610f049061467f565b9050610dd9565b5081610f545760405162461bcd60e51b81526020600482015260186024820152776e6f207375636365737366756c20657865637574696f6e7360401b60448201526064016109c4565b610f5e848861211e565b610f68838761211e565b610f7188613720565b610f796122f4565b5050505050505050565b610f8b610ffc565b6001600160a01b038116610ff05760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016109c4565b610ff9816130c3565b50565b6033546001600160a01b031633146108cc5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016109c4565b60655460ff16156108cc5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016109c4565b60008060008060006110bb87608001518860600151896000015161379a565b915091506000876020015190506000806110dd8a606001518b60200151613895565b60408c015191935091506001600160a01b031615611348576000925060008a604001516001600160a01b03166370a08231306040518263ffffffff1660e01b815260040161112b9190613c2a565b60206040518083038186803b15801561114357600080fd5b505afa158015611157573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061117b919061469a565b9050600082848d602001516111909190614667565b61119a9190614667565b90508181111561121c5760a25460408d01516001600160a01b039091169063776062c39033306111ca878761460d565b6040518563ffffffff1660e01b81526004016111e994939291906146b3565b600060405180830381600087803b15801561120357600080fd5b505af1158015611217573d6000803e3d6000fd5b505050505b600061122b8d600001516138c6565b905060008d604001516001600160a01b031663dd62ed3e83306040518363ffffffff1660e01b81526004016112619291906146dd565b60206040518083038186803b15801561127957600080fd5b505afa15801561128d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112b1919061469a565b905082811015611343578d604001516001600160a01b031663095ea7b3836000196040518363ffffffff1660e01b81526004016112ef9291906146f7565b602060405180830381600087803b15801561130957600080fd5b505af115801561131d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611341919061471b565b505b505050505b60028a51600781111561135d5761135d614651565b141561144257609a546040516000916001600160a01b0316908590611383908990614764565b60006040518083038185875af1925050503d80600081146113c0576040519150601f19603f3d011682016040523d82523d6000602084013e6113c5565b606091505b5050905089156113ef57806113ea576000806000985098509850505050505050612117565b61143c565b8061143c5760405162461bcd60e51b815260206004820152601b60248201527f507572636861736520536561506f72745f315f35206661696c6564000000000060448201526064016109c4565b506120fc565b60018a51600781111561145757611457614651565b1415611531576099546040516000916001600160a01b031690859061147d908990614764565b60006040518083038185875af1925050503d80600081146114ba576040519150601f19603f3d011682016040523d82523d6000602084013e6114bf565b606091505b5050905089156114e457806113ea576000806000985098509850505050505050612117565b8061143c5760405162461bcd60e51b815260206004820152601b60248201527f507572636861736520536561506f72745f315f34206661696c6564000000000060448201526064016109c4565b60068a51600781111561154657611546614651565b1415611620576097546040516000916001600160a01b031690859061156c908990614764565b60006040518083038185875af1925050503d80600081146115a9576040519150601f19603f3d011682016040523d82523d6000602084013e6115ae565b606091505b5050905089156115d357806113ea576000806000985098509850505050505050612117565b8061143c5760405162461bcd60e51b815260206004820152601b60248201527f50757263686173652047686f73744d61726b6574206661696c6564000000000060448201526064016109c4565b60008a51600781111561163557611635614651565b1415611709576098546040516000916001600160a01b031690859061165b908990614764565b60006040518083038185875af1925050503d8060008114611698576040519150601f19603f3d011682016040523d82523d6000602084013e61169d565b606091505b5050905089156116c257806113ea576000806000985098509850505050505050612117565b8061143c5760405162461bcd60e51b8152602060048201526017602482015276141d5c98da185cd94814985c9a589b194819985a5b1959604a1b60448201526064016109c4565b60038a51600781111561171e5761171e614651565b1415611bb35760008580602001905181019061173a9190614c7c565b905089156117be57609b5460405163357a150b60e01b81526001600160a01b039091169063357a150b908690611774908590600401614f20565b6000604051808303818588803b15801561178d57600080fd5b505af19350505050801561179f575060015b6117b9576000806000985098509850505050505050612117565b611823565b609b5460405163357a150b60e01b81526001600160a01b039091169063357a150b9086906117f0908590600401614f20565b6000604051808303818588803b15801561180957600080fd5b505af115801561181d573d6000803e3d6000fd5b50505050505b60208101515160005b81811015611bab5760008360200151828151811061184c5761184c6145e1565b6020026020010151602001519050600084602001518381518110611872576118726145e1565b6020026020010151604001519050600085600001518381518110611898576118986145e1565b6020026020010151610100015182815181106118b6576118b66145e1565b60200260200101516020015190506000866000015184815181106118dc576118dc6145e1565b602002602001015160e00151511180156119185750600086602001518581518110611909576119096145e1565b602002602001015160c0015151115b1561196a5761196a8187602001518681518110611937576119376145e1565b602002602001015160c0015188600001518681518110611959576119596145e1565b602002602001015160e0015161390f565b855180518490811061197e5761197e6145e1565b60200260200101516080015160011415611a5f576000818060200190518101906119a891906150dc565b905060005b8151811015611a585760008282815181106119ca576119ca6145e1565b6020026020010151905080600001516001600160a01b03166342842e0e306119ef3390565b84602001516040518463ffffffff1660e01b8152600401611a129392919061519a565b600060405180830381600087803b158015611a2c57600080fd5b505af1158015611a40573d6000803e3d6000fd5b50505050508080611a509061467f565b9150506119ad565b5050611b97565b8551805184908110611a7357611a736145e1565b60200260200101516080015160021415611b5357600081806020019051810190611a9d91906151be565b905060005b8151811015611a58576000828281518110611abf57611abf6145e1565b6020026020010151905080600001516001600160a01b031663f242432a30611ae43390565b846020015185604001516040518563ffffffff1660e01b8152600401611b0d9493929190615284565b600060405180830381600087803b158015611b2757600080fd5b505af1158015611b3b573d6000803e3d6000fd5b50505050508080611b4b9061467f565b915050611aa2565b60405162461bcd60e51b81526020600482015260196024820152783ab735b737bbb7103232b632b3b0ba32aa3cb832903c193c9960391b60448201526064016109c4565b50505080611ba49061467f565b905061182c565b5050506120fc565b60048a516007811115611bc857611bc8614651565b1415611df657600080600087806020019051810190611be791906153da565b9250925092508b15611c7357609c54604051635a72594b60e11b81526001600160a01b039091169063b4e4b296908890611c2790879087906004016154c2565b6000604051808303818588803b158015611c4057600080fd5b505af193505050508015611c52575060015b611c6e5760008060009a509a509a505050505050505050612117565b611cda565b609c54604051635a72594b60e11b81526001600160a01b039091169063b4e4b296908890611ca790879087906004016154c2565b6000604051808303818588803b158015611cc057600080fd5b505af1158015611cd4573d6000803e3d6000fd5b50505050505b6001600160e01b031981166339d690a360e11b1415611d625760408201516001600160a01b03166342842e0e303385608001516040518463ffffffff1660e01b8152600401611d2b9392919061519a565b600060405180830381600087803b158015611d4557600080fd5b505af1158015611d59573d6000803e3d6000fd5b50505050611bab565b6001600160e01b0319811663025ceed960e61b1415611db957604082810151608084015160a08501519251637921219560e11b81526001600160a01b039092169263f242432a92611d2b9230923392600401615284565b60405162461bcd60e51b8152602060048201526012602482015271556e6b6e6f776e20746f6b656e207479706560701b60448201526064016109c4565b60058a516007811115611e0b57611e0b614651565b1415611ee057609d546040516000916001600160a01b0316908590611e31908990614764565b60006040518083038185875af1925050503d8060008114611e6e576040519150601f19603f3d011682016040523d82523d6000602084013e611e73565b606091505b505090508915611e9857806113ea576000806000985098509850505050505050612117565b8061143c5760405162461bcd60e51b8152602060048201526018602482015277141d5c98da185cd94814dd591bd4ddd85c0819985a5b195960421b60448201526064016109c4565b60078a516007811115611ef557611ef5614651565b14156120b957600080600087806020019051810190611f14919061587c565b9250925092508b15611fa057609e54604051639a1fc3a760e01b81526001600160a01b0390911690639a1fc3a7908890611f549087908790600401615aa0565b6000604051808303818588803b158015611f6d57600080fd5b505af193505050508015611f7f575060015b611f9b5760008060009a509a509a505050505050505050612117565b612007565b609e54604051639a1fc3a760e01b81526001600160a01b0390911690639a1fc3a7908890611fd49087908790600401615aa0565b6000604051808303818588803b158015611fed57600080fd5b505af1158015612001573d6000803e3d6000fd5b50505050505b6001600160e01b031981166339d690a360e11b141561205c5782516060810151608090910151604051632142170760e11b81526001600160a01b03909216916342842e0e91611d2b913091339160040161519a565b6001600160e01b0319811663025ceed960e61b1415611db95782516060810151608082015160a090920151604051637921219560e11b81526001600160a01b039092169263f242432a92611d2b9230923392909190600401615284565b60405162461bcd60e51b8152602060048201526018602482015277556e6b6e6f776e2070757263686173652064657461696c7360401b60448201526064016109c4565b61210a848b602001516139bc565b6001975090955093505050505b9250925092565b60008211801561213657506001600160a01b03811615155b15612145576121458183613a60565b5050565b60008211801561216157506001600160a01b03811615155b156121e85760405163a9059cbb60e01b81526001600160a01b0384169063a9059cbb9061219490849086906004016146f7565b602060405180830381600087803b1580156121ae57600080fd5b505af11580156121c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121e6919061471b565b505b505050565b6040516370a0823160e01b81526000906001600160a01b038316906370a082319061221c903090600401613c2a565b60206040518083038186803b15801561223457600080fd5b505afa158015612248573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061226c919061469a565b905080156121455760405163a9059cbb60e01b81526001600160a01b0383169063a9059cbb906122a290339085906004016146f7565b602060405180830381600087803b1580156122bc57600080fd5b505af11580156122d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121e8919061471b565b478015610ff957610ff93382613a60565b61230d613b14565b6065805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516123479190613c2a565b60405180910390a1565b600080826000015160008151811061236b5761236b6145e1565b6020026020010151905060008360000151600185600001515161238e919061460d565b8151811061239e5761239e6145e1565b602090810291909101015160a2549091506001600160a01b031663776062c383333088604001516040518563ffffffff1660e01b81526004016123e494939291906146b3565b600060405180830381600087803b1580156123fe57600080fd5b505af1158015612412573d6000803e3d6000fd5b505060a1546001600160a01b038581169116149150508015612435575083608001515b156124b45760a1546040808601519051632e1a7d4d60e01b81526001600160a01b0390921691632e1a7d4d916124719160040190815260200190565b600060405180830381600087803b15801561248b57600080fd5b505af192505050801561249c575060015b6124aa575060009392505050565b5060019392505050565b6000341180156124d1575060a1546001600160a01b038281169116145b1561253a5760a160009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b15801561252657600080fd5b505af19350505050801561249c57506124aa565b609f54604051636eb1769f60e11b81526000916001600160a01b038086169263dd62ed3e9261256f92169030906004016146dd565b60206040518083038186803b15801561258757600080fd5b505afa15801561259b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125bf919061469a565b9050846040015181101561265757609f5460405163095ea7b360e01b81526001600160a01b038581169263095ea7b3926126039290911690600019906004016146f7565b602060405180830381600087803b15801561261d57600080fd5b505af1158015612631573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612655919061471b565b505b46600061a86a82148061266b57508161a869145b9050600047821561273957609f5460208a01516040808c015160608d01518d519251636d3420ed60e01b81526000956001600160a01b031694636d3420ed946126be949193919230904290600401615b37565b600060405180830381600087803b1580156126d857600080fd5b505af11580156126ec573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526127149190810190615be2565b905080600081518110612729576127296145e1565b60200260200101519250506127f1565b609f5460208a01516040808c01518c519151632512eca560e11b81526000946001600160a01b031693634a25d94a9361277a93919230904290600401615c16565b600060405180830381600087803b15801561279457600080fd5b505af11580156127a8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526127d09190810190615be2565b9050806000815181106127e5576127e56145e1565b60200260200101519250505b60408901514790831015612890576001600160a01b03881663a9059cbb33858d6040015161281f919061460d565b6040518363ffffffff1660e01b815260040161283c9291906146f7565b602060405180830381600087803b15801561285657600080fd5b505af115801561286a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061288e919061471b565b505b8960800151156129065760a1546001600160a01b031663d0e30db06128b5848461460d565b6040518263ffffffff1660e01b81526004016000604051808303818588803b1580156128e057600080fd5b505af1935050505080156128f2575060015b612906575060009998505050505050505050565b5060019998505050505050505050565b6000808260000151600081518110612930576129306145e1565b60200260200101519050600083600001516001856000015151612953919061460d565b81518110612963576129636145e1565b602002602001015190503460001415612a505760a2546001600160a01b031663776062c383333088604001516040518563ffffffff1660e01b81526004016129ae94939291906146b3565b600060405180830381600087803b1580156129c857600080fd5b505af11580156129dc573d6000803e3d6000fd5b505060a1546040808801519051632e1a7d4d60e01b81526001600160a01b039092169350632e1a7d4d9250612a179160040190815260200190565b600060405180830381600087803b158015612a3157600080fd5b505af1925050508015612a42575060015b612a50575060009392505050565b600034118015612a6d575060a1546001600160a01b038281169116145b15612b705760a160009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b158015612ac257600080fd5b505af193505050508015612ad4575060015b612ae2575060009392505050565b604080850151905163a9059cbb60e01b81526001600160a01b0383169163a9059cbb91612b139133916004016146f7565b602060405180830381600087803b158015612b2d57600080fd5b505af1158015612b41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b65919061471b565b506001949350505050565b46600061a86a821480612b8457508161a869145b90508015612c2d57609f54604080880151602089015160608a01518a519351630217ab2560e51b81526001600160a01b03909516946342f564a094612bd193929130904290600401615c52565b6000604051808303818588803b158015612bea57600080fd5b505af1158015612bfe573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f19168201604052612c279190810190615be2565b50612cc4565b609f5460408088015160208901518951925163fb3bdb4160e01b81526001600160a01b039094169363fb3bdb4193612c6c929130904290600401615c9b565b6000604051808303818588803b158015612c8557600080fd5b505af1158015612c99573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f19168201604052612cc29190810190615be2565b505b50600195945050505050565b6000808260000151600081518110612cea57612cea6145e1565b602090810291909101015160a2549091506001600160a01b031663776062c382333087604001516040518563ffffffff1660e01b8152600401612d3094939291906146b3565b600060405180830381600087803b158015612d4a57600080fd5b505af1158015612d5e573d6000803e3d6000fd5b5050609f54604051636eb1769f60e11b8152600093506001600160a01b03808616935063dd62ed3e92612d989291169030906004016146dd565b60206040518083038186803b158015612db057600080fd5b505afa158015612dc4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612de8919061469a565b90508360400151811015612e8057609f5460405163095ea7b360e01b81526001600160a01b038481169263095ea7b392612e2c9290911690600019906004016146f7565b602060405180830381600087803b158015612e4657600080fd5b505af1158015612e5a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e7e919061471b565b505b46600061a86a821480612e9457508161a869145b905060008115612f6157609f5460208801516040808a015160608b01518b51925163a7b856d360e01b81526000956001600160a01b03169463a7b856d394612ee6949193919230904290600401615b37565b600060405180830381600087803b158015612f0057600080fd5b505af1158015612f14573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612f3c9190810190615be2565b905080600081518110612f5157612f516145e1565b6020026020010151915050613019565b609f5460208801516040808a01518a519151634401edf760e11b81526000946001600160a01b031693638803dbee93612fa293919230904290600401615c16565b600060405180830381600087803b158015612fbc57600080fd5b505af1158015612fd0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612ff89190810190615be2565b90508060008151811061300d5761300d6145e1565b60200260200101519150505b86604001518110156130b6576001600160a01b03851663a9059cbb33838a60400151613045919061460d565b6040518363ffffffff1660e01b81526004016130629291906146f7565b602060405180830381600087803b15801561307c57600080fd5b505af1158015613090573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130b4919061471b565b505b5060019695505050505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b61311d611056565b6065805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861233a3390565b6000806000808460000151905060006014825161316f919061460d565b9050600160601b81602084010151049350600160601b600060208401015104925034600014156132045760a2546001600160a01b031663776062c38533308a604001516040518563ffffffff1660e01b81526004016131d194939291906146b3565b600060405180830381600087803b1580156131eb57600080fd5b505af11580156131ff573d6000803e3d6000fd5b505050505b60a1546001600160a01b038581169116148015613222575085606001515b156132995760a1546020870151604051632e1a7d4d60e01b81526001600160a01b0390921691632e1a7d4d9161325e9160040190815260200190565b600060405180830381600087803b15801561327857600080fd5b505af1925050508015613289575060015b612cc45750600095945050505050565b6000341180156132b6575060a1546001600160a01b038481169116145b1561331f5760a160009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b15801561330b57600080fd5b505af1935050505080156132895750612cc4565b60a054604051636eb1769f60e11b81526000916001600160a01b038088169263dd62ed3e9261335492169030906004016146dd565b60206040518083038186803b15801561336c57600080fd5b505afa158015613380573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133a4919061469a565b9050866040015181101561343c5760a05460405163095ea7b360e01b81526001600160a01b038781169263095ea7b3926133e89290911690600019906004016146f7565b602060405180830381600087803b15801561340257600080fd5b505af1158015613416573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061343a919061471b565b505b6040805160a08082018352895182523060208084019190915242838501528a01516060830152898301516080830152549151631e51809360e31b815290916000916001600160a01b039091169063f28c049890349061349f908690600401615cd0565b6020604051808303818588803b1580156134b857600080fd5b505af1935050505080156134e9575060408051601f3d908101601f191682019092526134e69181019061469a565b60015b6134fc5750600098975050505050505050565b905060a060009054906101000a90046001600160a01b03166001600160a01b03166312210e8a6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561354e57600080fd5b505af1158015613562573d6000803e3d6000fd5b505050508860600151156135e55760a15460208a0151604051632e1a7d4d60e01b81526001600160a01b0390921691632e1a7d4d916135a79160040190815260200190565b600060405180830381600087803b1580156135c157600080fd5b505af19250505080156135d2575060015b6135e55750600098975050505050505050565b88604001518110156136875734613687576001600160a01b03871663a9059cbb33838c60400151613616919061460d565b6040518363ffffffff1660e01b81526004016136339291906146f7565b602060405180830381600087803b15801561364d57600080fd5b505af1158015613661573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613685919061471b565b505b50600198975050505050505050565b600054610100900460ff166108cc5760405162461bcd60e51b81526004016109c490615d28565b600054610100900460ff166136e45760405162461bcd60e51b81526004016109c490615d28565b6108cc336130c3565b600054610100900460ff166137145760405162461bcd60e51b81526004016109c490615d28565b6065805460ff19169055565b805160005b818110156121e85760006001600160a01b031683828151811061374a5761374a6145e1565b6020026020010151604001516001600160a01b03161461378a5761378a838281518110613779576137796145e1565b6020026020010151604001516121ed565b6137938161467f565b9050613725565b6060806000602085901c61ffff1660018111156137b9576137b9614651565b9050606060008260018111156137d1576137d1614651565b14156137e357869350915061388d9050565b60018260018111156137f7576137f7614651565b1415613845576000878060200190518101906138139190615d73565b905061381e86613b5d565b1561383957806000015181602001519450945050505061388d565b519350915061388d9050565b60405162461bcd60e51b815260206004820152601a60248201527f756e6b6e6f776e206164646974696f6e616c446174615479706500000000000060448201526064016109c4565b935093915050565b60008061ffff601085901c81169085166138af8583613ba5565b6138b98683613ba5565b9350935050509250929050565b600060a360008360078111156138de576138de614651565b60078111156138ef576138ef614651565b81526020810191909152604001600020546001600160a01b031692915050565b815183511461391d57600080fd5b805183511461392b57600080fd5b825160005b818110156139b55782818151811061394a5761394a6145e1565b01602001516001600160f81b031916156139a557838181518110613970576139706145e1565b602001015160f81c60f81b85828151811061398d5761398d6145e1565b60200101906001600160f81b031916908160001a9053505b6139ae8161467f565b9050613930565b5050505050565b815160005b818110156121e65760008482815181106139dd576139dd6145e1565b60200260200101511115613a505760008482815181106139ff576139ff6145e1565b60200260200101519050600060a0868481518110613a1f57613a1f6145e1565b6020026020010151901c90506000613a408287613ba590919063ffffffff16565b9050613a4c818461211e565b5050505b613a598161467f565b90506139c1565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114613aad576040519150601f19603f3d011682016040523d82523d6000602084013e613ab2565b606091505b50509050806121e85760405162461bcd60e51b815260206004820152602860248201527f4c69625472616e73666572204261736543757272656e6379207472616e7366656044820152671c8819985a5b195960c21b60648201526084016109c4565b60655460ff166108cc5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016109c4565b60006005826007811115613b7357613b73614651565b1480613b9057506004826007811115613b8e57613b8e614651565b145b15613b9d57506001919050565b506000919050565b6000612710613bb48385615e03565b613bbe9190615e22565b9392505050565b6001600160e01b031981168114610ff957600080fd5b600060208284031215613bed57600080fd5b8135613bbe81613bc5565b6001600160a01b0381168114610ff957600080fd5b600060208284031215613c1f57600080fd5b8135613bbe81613bf8565b6001600160a01b0391909116815260200190565b634e487b7160e01b600052604160045260246000fd5b60405160a081016001600160401b0381118282101715613c7657613c76613c3e565b60405290565b604051608081016001600160401b0381118282101715613c7657613c76613c3e565b604080519081016001600160401b0381118282101715613c7657613c76613c3e565b6040516101a081016001600160401b0381118282101715613c7657613c76613c3e565b60405161016081016001600160401b0381118282101715613c7657613c76613c3e565b60405160c081016001600160401b0381118282101715613c7657613c76613c3e565b604051606081016001600160401b0381118282101715613c7657613c76613c3e565b60405161020081016001600160401b0381118282101715613c7657613c76613c3e565b60405160e081016001600160401b0381118282101715613c7657613c76613c3e565b604051601f8201601f191681016001600160401b0381118282101715613db757613db7613c3e565b604052919050565b60006001600160401b03821115613dd857613dd8613c3e565b50601f01601f191660200190565b600082601f830112613df757600080fd5b8135613e0a613e0582613dbf565b613d8f565b818152846020838601011115613e1f57600080fd5b816020850160208301376000918101602001919091529392505050565b60008060008060808587031215613e5257600080fd5b8435613e5d81613bf8565b93506020850135613e6d81613bf8565b92506040850135915060608501356001600160401b03811115613e8f57600080fd5b613e9b87828801613de6565b91505092959194509250565b60088110610ff957600080fd5b600060a08284031215613ec657600080fd5b60405160a081016001600160401b038282108183111715613ee957613ee9613c3e565b8160405282935084359150613efd82613ea7565b8183526020850135602084015260408501359150613f1a82613bf8565b816040840152606085013560608401526080850135915080821115613f3e57600080fd5b50613f4b85828601613de6565b6080830152505092915050565b600080600060608486031215613f6d57600080fd5b83356001600160401b03811115613f8357600080fd5b613f8f86828701613eb4565b9350506020840135613fa081613bf8565b91506040840135613fb081613bf8565b809150509250925092565b6001600160a01b03169052565b60006001600160401b03821115613fe157613fe1613c3e565b5060051b60200190565b600082601f830112613ffc57600080fd5b8135602061400c613e0583613fc8565b82815260059290921b8401810191818101908684111561402b57600080fd5b8286015b8481101561406a5780356001600160401b0381111561404e5760008081fd5b61405c8986838b0101613eb4565b84525091830191830161402f565b509695505050505050565b8015158114610ff957600080fd5b803561408e81614075565b919050565b600082601f8301126140a457600080fd5b813560206140b4613e0583613fc8565b82815260059290921b840181019181810190868411156140d357600080fd5b8286015b8481101561406a57803583529183019183016140d7565b600080600080600060a0868803121561410657600080fd5b85356001600160401b038082111561411d57600080fd5b61412989838a01613feb565b9650602091508188013561413c81613bf8565b9550604088013561414c81613bf8565b9450606088013561415c81614075565b935060808801358181111561417057600080fd5b880160a0818b03121561418257600080fd5b61418a613c54565b81358381111561419957600080fd5b8201601f81018c136141aa57600080fd5b80356141b8613e0582613fc8565b81815260059190911b8201860190868101908e8311156141d757600080fd5b928701925b828410156141fe5783356141ef81613bf8565b825292870192908701906141dc565b80855250505050838201358482015260408201356040820152606082013593508284111561422b57600080fd5b6142378b858401614093565b606082015261424860808301614083565b6080820152809450505050509295509295909350565b6000806040838503121561427157600080fd5b823561427c81613ea7565b9150602083013561428c81613bf8565b809150509250929050565b600080600080600060a086880312156142af57600080fd5b85356001600160401b03808211156142c657600080fd5b6142d289838a01613feb565b9650602088013591506142e482613bf8565b9094506040870135906142f682613bf8565b90935060608701359061430882614075565b9092506080870135908082111561431e57600080fd5b908701906080828a03121561433257600080fd5b61433a613c7c565b82358281111561434957600080fd5b6143558b828601613de6565b82525060208301356020820152604083013560408201526060830135925061437c83614075565b8260608201528093505050509295509295909350565b6000602082840312156143a457600080fd5b8135613bbe81613ea7565b600080600080600080600080610100898b0312156143cc57600080fd5b88356143d781613bf8565b975060208901356143e781613bf8565b965060408901356143f781613bf8565b9550606089013561440781613bf8565b9450608089013561441781613bf8565b935060a089013561442781613bf8565b925060c089013561443781613bf8565b915060e089013561444781613bf8565b809150509295985092959890939650565b600080600080600060a0868803121561447057600080fd5b853561447b81613bf8565b9450602086013561448b81613bf8565b935060408601356001600160401b03808211156144a757600080fd5b6144b389838a01614093565b945060608801359150808211156144c957600080fd5b6144d589838a01614093565b935060808801359150808211156144eb57600080fd5b506144f888828901613de6565b9150509295509295909350565b6000806000806080858703121561451b57600080fd5b84356001600160401b0381111561453157600080fd5b61453d87828801613feb565b945050602085013561454e81613bf8565b9250604085013561455e81613bf8565b9150606085013561456e81614075565b939692955090935050565b600080600080600060a0868803121561459157600080fd5b853561459c81613bf8565b945060208601356145ac81613bf8565b9350604086013592506060860135915060808601356001600160401b038111156145d557600080fd5b6144f888828901613de6565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60008282101561461f5761461f6145f7565b500390565b6020808252601390820152721cddd85c081b9bdd081cdd58d8d95cdcd99d5b606a1b604082015260600190565b634e487b7160e01b600052602160045260246000fd5b6000821982111561467a5761467a6145f7565b500190565b6000600019821415614693576146936145f7565b5060010190565b6000602082840312156146ac57600080fd5b5051919050565b6001600160a01b039485168152928416602084015292166040820152606081019190915260800190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03929092168252602082015260400190565b805161408e81614075565b60006020828403121561472d57600080fd5b8151613bbe81614075565b60005b8381101561475357818101518382015260200161473b565b838111156121e65750506000910152565b60008251614776818460208701614738565b9190910192915050565b805161408e81613bf8565b600082601f83011261479c57600080fd5b81516147aa613e0582613dbf565b8181528460208386010111156147bf57600080fd5b6147d0826020830160208701614738565b949350505050565b600082601f8301126147e957600080fd5b815160206147f9613e0583613fc8565b82815260059290921b8401810191818101908684111561481857600080fd5b8286015b8481101561406a5780516001600160401b038082111561483c5760008081fd5b908801906040828b03601f19018113156148565760008081fd5b61485e613c9e565b8388015181529083015190828211156148775760008081fd5b6148858c898487010161478b565b81890152865250505091830191830161481c565b805160ff8116811461408e57600080fd5b600082601f8301126148bb57600080fd5b815160206148cb613e0583613fc8565b82815260059290921b840181019181810190868411156148ea57600080fd5b8286015b8481101561406a5780516001600160401b038082111561490e5760008081fd5b908801906101a0828b03601f19018113156149295760008081fd5b614931613cc0565b8784015181526040614944818601614780565b89830152606080860151828401526080915081860151818401525060a0808601518284015260c0915081860151818401525060e0614983818701614780565b828401526101009150818601518581111561499e5760008081fd5b6149ac8f8c838a010161478b565b82850152505061012080860151858111156149c75760008081fd5b6149d58f8c838a01016147d8565b838501525061014094508486015181840152505061016080850151848301526101809350614a04848601614899565b90820152614a13848301614899565b92810192909252508452509183019183016148ee565b805161408e81613ea7565b600082601f830112614a4557600080fd5b81516020614a55613e0583613fc8565b82815260069290921b84018101918181019086841115614a7457600080fd5b8286015b8481101561406a5760408189031215614a915760008081fd5b614a99613c9e565b8151815284820151614aaa81613bf8565b81860152835291830191604001614a78565b600082601f830112614acd57600080fd5b81516020614add613e0583613fc8565b82815260059290921b84018101918181019086841115614afc57600080fd5b8286015b8481101561406a5780516001600160401b0380821115614b205760008081fd5b90880190610160828b03601f1901811315614b3b5760008081fd5b614b43613ce3565b614b4e888501614a29565b815260408085015189830152606080860151828401526080915081860151818401525060a0808601518284015260c09150614b8a828701614780565b9083015260e08581015185811115614ba25760008081fd5b614bb08f8c838a010161478b565b838501525061010091508186015181840152506101208086015182840152610140915081860151818401525082850151925083831115614bf05760008081fd5b614bfe8d8a85880101614a34565b908201528652505050918301918301614b00565b600060c08284031215614c2457600080fd5b614c2c613d06565b9050815181526020820151602082015260408201516040820152606082015160608201526080820151614c5e81613bf8565b608082015260a0820151614c7181614075565b60a082015292915050565b600060208284031215614c8e57600080fd5b81516001600160401b0380821115614ca557600080fd5b908301906101608286031215614cba57600080fd5b614cc2613d06565b825182811115614cd157600080fd5b614cdd878286016148aa565b825250602083015182811115614cf257600080fd5b614cfe87828601614abc565b602083015250614d118660408501614c12565b604082015261010083015160608201526101208301516080820152614d396101408401614899565b60a082015295945050505050565b60008151808452614d5f816020860160208601614738565b601f01601f19169290920160200192915050565b600081518084526020808501808196508360051b8101915082860160005b85811015614dcf5782840389528151805185528501516040868601819052614dbb81870183614d47565b9a87019a9550505090840190600101614d91565b5091979650505050505050565b60088110614dec57614dec614651565b9052565b600081518084526020808501945080840160005b83811015614e34578151805188528301516001600160a01b03168388015260409096019590820190600101614e04565b509495945050505050565b600081518084526020808501808196508360051b8101915082860160005b85811015614dcf5782840389528151610160614e7a868351614ddc565b818701518688015260408083015190870152606080830151908701526080808301519087015260a080830151614eb282890182613fbb565b505060c0808301518282890152614ecb83890182614d47565b60e085810151908a015261010080860151908a015261012080860151908a015261014094850151898203958a01959095529250614f0c915082905083614df0565b9a87019a9550505090840190600101614e5d565b60006020808352610180808401855161016080858801528282518085526101a094508489019150848160051b8a0101878501945060005b8281101561503b578a820361019f1901845285518051835289810151614f7f8b850182613fbb565b5060408181015190840152606080820151908401526080808201519084015260a0808201519084015260c080820151614fba82860182613fbb565b505060e0808201518982860152614fd38a860182614d47565b9150506101008083015185830382870152614fee8382614d73565b925050506101208083015181860152506101408083015181860152508682015161501c8886018260ff169052565b509089015160ff16928901929092529488019492880192600101614f57565b50968a0151898803601f190160408b0152966150578189614e3f565b9750505050604088015193506150ad6060880185805182526020808201519083015260408082015190830152606080820151908301526080808201516001600160a01b03169083015260a0908101511515910152565b6060880151610120880152608088015161014088015260a09097015160ff169690950195909552509392505050565b600060208083850312156150ef57600080fd5b82516001600160401b0381111561510557600080fd5b8301601f8101851361511657600080fd5b8051615124613e0582613fc8565b81815260069190911b8201830190838101908783111561514357600080fd5b928401925b8284101561518f57604084890312156151615760008081fd5b615169613c9e565b845161517481613bf8565b81528486015186820152825260409093019290840190615148565b979650505050505050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b600060208083850312156151d157600080fd5b82516001600160401b038111156151e757600080fd5b8301601f810185136151f857600080fd5b8051615206613e0582613fc8565b8181526060918202830184019184820191908884111561522557600080fd5b938501935b838510156152785780858a0312156152425760008081fd5b61524a613d28565b855161525581613bf8565b81528587015187820152604080870151908201528352938401939185019161522a565b50979650505050505050565b6001600160a01b0394851681529290931660208301526040820152606081019190915260a06080820181905260009082015260c00190565b600061020082840312156152cf57600080fd5b6152d7613d4a565b90506152e282614710565b81526152f060208301614780565b602082015261530160408301614780565b6040820152606082015160608201526080820151608082015260a082015160a082015261533060c08301614780565b60c082015261534160e08301614780565b60e08201526101008281015190820152610120808301519082015261014080830151908201526101608083015190820152610180808301516001600160401b0381111561538d57600080fd5b6153998582860161478b565b8284015250506101a06153ad818401614899565b908201526101c082810151908201526101e09182015191810191909152919050565b805161408e81613bc5565b6000806000606084860312156153ef57600080fd5b83516001600160401b038082111561540657600080fd5b9085019060c0828803121561541a57600080fd5b615422613d06565b825161542d81614075565b8152602083015161543d81613bf8565b8060208301525060408301516040820152606083015160608201526080830151608082015260a08301518281111561547457600080fd5b6154808982860161478b565b60a083015250602087015190955091508082111561549d57600080fd5b506154aa868287016152bc565b9250506154b9604085016153cf565b90509250925092565b60408152600061010084511515604084015260018060a01b03602086015116606084015260408501516080840152606085015160a0840152608085015160c084015260a085015160c060e085015261551c82850182614d47565b8481036020860152855115158152905061020060208601516155416020840182613fbb565b5060408601516155546040840182613fbb565b50606086015160608301526080860151608083015260a086015160a083015260c086015161558560c0840182613fbb565b5060e086015161559860e0840182613fbb565b508583015192820192909252610120808601519082015261014080860151908201526101608086015190820152610180808601518183018490529092906155e182840182614d47565b935050506101a0808601516155fa8284018260ff169052565b50506101c085810151908201526101e094850151940193909352509092915050565b80516002811061408e57600080fd5b600082601f83011261563c57600080fd5b8151602061564c613e0583613fc8565b82815260069290921b8401810191818101908684111561566b57600080fd5b8286015b8481101561406a57604081890312156156885760008081fd5b615690613c9e565b815161ffff811681146156a35760008081fd5b8152818501516156b281613bf8565b8186015283529183019160400161566f565b60006101a082840312156156d757600080fd5b6156df613cc0565b90506156ea82614780565b81526156f86020830161561c565b602082015261570960408301614780565b604082015261571a60608301614780565b60608201526080820151608082015260a082015160a082015261573f60c08301614780565b60c082015260e0828101519082015261010080830151908201526101208083015190820152610140808301516001600160401b038082111561578057600080fd5b61578c8683870161562b565b83850152610160925082850151838501526101809250828501519150808211156157b557600080fd5b506157c28582860161478b565b82840152505092915050565b600060e082840312156157e057600080fd5b6157e8613d6d565b905081516001600160401b038082111561580157600080fd5b61580d858386016156c4565b835261581b60208501614899565b60208401526040840151604084015260608401516060840152608084015191508082111561584857600080fd5b506158558482850161478b565b60808301525061586760a0830161561c565b60a082015260c082015160c082015292915050565b60008060006060848603121561589157600080fd5b83516001600160401b03808211156158a857600080fd5b6158b4878388016157ce565b945060208601519150808211156158ca57600080fd5b506158d7868287016157ce565b9250506040840151613fb081613bc5565b60028110614dec57614dec614651565b600081518084526020808501945080840160005b83811015614e34578151805161ffff1688528301516001600160a01b0316838801526040909601959082019060010161590c565b6000815160e0845261595660e085018251613fbb565b602081015161010061596a818701836158e8565b6040830151915061012061598081880184613fbb565b6060840151925061014061599681890185613fbb565b6080850151935061016084818a015260a0860151945061018085818b015260c087015195506101a06159ca818c0188613fbb565b60e08801516101c08c0152858801516101e08c0152848801516102008c0152838801519650806102208c015250615a056102808b01876158f8565b918701516102408b01529095015188860360df19016102608a0152949350615a339250839150849050614d47565b9150506020830151615a4a602086018260ff169052565b50604083015160408501526060830151606085015260808301518482036080860152615a768282614d47565b91505060a0830151615a8b60a08601826158e8565b5060c083015160c08501528091505092915050565b604081526000615ab36040830185615940565b8281036020840152615ac58185615940565b95945050505050565b600081518084526020808501945080840160005b83811015614e3457815187529582019590820190600101615ae2565b600081518084526020808501945080840160005b83811015614e345781516001600160a01b031687529582019590820190600101615b12565b86815285602082015260c060408201526000615b5660c0830187615ace565b8281036060840152615b688187615afe565b6001600160a01b03959095166080840152505060a00152949350505050565b600082601f830112615b9857600080fd5b81516020615ba8613e0583613fc8565b82815260059290921b84018101918181019086841115615bc757600080fd5b8286015b8481101561406a5780518352918301918301615bcb565b600060208284031215615bf457600080fd5b81516001600160401b03811115615c0a57600080fd5b6147d084828501615b87565b85815284602082015260a060408201526000615c3560a0830186615afe565b6001600160a01b0394909416606083015250608001529392505050565b85815260a060208201526000615c6b60a0830187615ace565b8281036040840152615c7d8187615afe565b6001600160a01b039590951660608401525050608001529392505050565b848152608060208201526000615cb46080830186615afe565b6001600160a01b03949094166040830152506060015292915050565b602081526000825160a06020840152615cec60c0840182614d47565b905060018060a01b0360208501511660408401526040840151606084015260608401516080840152608084015160a08401528091505092915050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600060208284031215615d8557600080fd5b81516001600160401b0380821115615d9c57600080fd5b9083019060408286031215615db057600080fd5b615db8613c9e565b825182811115615dc757600080fd5b615dd38782860161478b565b825250602083015182811115615de857600080fd5b615df487828601615b87565b60208301525095945050505050565b6000816000190483118215151615615e1d57615e1d6145f7565b500290565b600082615e3f57634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220e18fcb26ac0051944ad5df169c5198d5e1c84daea86c760b64fa642bea93718d64736f6c63430008090033",
  "deployedBytecode": "0x60806040526004361061023f5760003560e01c806386619edf1161012e578063acf342bd116100ab578063df6c25581161006f578063df6c2558146106b6578063f23a6e61146106d6578063f2fde38b14610702578063fc40c9c714610722578063fee03e9e1461074257600080fd5b8063acf342bd14610617578063bc197c8114610637578063c1aa293814610663578063c6d0ffd714610683578063d6dc927f146106a357600080fd5b8063996c6cc3116100f2578063996c6cc3146105775780639981a6d714610597578063a05f32dc146105b7578063a8e90b57146105d7578063aa78ae93146105f757600080fd5b806386619edf146104d05780638ae42905146104e35780638da5cb5b146105035780639137f9c21461052157806392e871bf1461055757600080fd5b806359e86829116101bc578063715018a611610180578063715018a61461044657806373a963d71461045b5780637908716c1461047b5780637da50dd61461049b5780638456cb59146104bb57600080fd5b806359e86829146103bb5780635c975abb146103db5780635ea1e4c9146103f35780635f2772e31461041357806365c5bb061461042657600080fd5b8063368c802c11610203578063368c802c146103335780633f4ba83a146103465780634fe356691461035b57806357f57d6a1461037b578063596fa9e31461039b57600080fd5b806301ffc9a71461024b57806308b1571d1461028057806310f91b0b146102a2578063150b7a02146102cf5780631d9a08be1461031357600080fd5b3661024657005b600080fd5b34801561025757600080fd5b5061026b610266366004613bdb565b610762565b60405190151581526020015b60405180910390f35b34801561028c57600080fd5b506102a061029b366004613c0d565b610799565b005b3480156102ae57600080fd5b5060a0546102c2906001600160a01b031681565b6040516102779190613c2a565b3480156102db57600080fd5b506102fa6102ea366004613e3c565b630a85bd0160e11b949350505050565b6040516001600160e01b03199091168152602001610277565b34801561031f57600080fd5b506102a061032e366004613c0d565b6107c3565b6102a0610341366004613f58565b6107ed565b34801561035257600080fd5b506102a06108bc565b34801561036757600080fd5b506099546102c2906001600160a01b031681565b34801561038757600080fd5b506102a0610396366004613c0d565b6108ce565b3480156103a757600080fd5b50609f546102c2906001600160a01b031681565b3480156103c757600080fd5b506102a06103d6366004613c0d565b6108f8565b3480156103e757600080fd5b5060655460ff1661026b565b3480156103ff57600080fd5b50609d546102c2906001600160a01b031681565b6102a06104213660046140ee565b610922565b34801561043257600080fd5b506102a0610441366004613c0d565b610a35565b34801561045257600080fd5b506102a0610a5f565b34801561046757600080fd5b506102a0610476366004613c0d565b610a71565b34801561048757600080fd5b506102a0610496366004613c0d565b610a9b565b3480156104a757600080fd5b506102a06104b636600461425e565b610ac5565b3480156104c757600080fd5b506102a0610b2b565b6102a06104de366004614297565b610b3b565b3480156104ef57600080fd5b506102a06104fe366004613c0d565b610b79565b34801561050f57600080fd5b506033546001600160a01b03166102c2565b34801561052d57600080fd5b506102c261053c366004614392565b60a3602052600090815260409020546001600160a01b031681565b34801561056357600080fd5b506102a0610572366004613c0d565b610ba3565b34801561058357600080fd5b5060a1546102c2906001600160a01b031681565b3480156105a357600080fd5b506102a06105b2366004613c0d565b610bcd565b3480156105c357600080fd5b506097546102c2906001600160a01b031681565b3480156105e357600080fd5b50609c546102c2906001600160a01b031681565b34801561060357600080fd5b506102a06106123660046143af565b610bf7565b34801561062357600080fd5b50609a546102c2906001600160a01b031681565b34801561064357600080fd5b506102fa610652366004614458565b63bc197c8160e01b95945050505050565b34801561066f57600080fd5b506102a061067e366004613c0d565b610d9a565b34801561068f57600080fd5b506098546102c2906001600160a01b031681565b6102a06106b1366004614505565b610dc4565b3480156106c257600080fd5b50609e546102c2906001600160a01b031681565b3480156106e257600080fd5b506102fa6106f1366004614579565b63f23a6e6160e01b95945050505050565b34801561070e57600080fd5b506102a061071d366004613c0d565b610f83565b34801561072e57600080fd5b50609b546102c2906001600160a01b031681565b34801561074e57600080fd5b5060a2546102c2906001600160a01b031681565b60006001600160e01b03198216630271189760e51b148061079357506301ffc9a760e01b6001600160e01b03198316145b92915050565b6107a1610ffc565b609e80546001600160a01b0319166001600160a01b0392909216919091179055565b6107cb610ffc565b609b80546001600160a01b0319166001600160a01b0392909216919091179055565b6107f5611056565b600080600061080586600061109c565b9250925092506108123390565b6001600160a01b03167fc5dd8c21802b423a9c822ee9c934f042186e6bb7097a1dd17717343ee84df7148460405161084e911515815260200190565b60405180910390a260408601516001600160a01b031661088157610872828661211e565b61087c818561211e565b6108ac565b61089086604001518387612149565b61089f86604001518286612149565b6108ac86604001516121ed565b6108b46122f4565b505050505050565b6108c4610ffc565b6108cc612305565b565b6108d6610ffc565b609c80546001600160a01b0319166001600160a01b0392909216919091179055565b610900610ffc565b60a080546001600160a01b0319166001600160a01b0392909216919091179055565b61092a611056565b60008160000151600081518110610943576109436145e1565b60200260200101519050600082600001516001846000015151610966919061460d565b81518110610976576109766145e1565b602090810291909101015160a1549091506001600160a01b03808316911614156109d35760006109a584612351565b9050806109cd5760405162461bcd60e51b81526004016109c490614624565b60405180910390fd5b50610a20565b60a1546001600160a01b03838116911614156109f45760006109a584612916565b60006109ff84612cd0565b905080610a1e5760405162461bcd60e51b81526004016109c490614624565b505b610a2c87878787610dc4565b50505050505050565b610a3d610ffc565b609d80546001600160a01b0319166001600160a01b0392909216919091179055565b610a67610ffc565b6108cc60006130c3565b610a79610ffc565b609f80546001600160a01b0319166001600160a01b0392909216919091179055565b610aa3610ffc565b609880546001600160a01b0319166001600160a01b0392909216919091179055565b610acd610ffc565b8060a36000846007811115610ae457610ae4614651565b6007811115610af557610af5614651565b815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055505050565b610b33610ffc565b6108cc613115565b610b43611056565b6000610b4e82613152565b905080610b6d5760405162461bcd60e51b81526004016109c490614624565b6108b486868686610dc4565b610b81610ffc565b60a280546001600160a01b0319166001600160a01b0392909216919091179055565b610bab610ffc565b609a80546001600160a01b0319166001600160a01b0392909216919091179055565b610bd5610ffc565b609980546001600160a01b0319166001600160a01b0392909216919091179055565b600054610100900460ff1615808015610c175750600054600160ff909116105b80610c315750303b158015610c31575060005460ff166001145b610c945760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016109c4565b6000805460ff191660011790558015610cb7576000805461ff0019166101001790555b610cbf613696565b610cc76136bd565b610ccf6136ed565b609780546001600160a01b03199081166001600160a01b03808d1691909117909255609880548216838c16179055609980548216838b16179055609a80548216838a16179055609b80548216838916179055609c80548216838816179055609d80548216838716179055609e80549091169184169190911790558015610d8f576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050505050565b610da2610ffc565b60a180546001600160a01b0319166001600160a01b0392909216919091179055565b610dcc611056565b6000806000808751905060005b81811015610f0b576000806000610e098c8581518110610dfb57610dfb6145e1565b60200260200101518a61109c565b9250925092508580610e185750825b604051841515815290965033907fc5dd8c21802b423a9c822ee9c934f042186e6bb7097a1dd17717343ee84df7149060200160405180910390a260006001600160a01b03168c8581518110610e6f57610e6f6145e1565b6020026020010151604001516001600160a01b03161415610ea757610e948289614667565b9750610ea08188614667565b9650610ef7565b610ecf8c8581518110610ebc57610ebc6145e1565b602002602001015160400151838d612149565b610ef78c8581518110610ee457610ee46145e1565b602002602001015160400151828c612149565b50505080610f049061467f565b9050610dd9565b5081610f545760405162461bcd60e51b81526020600482015260186024820152776e6f207375636365737366756c20657865637574696f6e7360401b60448201526064016109c4565b610f5e848861211e565b610f68838761211e565b610f7188613720565b610f796122f4565b5050505050505050565b610f8b610ffc565b6001600160a01b038116610ff05760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016109c4565b610ff9816130c3565b50565b6033546001600160a01b031633146108cc5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016109c4565b60655460ff16156108cc5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016109c4565b60008060008060006110bb87608001518860600151896000015161379a565b915091506000876020015190506000806110dd8a606001518b60200151613895565b60408c015191935091506001600160a01b031615611348576000925060008a604001516001600160a01b03166370a08231306040518263ffffffff1660e01b815260040161112b9190613c2a565b60206040518083038186803b15801561114357600080fd5b505afa158015611157573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061117b919061469a565b9050600082848d602001516111909190614667565b61119a9190614667565b90508181111561121c5760a25460408d01516001600160a01b039091169063776062c39033306111ca878761460d565b6040518563ffffffff1660e01b81526004016111e994939291906146b3565b600060405180830381600087803b15801561120357600080fd5b505af1158015611217573d6000803e3d6000fd5b505050505b600061122b8d600001516138c6565b905060008d604001516001600160a01b031663dd62ed3e83306040518363ffffffff1660e01b81526004016112619291906146dd565b60206040518083038186803b15801561127957600080fd5b505afa15801561128d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112b1919061469a565b905082811015611343578d604001516001600160a01b031663095ea7b3836000196040518363ffffffff1660e01b81526004016112ef9291906146f7565b602060405180830381600087803b15801561130957600080fd5b505af115801561131d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611341919061471b565b505b505050505b60028a51600781111561135d5761135d614651565b141561144257609a546040516000916001600160a01b0316908590611383908990614764565b60006040518083038185875af1925050503d80600081146113c0576040519150601f19603f3d011682016040523d82523d6000602084013e6113c5565b606091505b5050905089156113ef57806113ea576000806000985098509850505050505050612117565b61143c565b8061143c5760405162461bcd60e51b815260206004820152601b60248201527f507572636861736520536561506f72745f315f35206661696c6564000000000060448201526064016109c4565b506120fc565b60018a51600781111561145757611457614651565b1415611531576099546040516000916001600160a01b031690859061147d908990614764565b60006040518083038185875af1925050503d80600081146114ba576040519150601f19603f3d011682016040523d82523d6000602084013e6114bf565b606091505b5050905089156114e457806113ea576000806000985098509850505050505050612117565b8061143c5760405162461bcd60e51b815260206004820152601b60248201527f507572636861736520536561506f72745f315f34206661696c6564000000000060448201526064016109c4565b60068a51600781111561154657611546614651565b1415611620576097546040516000916001600160a01b031690859061156c908990614764565b60006040518083038185875af1925050503d80600081146115a9576040519150601f19603f3d011682016040523d82523d6000602084013e6115ae565b606091505b5050905089156115d357806113ea576000806000985098509850505050505050612117565b8061143c5760405162461bcd60e51b815260206004820152601b60248201527f50757263686173652047686f73744d61726b6574206661696c6564000000000060448201526064016109c4565b60008a51600781111561163557611635614651565b1415611709576098546040516000916001600160a01b031690859061165b908990614764565b60006040518083038185875af1925050503d8060008114611698576040519150601f19603f3d011682016040523d82523d6000602084013e61169d565b606091505b5050905089156116c257806113ea576000806000985098509850505050505050612117565b8061143c5760405162461bcd60e51b8152602060048201526017602482015276141d5c98da185cd94814985c9a589b194819985a5b1959604a1b60448201526064016109c4565b60038a51600781111561171e5761171e614651565b1415611bb35760008580602001905181019061173a9190614c7c565b905089156117be57609b5460405163357a150b60e01b81526001600160a01b039091169063357a150b908690611774908590600401614f20565b6000604051808303818588803b15801561178d57600080fd5b505af19350505050801561179f575060015b6117b9576000806000985098509850505050505050612117565b611823565b609b5460405163357a150b60e01b81526001600160a01b039091169063357a150b9086906117f0908590600401614f20565b6000604051808303818588803b15801561180957600080fd5b505af115801561181d573d6000803e3d6000fd5b50505050505b60208101515160005b81811015611bab5760008360200151828151811061184c5761184c6145e1565b6020026020010151602001519050600084602001518381518110611872576118726145e1565b6020026020010151604001519050600085600001518381518110611898576118986145e1565b6020026020010151610100015182815181106118b6576118b66145e1565b60200260200101516020015190506000866000015184815181106118dc576118dc6145e1565b602002602001015160e00151511180156119185750600086602001518581518110611909576119096145e1565b602002602001015160c0015151115b1561196a5761196a8187602001518681518110611937576119376145e1565b602002602001015160c0015188600001518681518110611959576119596145e1565b602002602001015160e0015161390f565b855180518490811061197e5761197e6145e1565b60200260200101516080015160011415611a5f576000818060200190518101906119a891906150dc565b905060005b8151811015611a585760008282815181106119ca576119ca6145e1565b6020026020010151905080600001516001600160a01b03166342842e0e306119ef3390565b84602001516040518463ffffffff1660e01b8152600401611a129392919061519a565b600060405180830381600087803b158015611a2c57600080fd5b505af1158015611a40573d6000803e3d6000fd5b50505050508080611a509061467f565b9150506119ad565b5050611b97565b8551805184908110611a7357611a736145e1565b60200260200101516080015160021415611b5357600081806020019051810190611a9d91906151be565b905060005b8151811015611a58576000828281518110611abf57611abf6145e1565b6020026020010151905080600001516001600160a01b031663f242432a30611ae43390565b846020015185604001516040518563ffffffff1660e01b8152600401611b0d9493929190615284565b600060405180830381600087803b158015611b2757600080fd5b505af1158015611b3b573d6000803e3d6000fd5b50505050508080611b4b9061467f565b915050611aa2565b60405162461bcd60e51b81526020600482015260196024820152783ab735b737bbb7103232b632b3b0ba32aa3cb832903c193c9960391b60448201526064016109c4565b50505080611ba49061467f565b905061182c565b5050506120fc565b60048a516007811115611bc857611bc8614651565b1415611df657600080600087806020019051810190611be791906153da565b9250925092508b15611c7357609c54604051635a72594b60e11b81526001600160a01b039091169063b4e4b296908890611c2790879087906004016154c2565b6000604051808303818588803b158015611c4057600080fd5b505af193505050508015611c52575060015b611c6e5760008060009a509a509a505050505050505050612117565b611cda565b609c54604051635a72594b60e11b81526001600160a01b039091169063b4e4b296908890611ca790879087906004016154c2565b6000604051808303818588803b158015611cc057600080fd5b505af1158015611cd4573d6000803e3d6000fd5b50505050505b6001600160e01b031981166339d690a360e11b1415611d625760408201516001600160a01b03166342842e0e303385608001516040518463ffffffff1660e01b8152600401611d2b9392919061519a565b600060405180830381600087803b158015611d4557600080fd5b505af1158015611d59573d6000803e3d6000fd5b50505050611bab565b6001600160e01b0319811663025ceed960e61b1415611db957604082810151608084015160a08501519251637921219560e11b81526001600160a01b039092169263f242432a92611d2b9230923392600401615284565b60405162461bcd60e51b8152602060048201526012602482015271556e6b6e6f776e20746f6b656e207479706560701b60448201526064016109c4565b60058a516007811115611e0b57611e0b614651565b1415611ee057609d546040516000916001600160a01b0316908590611e31908990614764565b60006040518083038185875af1925050503d8060008114611e6e576040519150601f19603f3d011682016040523d82523d6000602084013e611e73565b606091505b505090508915611e9857806113ea576000806000985098509850505050505050612117565b8061143c5760405162461bcd60e51b8152602060048201526018602482015277141d5c98da185cd94814dd591bd4ddd85c0819985a5b195960421b60448201526064016109c4565b60078a516007811115611ef557611ef5614651565b14156120b957600080600087806020019051810190611f14919061587c565b9250925092508b15611fa057609e54604051639a1fc3a760e01b81526001600160a01b0390911690639a1fc3a7908890611f549087908790600401615aa0565b6000604051808303818588803b158015611f6d57600080fd5b505af193505050508015611f7f575060015b611f9b5760008060009a509a509a505050505050505050612117565b612007565b609e54604051639a1fc3a760e01b81526001600160a01b0390911690639a1fc3a7908890611fd49087908790600401615aa0565b6000604051808303818588803b158015611fed57600080fd5b505af1158015612001573d6000803e3d6000fd5b50505050505b6001600160e01b031981166339d690a360e11b141561205c5782516060810151608090910151604051632142170760e11b81526001600160a01b03909216916342842e0e91611d2b913091339160040161519a565b6001600160e01b0319811663025ceed960e61b1415611db95782516060810151608082015160a090920151604051637921219560e11b81526001600160a01b039092169263f242432a92611d2b9230923392909190600401615284565b60405162461bcd60e51b8152602060048201526018602482015277556e6b6e6f776e2070757263686173652064657461696c7360401b60448201526064016109c4565b61210a848b602001516139bc565b6001975090955093505050505b9250925092565b60008211801561213657506001600160a01b03811615155b15612145576121458183613a60565b5050565b60008211801561216157506001600160a01b03811615155b156121e85760405163a9059cbb60e01b81526001600160a01b0384169063a9059cbb9061219490849086906004016146f7565b602060405180830381600087803b1580156121ae57600080fd5b505af11580156121c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121e6919061471b565b505b505050565b6040516370a0823160e01b81526000906001600160a01b038316906370a082319061221c903090600401613c2a565b60206040518083038186803b15801561223457600080fd5b505afa158015612248573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061226c919061469a565b905080156121455760405163a9059cbb60e01b81526001600160a01b0383169063a9059cbb906122a290339085906004016146f7565b602060405180830381600087803b1580156122bc57600080fd5b505af11580156122d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121e8919061471b565b478015610ff957610ff93382613a60565b61230d613b14565b6065805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516123479190613c2a565b60405180910390a1565b600080826000015160008151811061236b5761236b6145e1565b6020026020010151905060008360000151600185600001515161238e919061460d565b8151811061239e5761239e6145e1565b602090810291909101015160a2549091506001600160a01b031663776062c383333088604001516040518563ffffffff1660e01b81526004016123e494939291906146b3565b600060405180830381600087803b1580156123fe57600080fd5b505af1158015612412573d6000803e3d6000fd5b505060a1546001600160a01b038581169116149150508015612435575083608001515b156124b45760a1546040808601519051632e1a7d4d60e01b81526001600160a01b0390921691632e1a7d4d916124719160040190815260200190565b600060405180830381600087803b15801561248b57600080fd5b505af192505050801561249c575060015b6124aa575060009392505050565b5060019392505050565b6000341180156124d1575060a1546001600160a01b038281169116145b1561253a5760a160009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b15801561252657600080fd5b505af19350505050801561249c57506124aa565b609f54604051636eb1769f60e11b81526000916001600160a01b038086169263dd62ed3e9261256f92169030906004016146dd565b60206040518083038186803b15801561258757600080fd5b505afa15801561259b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125bf919061469a565b9050846040015181101561265757609f5460405163095ea7b360e01b81526001600160a01b038581169263095ea7b3926126039290911690600019906004016146f7565b602060405180830381600087803b15801561261d57600080fd5b505af1158015612631573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612655919061471b565b505b46600061a86a82148061266b57508161a869145b9050600047821561273957609f5460208a01516040808c015160608d01518d519251636d3420ed60e01b81526000956001600160a01b031694636d3420ed946126be949193919230904290600401615b37565b600060405180830381600087803b1580156126d857600080fd5b505af11580156126ec573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526127149190810190615be2565b905080600081518110612729576127296145e1565b60200260200101519250506127f1565b609f5460208a01516040808c01518c519151632512eca560e11b81526000946001600160a01b031693634a25d94a9361277a93919230904290600401615c16565b600060405180830381600087803b15801561279457600080fd5b505af11580156127a8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526127d09190810190615be2565b9050806000815181106127e5576127e56145e1565b60200260200101519250505b60408901514790831015612890576001600160a01b03881663a9059cbb33858d6040015161281f919061460d565b6040518363ffffffff1660e01b815260040161283c9291906146f7565b602060405180830381600087803b15801561285657600080fd5b505af115801561286a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061288e919061471b565b505b8960800151156129065760a1546001600160a01b031663d0e30db06128b5848461460d565b6040518263ffffffff1660e01b81526004016000604051808303818588803b1580156128e057600080fd5b505af1935050505080156128f2575060015b612906575060009998505050505050505050565b5060019998505050505050505050565b6000808260000151600081518110612930576129306145e1565b60200260200101519050600083600001516001856000015151612953919061460d565b81518110612963576129636145e1565b602002602001015190503460001415612a505760a2546001600160a01b031663776062c383333088604001516040518563ffffffff1660e01b81526004016129ae94939291906146b3565b600060405180830381600087803b1580156129c857600080fd5b505af11580156129dc573d6000803e3d6000fd5b505060a1546040808801519051632e1a7d4d60e01b81526001600160a01b039092169350632e1a7d4d9250612a179160040190815260200190565b600060405180830381600087803b158015612a3157600080fd5b505af1925050508015612a42575060015b612a50575060009392505050565b600034118015612a6d575060a1546001600160a01b038281169116145b15612b705760a160009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b158015612ac257600080fd5b505af193505050508015612ad4575060015b612ae2575060009392505050565b604080850151905163a9059cbb60e01b81526001600160a01b0383169163a9059cbb91612b139133916004016146f7565b602060405180830381600087803b158015612b2d57600080fd5b505af1158015612b41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b65919061471b565b506001949350505050565b46600061a86a821480612b8457508161a869145b90508015612c2d57609f54604080880151602089015160608a01518a519351630217ab2560e51b81526001600160a01b03909516946342f564a094612bd193929130904290600401615c52565b6000604051808303818588803b158015612bea57600080fd5b505af1158015612bfe573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f19168201604052612c279190810190615be2565b50612cc4565b609f5460408088015160208901518951925163fb3bdb4160e01b81526001600160a01b039094169363fb3bdb4193612c6c929130904290600401615c9b565b6000604051808303818588803b158015612c8557600080fd5b505af1158015612c99573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f19168201604052612cc29190810190615be2565b505b50600195945050505050565b6000808260000151600081518110612cea57612cea6145e1565b602090810291909101015160a2549091506001600160a01b031663776062c382333087604001516040518563ffffffff1660e01b8152600401612d3094939291906146b3565b600060405180830381600087803b158015612d4a57600080fd5b505af1158015612d5e573d6000803e3d6000fd5b5050609f54604051636eb1769f60e11b8152600093506001600160a01b03808616935063dd62ed3e92612d989291169030906004016146dd565b60206040518083038186803b158015612db057600080fd5b505afa158015612dc4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612de8919061469a565b90508360400151811015612e8057609f5460405163095ea7b360e01b81526001600160a01b038481169263095ea7b392612e2c9290911690600019906004016146f7565b602060405180830381600087803b158015612e4657600080fd5b505af1158015612e5a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e7e919061471b565b505b46600061a86a821480612e9457508161a869145b905060008115612f6157609f5460208801516040808a015160608b01518b51925163a7b856d360e01b81526000956001600160a01b03169463a7b856d394612ee6949193919230904290600401615b37565b600060405180830381600087803b158015612f0057600080fd5b505af1158015612f14573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612f3c9190810190615be2565b905080600081518110612f5157612f516145e1565b6020026020010151915050613019565b609f5460208801516040808a01518a519151634401edf760e11b81526000946001600160a01b031693638803dbee93612fa293919230904290600401615c16565b600060405180830381600087803b158015612fbc57600080fd5b505af1158015612fd0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612ff89190810190615be2565b90508060008151811061300d5761300d6145e1565b60200260200101519150505b86604001518110156130b6576001600160a01b03851663a9059cbb33838a60400151613045919061460d565b6040518363ffffffff1660e01b81526004016130629291906146f7565b602060405180830381600087803b15801561307c57600080fd5b505af1158015613090573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130b4919061471b565b505b5060019695505050505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b61311d611056565b6065805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861233a3390565b6000806000808460000151905060006014825161316f919061460d565b9050600160601b81602084010151049350600160601b600060208401015104925034600014156132045760a2546001600160a01b031663776062c38533308a604001516040518563ffffffff1660e01b81526004016131d194939291906146b3565b600060405180830381600087803b1580156131eb57600080fd5b505af11580156131ff573d6000803e3d6000fd5b505050505b60a1546001600160a01b038581169116148015613222575085606001515b156132995760a1546020870151604051632e1a7d4d60e01b81526001600160a01b0390921691632e1a7d4d9161325e9160040190815260200190565b600060405180830381600087803b15801561327857600080fd5b505af1925050508015613289575060015b612cc45750600095945050505050565b6000341180156132b6575060a1546001600160a01b038481169116145b1561331f5760a160009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b15801561330b57600080fd5b505af1935050505080156132895750612cc4565b60a054604051636eb1769f60e11b81526000916001600160a01b038088169263dd62ed3e9261335492169030906004016146dd565b60206040518083038186803b15801561336c57600080fd5b505afa158015613380573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133a4919061469a565b9050866040015181101561343c5760a05460405163095ea7b360e01b81526001600160a01b038781169263095ea7b3926133e89290911690600019906004016146f7565b602060405180830381600087803b15801561340257600080fd5b505af1158015613416573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061343a919061471b565b505b6040805160a08082018352895182523060208084019190915242838501528a01516060830152898301516080830152549151631e51809360e31b815290916000916001600160a01b039091169063f28c049890349061349f908690600401615cd0565b6020604051808303818588803b1580156134b857600080fd5b505af1935050505080156134e9575060408051601f3d908101601f191682019092526134e69181019061469a565b60015b6134fc5750600098975050505050505050565b905060a060009054906101000a90046001600160a01b03166001600160a01b03166312210e8a6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561354e57600080fd5b505af1158015613562573d6000803e3d6000fd5b505050508860600151156135e55760a15460208a0151604051632e1a7d4d60e01b81526001600160a01b0390921691632e1a7d4d916135a79160040190815260200190565b600060405180830381600087803b1580156135c157600080fd5b505af19250505080156135d2575060015b6135e55750600098975050505050505050565b88604001518110156136875734613687576001600160a01b03871663a9059cbb33838c60400151613616919061460d565b6040518363ffffffff1660e01b81526004016136339291906146f7565b602060405180830381600087803b15801561364d57600080fd5b505af1158015613661573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613685919061471b565b505b50600198975050505050505050565b600054610100900460ff166108cc5760405162461bcd60e51b81526004016109c490615d28565b600054610100900460ff166136e45760405162461bcd60e51b81526004016109c490615d28565b6108cc336130c3565b600054610100900460ff166137145760405162461bcd60e51b81526004016109c490615d28565b6065805460ff19169055565b805160005b818110156121e85760006001600160a01b031683828151811061374a5761374a6145e1565b6020026020010151604001516001600160a01b03161461378a5761378a838281518110613779576137796145e1565b6020026020010151604001516121ed565b6137938161467f565b9050613725565b6060806000602085901c61ffff1660018111156137b9576137b9614651565b9050606060008260018111156137d1576137d1614651565b14156137e357869350915061388d9050565b60018260018111156137f7576137f7614651565b1415613845576000878060200190518101906138139190615d73565b905061381e86613b5d565b1561383957806000015181602001519450945050505061388d565b519350915061388d9050565b60405162461bcd60e51b815260206004820152601a60248201527f756e6b6e6f776e206164646974696f6e616c446174615479706500000000000060448201526064016109c4565b935093915050565b60008061ffff601085901c81169085166138af8583613ba5565b6138b98683613ba5565b9350935050509250929050565b600060a360008360078111156138de576138de614651565b60078111156138ef576138ef614651565b81526020810191909152604001600020546001600160a01b031692915050565b815183511461391d57600080fd5b805183511461392b57600080fd5b825160005b818110156139b55782818151811061394a5761394a6145e1565b01602001516001600160f81b031916156139a557838181518110613970576139706145e1565b602001015160f81c60f81b85828151811061398d5761398d6145e1565b60200101906001600160f81b031916908160001a9053505b6139ae8161467f565b9050613930565b5050505050565b815160005b818110156121e65760008482815181106139dd576139dd6145e1565b60200260200101511115613a505760008482815181106139ff576139ff6145e1565b60200260200101519050600060a0868481518110613a1f57613a1f6145e1565b6020026020010151901c90506000613a408287613ba590919063ffffffff16565b9050613a4c818461211e565b5050505b613a598161467f565b90506139c1565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114613aad576040519150601f19603f3d011682016040523d82523d6000602084013e613ab2565b606091505b50509050806121e85760405162461bcd60e51b815260206004820152602860248201527f4c69625472616e73666572204261736543757272656e6379207472616e7366656044820152671c8819985a5b195960c21b60648201526084016109c4565b60655460ff166108cc5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016109c4565b60006005826007811115613b7357613b73614651565b1480613b9057506004826007811115613b8e57613b8e614651565b145b15613b9d57506001919050565b506000919050565b6000612710613bb48385615e03565b613bbe9190615e22565b9392505050565b6001600160e01b031981168114610ff957600080fd5b600060208284031215613bed57600080fd5b8135613bbe81613bc5565b6001600160a01b0381168114610ff957600080fd5b600060208284031215613c1f57600080fd5b8135613bbe81613bf8565b6001600160a01b0391909116815260200190565b634e487b7160e01b600052604160045260246000fd5b60405160a081016001600160401b0381118282101715613c7657613c76613c3e565b60405290565b604051608081016001600160401b0381118282101715613c7657613c76613c3e565b604080519081016001600160401b0381118282101715613c7657613c76613c3e565b6040516101a081016001600160401b0381118282101715613c7657613c76613c3e565b60405161016081016001600160401b0381118282101715613c7657613c76613c3e565b60405160c081016001600160401b0381118282101715613c7657613c76613c3e565b604051606081016001600160401b0381118282101715613c7657613c76613c3e565b60405161020081016001600160401b0381118282101715613c7657613c76613c3e565b60405160e081016001600160401b0381118282101715613c7657613c76613c3e565b604051601f8201601f191681016001600160401b0381118282101715613db757613db7613c3e565b604052919050565b60006001600160401b03821115613dd857613dd8613c3e565b50601f01601f191660200190565b600082601f830112613df757600080fd5b8135613e0a613e0582613dbf565b613d8f565b818152846020838601011115613e1f57600080fd5b816020850160208301376000918101602001919091529392505050565b60008060008060808587031215613e5257600080fd5b8435613e5d81613bf8565b93506020850135613e6d81613bf8565b92506040850135915060608501356001600160401b03811115613e8f57600080fd5b613e9b87828801613de6565b91505092959194509250565b60088110610ff957600080fd5b600060a08284031215613ec657600080fd5b60405160a081016001600160401b038282108183111715613ee957613ee9613c3e565b8160405282935084359150613efd82613ea7565b8183526020850135602084015260408501359150613f1a82613bf8565b816040840152606085013560608401526080850135915080821115613f3e57600080fd5b50613f4b85828601613de6565b6080830152505092915050565b600080600060608486031215613f6d57600080fd5b83356001600160401b03811115613f8357600080fd5b613f8f86828701613eb4565b9350506020840135613fa081613bf8565b91506040840135613fb081613bf8565b809150509250925092565b6001600160a01b03169052565b60006001600160401b03821115613fe157613fe1613c3e565b5060051b60200190565b600082601f830112613ffc57600080fd5b8135602061400c613e0583613fc8565b82815260059290921b8401810191818101908684111561402b57600080fd5b8286015b8481101561406a5780356001600160401b0381111561404e5760008081fd5b61405c8986838b0101613eb4565b84525091830191830161402f565b509695505050505050565b8015158114610ff957600080fd5b803561408e81614075565b919050565b600082601f8301126140a457600080fd5b813560206140b4613e0583613fc8565b82815260059290921b840181019181810190868411156140d357600080fd5b8286015b8481101561406a57803583529183019183016140d7565b600080600080600060a0868803121561410657600080fd5b85356001600160401b038082111561411d57600080fd5b61412989838a01613feb565b9650602091508188013561413c81613bf8565b9550604088013561414c81613bf8565b9450606088013561415c81614075565b935060808801358181111561417057600080fd5b880160a0818b03121561418257600080fd5b61418a613c54565b81358381111561419957600080fd5b8201601f81018c136141aa57600080fd5b80356141b8613e0582613fc8565b81815260059190911b8201860190868101908e8311156141d757600080fd5b928701925b828410156141fe5783356141ef81613bf8565b825292870192908701906141dc565b80855250505050838201358482015260408201356040820152606082013593508284111561422b57600080fd5b6142378b858401614093565b606082015261424860808301614083565b6080820152809450505050509295509295909350565b6000806040838503121561427157600080fd5b823561427c81613ea7565b9150602083013561428c81613bf8565b809150509250929050565b600080600080600060a086880312156142af57600080fd5b85356001600160401b03808211156142c657600080fd5b6142d289838a01613feb565b9650602088013591506142e482613bf8565b9094506040870135906142f682613bf8565b90935060608701359061430882614075565b9092506080870135908082111561431e57600080fd5b908701906080828a03121561433257600080fd5b61433a613c7c565b82358281111561434957600080fd5b6143558b828601613de6565b82525060208301356020820152604083013560408201526060830135925061437c83614075565b8260608201528093505050509295509295909350565b6000602082840312156143a457600080fd5b8135613bbe81613ea7565b600080600080600080600080610100898b0312156143cc57600080fd5b88356143d781613bf8565b975060208901356143e781613bf8565b965060408901356143f781613bf8565b9550606089013561440781613bf8565b9450608089013561441781613bf8565b935060a089013561442781613bf8565b925060c089013561443781613bf8565b915060e089013561444781613bf8565b809150509295985092959890939650565b600080600080600060a0868803121561447057600080fd5b853561447b81613bf8565b9450602086013561448b81613bf8565b935060408601356001600160401b03808211156144a757600080fd5b6144b389838a01614093565b945060608801359150808211156144c957600080fd5b6144d589838a01614093565b935060808801359150808211156144eb57600080fd5b506144f888828901613de6565b9150509295509295909350565b6000806000806080858703121561451b57600080fd5b84356001600160401b0381111561453157600080fd5b61453d87828801613feb565b945050602085013561454e81613bf8565b9250604085013561455e81613bf8565b9150606085013561456e81614075565b939692955090935050565b600080600080600060a0868803121561459157600080fd5b853561459c81613bf8565b945060208601356145ac81613bf8565b9350604086013592506060860135915060808601356001600160401b038111156145d557600080fd5b6144f888828901613de6565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60008282101561461f5761461f6145f7565b500390565b6020808252601390820152721cddd85c081b9bdd081cdd58d8d95cdcd99d5b606a1b604082015260600190565b634e487b7160e01b600052602160045260246000fd5b6000821982111561467a5761467a6145f7565b500190565b6000600019821415614693576146936145f7565b5060010190565b6000602082840312156146ac57600080fd5b5051919050565b6001600160a01b039485168152928416602084015292166040820152606081019190915260800190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03929092168252602082015260400190565b805161408e81614075565b60006020828403121561472d57600080fd5b8151613bbe81614075565b60005b8381101561475357818101518382015260200161473b565b838111156121e65750506000910152565b60008251614776818460208701614738565b9190910192915050565b805161408e81613bf8565b600082601f83011261479c57600080fd5b81516147aa613e0582613dbf565b8181528460208386010111156147bf57600080fd5b6147d0826020830160208701614738565b949350505050565b600082601f8301126147e957600080fd5b815160206147f9613e0583613fc8565b82815260059290921b8401810191818101908684111561481857600080fd5b8286015b8481101561406a5780516001600160401b038082111561483c5760008081fd5b908801906040828b03601f19018113156148565760008081fd5b61485e613c9e565b8388015181529083015190828211156148775760008081fd5b6148858c898487010161478b565b81890152865250505091830191830161481c565b805160ff8116811461408e57600080fd5b600082601f8301126148bb57600080fd5b815160206148cb613e0583613fc8565b82815260059290921b840181019181810190868411156148ea57600080fd5b8286015b8481101561406a5780516001600160401b038082111561490e5760008081fd5b908801906101a0828b03601f19018113156149295760008081fd5b614931613cc0565b8784015181526040614944818601614780565b89830152606080860151828401526080915081860151818401525060a0808601518284015260c0915081860151818401525060e0614983818701614780565b828401526101009150818601518581111561499e5760008081fd5b6149ac8f8c838a010161478b565b82850152505061012080860151858111156149c75760008081fd5b6149d58f8c838a01016147d8565b838501525061014094508486015181840152505061016080850151848301526101809350614a04848601614899565b90820152614a13848301614899565b92810192909252508452509183019183016148ee565b805161408e81613ea7565b600082601f830112614a4557600080fd5b81516020614a55613e0583613fc8565b82815260069290921b84018101918181019086841115614a7457600080fd5b8286015b8481101561406a5760408189031215614a915760008081fd5b614a99613c9e565b8151815284820151614aaa81613bf8565b81860152835291830191604001614a78565b600082601f830112614acd57600080fd5b81516020614add613e0583613fc8565b82815260059290921b84018101918181019086841115614afc57600080fd5b8286015b8481101561406a5780516001600160401b0380821115614b205760008081fd5b90880190610160828b03601f1901811315614b3b5760008081fd5b614b43613ce3565b614b4e888501614a29565b815260408085015189830152606080860151828401526080915081860151818401525060a0808601518284015260c09150614b8a828701614780565b9083015260e08581015185811115614ba25760008081fd5b614bb08f8c838a010161478b565b838501525061010091508186015181840152506101208086015182840152610140915081860151818401525082850151925083831115614bf05760008081fd5b614bfe8d8a85880101614a34565b908201528652505050918301918301614b00565b600060c08284031215614c2457600080fd5b614c2c613d06565b9050815181526020820151602082015260408201516040820152606082015160608201526080820151614c5e81613bf8565b608082015260a0820151614c7181614075565b60a082015292915050565b600060208284031215614c8e57600080fd5b81516001600160401b0380821115614ca557600080fd5b908301906101608286031215614cba57600080fd5b614cc2613d06565b825182811115614cd157600080fd5b614cdd878286016148aa565b825250602083015182811115614cf257600080fd5b614cfe87828601614abc565b602083015250614d118660408501614c12565b604082015261010083015160608201526101208301516080820152614d396101408401614899565b60a082015295945050505050565b60008151808452614d5f816020860160208601614738565b601f01601f19169290920160200192915050565b600081518084526020808501808196508360051b8101915082860160005b85811015614dcf5782840389528151805185528501516040868601819052614dbb81870183614d47565b9a87019a9550505090840190600101614d91565b5091979650505050505050565b60088110614dec57614dec614651565b9052565b600081518084526020808501945080840160005b83811015614e34578151805188528301516001600160a01b03168388015260409096019590820190600101614e04565b509495945050505050565b600081518084526020808501808196508360051b8101915082860160005b85811015614dcf5782840389528151610160614e7a868351614ddc565b818701518688015260408083015190870152606080830151908701526080808301519087015260a080830151614eb282890182613fbb565b505060c0808301518282890152614ecb83890182614d47565b60e085810151908a015261010080860151908a015261012080860151908a015261014094850151898203958a01959095529250614f0c915082905083614df0565b9a87019a9550505090840190600101614e5d565b60006020808352610180808401855161016080858801528282518085526101a094508489019150848160051b8a0101878501945060005b8281101561503b578a820361019f1901845285518051835289810151614f7f8b850182613fbb565b5060408181015190840152606080820151908401526080808201519084015260a0808201519084015260c080820151614fba82860182613fbb565b505060e0808201518982860152614fd38a860182614d47565b9150506101008083015185830382870152614fee8382614d73565b925050506101208083015181860152506101408083015181860152508682015161501c8886018260ff169052565b509089015160ff16928901929092529488019492880192600101614f57565b50968a0151898803601f190160408b0152966150578189614e3f565b9750505050604088015193506150ad6060880185805182526020808201519083015260408082015190830152606080820151908301526080808201516001600160a01b03169083015260a0908101511515910152565b6060880151610120880152608088015161014088015260a09097015160ff169690950195909552509392505050565b600060208083850312156150ef57600080fd5b82516001600160401b0381111561510557600080fd5b8301601f8101851361511657600080fd5b8051615124613e0582613fc8565b81815260069190911b8201830190838101908783111561514357600080fd5b928401925b8284101561518f57604084890312156151615760008081fd5b615169613c9e565b845161517481613bf8565b81528486015186820152825260409093019290840190615148565b979650505050505050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b600060208083850312156151d157600080fd5b82516001600160401b038111156151e757600080fd5b8301601f810185136151f857600080fd5b8051615206613e0582613fc8565b8181526060918202830184019184820191908884111561522557600080fd5b938501935b838510156152785780858a0312156152425760008081fd5b61524a613d28565b855161525581613bf8565b81528587015187820152604080870151908201528352938401939185019161522a565b50979650505050505050565b6001600160a01b0394851681529290931660208301526040820152606081019190915260a06080820181905260009082015260c00190565b600061020082840312156152cf57600080fd5b6152d7613d4a565b90506152e282614710565b81526152f060208301614780565b602082015261530160408301614780565b6040820152606082015160608201526080820151608082015260a082015160a082015261533060c08301614780565b60c082015261534160e08301614780565b60e08201526101008281015190820152610120808301519082015261014080830151908201526101608083015190820152610180808301516001600160401b0381111561538d57600080fd5b6153998582860161478b565b8284015250506101a06153ad818401614899565b908201526101c082810151908201526101e09182015191810191909152919050565b805161408e81613bc5565b6000806000606084860312156153ef57600080fd5b83516001600160401b038082111561540657600080fd5b9085019060c0828803121561541a57600080fd5b615422613d06565b825161542d81614075565b8152602083015161543d81613bf8565b8060208301525060408301516040820152606083015160608201526080830151608082015260a08301518281111561547457600080fd5b6154808982860161478b565b60a083015250602087015190955091508082111561549d57600080fd5b506154aa868287016152bc565b9250506154b9604085016153cf565b90509250925092565b60408152600061010084511515604084015260018060a01b03602086015116606084015260408501516080840152606085015160a0840152608085015160c084015260a085015160c060e085015261551c82850182614d47565b8481036020860152855115158152905061020060208601516155416020840182613fbb565b5060408601516155546040840182613fbb565b50606086015160608301526080860151608083015260a086015160a083015260c086015161558560c0840182613fbb565b5060e086015161559860e0840182613fbb565b508583015192820192909252610120808601519082015261014080860151908201526101608086015190820152610180808601518183018490529092906155e182840182614d47565b935050506101a0808601516155fa8284018260ff169052565b50506101c085810151908201526101e094850151940193909352509092915050565b80516002811061408e57600080fd5b600082601f83011261563c57600080fd5b8151602061564c613e0583613fc8565b82815260069290921b8401810191818101908684111561566b57600080fd5b8286015b8481101561406a57604081890312156156885760008081fd5b615690613c9e565b815161ffff811681146156a35760008081fd5b8152818501516156b281613bf8565b8186015283529183019160400161566f565b60006101a082840312156156d757600080fd5b6156df613cc0565b90506156ea82614780565b81526156f86020830161561c565b602082015261570960408301614780565b604082015261571a60608301614780565b60608201526080820151608082015260a082015160a082015261573f60c08301614780565b60c082015260e0828101519082015261010080830151908201526101208083015190820152610140808301516001600160401b038082111561578057600080fd5b61578c8683870161562b565b83850152610160925082850151838501526101809250828501519150808211156157b557600080fd5b506157c28582860161478b565b82840152505092915050565b600060e082840312156157e057600080fd5b6157e8613d6d565b905081516001600160401b038082111561580157600080fd5b61580d858386016156c4565b835261581b60208501614899565b60208401526040840151604084015260608401516060840152608084015191508082111561584857600080fd5b506158558482850161478b565b60808301525061586760a0830161561c565b60a082015260c082015160c082015292915050565b60008060006060848603121561589157600080fd5b83516001600160401b03808211156158a857600080fd5b6158b4878388016157ce565b945060208601519150808211156158ca57600080fd5b506158d7868287016157ce565b9250506040840151613fb081613bc5565b60028110614dec57614dec614651565b600081518084526020808501945080840160005b83811015614e34578151805161ffff1688528301516001600160a01b0316838801526040909601959082019060010161590c565b6000815160e0845261595660e085018251613fbb565b602081015161010061596a818701836158e8565b6040830151915061012061598081880184613fbb565b6060840151925061014061599681890185613fbb565b6080850151935061016084818a015260a0860151945061018085818b015260c087015195506101a06159ca818c0188613fbb565b60e08801516101c08c0152858801516101e08c0152848801516102008c0152838801519650806102208c015250615a056102808b01876158f8565b918701516102408b01529095015188860360df19016102608a0152949350615a339250839150849050614d47565b9150506020830151615a4a602086018260ff169052565b50604083015160408501526060830151606085015260808301518482036080860152615a768282614d47565b91505060a0830151615a8b60a08601826158e8565b5060c083015160c08501528091505092915050565b604081526000615ab36040830185615940565b8281036020840152615ac58185615940565b95945050505050565b600081518084526020808501945080840160005b83811015614e3457815187529582019590820190600101615ae2565b600081518084526020808501945080840160005b83811015614e345781516001600160a01b031687529582019590820190600101615b12565b86815285602082015260c060408201526000615b5660c0830187615ace565b8281036060840152615b688187615afe565b6001600160a01b03959095166080840152505060a00152949350505050565b600082601f830112615b9857600080fd5b81516020615ba8613e0583613fc8565b82815260059290921b84018101918181019086841115615bc757600080fd5b8286015b8481101561406a5780518352918301918301615bcb565b600060208284031215615bf457600080fd5b81516001600160401b03811115615c0a57600080fd5b6147d084828501615b87565b85815284602082015260a060408201526000615c3560a0830186615afe565b6001600160a01b0394909416606083015250608001529392505050565b85815260a060208201526000615c6b60a0830187615ace565b8281036040840152615c7d8187615afe565b6001600160a01b039590951660608401525050608001529392505050565b848152608060208201526000615cb46080830186615afe565b6001600160a01b03949094166040830152506060015292915050565b602081526000825160a06020840152615cec60c0840182614d47565b905060018060a01b0360208501511660408401526040840151606084015260608401516080840152608084015160a08401528091505092915050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600060208284031215615d8557600080fd5b81516001600160401b0380821115615d9c57600080fd5b9083019060408286031215615db057600080fd5b615db8613c9e565b825182811115615dc757600080fd5b615dd38782860161478b565b825250602083015182811115615de857600080fd5b615df487828601615b87565b60208301525095945050505050565b6000816000190483118215151615615e1d57615e1d6145f7565b500290565b600082615e3f57634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220e18fcb26ac0051944ad5df169c5198d5e1c84daea86c760b64fa642bea93718d64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "bulkPurchase((uint8,uint256,address,uint256,bytes)[],address,address,bool)": {
        "params": {
          "allowFail": "- true if fails while executing orders are allowed, false if fail of a single order means fail of the whole batch",
          "feeRecipientFirst": "- address of the first fee recipient",
          "feeRecipientSecond": "- address of the second fee recipient",
          "purchaseDetails": "- array of details about the purchases (more info in PurchaseDetails struct)"
        }
      },
      "bulkPurchaseWithSwap((uint8,uint256,address,uint256,bytes)[],address,address,bool,(bytes,uint256,uint256,bool))": {
        "params": {
          "allowFail": "- true if fails while executing orders are allowed, false if fail of a single order means fail of the whole batch",
          "feeRecipientFirst": "- address of the first fee recipient",
          "feeRecipientSecond": "- address of the second fee recipient",
          "purchaseDetails": "- array of details about the purchases (more info in PurchaseDetails struct)",
          "swapDetails": "- swapDetails v3"
        }
      },
      "bulkPurchaseWithV2Swap((uint8,uint256,address,uint256,bytes)[],address,address,bool,(address[],uint256,uint256,uint256[],bool))": {
        "params": {
          "allowFail": "- true if fails while executing orders are allowed, false if fail of a single order means fail of the whole batch",
          "feeRecipientFirst": "- address of the first fee recipient",
          "feeRecipientSecond": "- address of the second fee recipient",
          "purchaseDetails": "- array of details about the purchases (more info in PurchaseDetails struct)",
          "swapDetails": "- swapDetails v2"
        }
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "singlePurchase((uint8,uint256,address,uint256,bytes),address,address)": {
        "params": {
          "feeRecipientFirst": "- address of the first fee recipient",
          "feeRecipientSecond": "- address of the second fee recipient",
          "purchaseDetails": "- details about the purchase (more info in PurchaseDetails struct)"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "bulkPurchase((uint8,uint256,address,uint256,bytes)[],address,address,bool)": {
        "notice": "executes an array of purchases"
      },
      "bulkPurchaseWithSwap((uint8,uint256,address,uint256,bytes)[],address,address,bool,(bytes,uint256,uint256,bool))": {
        "notice": "executes an array of purchases - with swap v3"
      },
      "bulkPurchaseWithV2Swap((uint8,uint256,address,uint256,bytes)[],address,address,bool,(address[],uint256,uint256,uint256[],bool))": {
        "notice": "executes an array of purchases - with swap v2 - tokens for tokens or tokens for eth/weth"
      },
      "pause()": {
        "notice": "Pause the contract"
      },
      "setBlur(address)": {
        "notice": "set blur - temporary to remove"
      },
      "setLooksRare(address)": {
        "notice": "set looksrare - temporary to remove"
      },
      "setMarketProxy(uint8,address)": {
        "notice": "Set erc20 proxy for market"
      },
      "setRarible(address)": {
        "notice": "set rarible - temporary to remove"
      },
      "setSeaport14(address)": {
        "notice": "set seaport 1.4 - temporary to remove"
      },
      "setSeaport15(address)": {
        "notice": "set seaport 1.5 - temporary to remove"
      },
      "setSudoSwap(address)": {
        "notice": "set sudoswap - temporary to remove"
      },
      "setTransferProxy(address)": {
        "notice": "Set erc20 transfer proxy"
      },
      "setUniswapV2(address)": {
        "notice": "Set uniswap v2 router"
      },
      "setUniswapV3(address)": {
        "notice": "Set uniswap v3 router"
      },
      "setWrapped(address)": {
        "notice": "Set wrapped token"
      },
      "setX2Y2(address)": {
        "notice": "set x2y2 - temporary to remove"
      },
      "singlePurchase((uint8,uint256,address,uint256,bytes),address,address)": {
        "notice": "executes a single purchase"
      },
      "unpause()": {
        "notice": "Unpause the contract"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 721,
        "contract": "src/exchange-wrapper/ExchangeWrapper.sol:ExchangeWrapper",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 724,
        "contract": "src/exchange-wrapper/ExchangeWrapper.sol:ExchangeWrapper",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 4842,
        "contract": "src/exchange-wrapper/ExchangeWrapper.sol:ExchangeWrapper",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 593,
        "contract": "src/exchange-wrapper/ExchangeWrapper.sol:ExchangeWrapper",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 713,
        "contract": "src/exchange-wrapper/ExchangeWrapper.sol:ExchangeWrapper",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 886,
        "contract": "src/exchange-wrapper/ExchangeWrapper.sol:ExchangeWrapper",
        "label": "_paused",
        "offset": 0,
        "slot": "101",
        "type": "t_bool"
      },
      {
        "astId": 991,
        "contract": "src/exchange-wrapper/ExchangeWrapper.sol:ExchangeWrapper",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 11538,
        "contract": "src/exchange-wrapper/ExchangeWrapper.sol:ExchangeWrapper",
        "label": "exchangeV2",
        "offset": 0,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 11540,
        "contract": "src/exchange-wrapper/ExchangeWrapper.sol:ExchangeWrapper",
        "label": "rarible",
        "offset": 0,
        "slot": "152",
        "type": "t_address"
      },
      {
        "astId": 11542,
        "contract": "src/exchange-wrapper/ExchangeWrapper.sol:ExchangeWrapper",
        "label": "seaport_1_4",
        "offset": 0,
        "slot": "153",
        "type": "t_address"
      },
      {
        "astId": 11544,
        "contract": "src/exchange-wrapper/ExchangeWrapper.sol:ExchangeWrapper",
        "label": "seaport_1_5",
        "offset": 0,
        "slot": "154",
        "type": "t_address"
      },
      {
        "astId": 11546,
        "contract": "src/exchange-wrapper/ExchangeWrapper.sol:ExchangeWrapper",
        "label": "x2y2",
        "offset": 0,
        "slot": "155",
        "type": "t_address"
      },
      {
        "astId": 11548,
        "contract": "src/exchange-wrapper/ExchangeWrapper.sol:ExchangeWrapper",
        "label": "looksrare",
        "offset": 0,
        "slot": "156",
        "type": "t_address"
      },
      {
        "astId": 11550,
        "contract": "src/exchange-wrapper/ExchangeWrapper.sol:ExchangeWrapper",
        "label": "sudoswap",
        "offset": 0,
        "slot": "157",
        "type": "t_address"
      },
      {
        "astId": 11552,
        "contract": "src/exchange-wrapper/ExchangeWrapper.sol:ExchangeWrapper",
        "label": "blur",
        "offset": 0,
        "slot": "158",
        "type": "t_address"
      },
      {
        "astId": 11555,
        "contract": "src/exchange-wrapper/ExchangeWrapper.sol:ExchangeWrapper",
        "label": "uniswapRouterV2",
        "offset": 0,
        "slot": "159",
        "type": "t_contract(ISwapRouterV2)14749"
      },
      {
        "astId": 11558,
        "contract": "src/exchange-wrapper/ExchangeWrapper.sol:ExchangeWrapper",
        "label": "uniswapRouterV3",
        "offset": 0,
        "slot": "160",
        "type": "t_contract(ISwapRouterV3)14799"
      },
      {
        "astId": 11560,
        "contract": "src/exchange-wrapper/ExchangeWrapper.sol:ExchangeWrapper",
        "label": "wrappedToken",
        "offset": 0,
        "slot": "161",
        "type": "t_address"
      },
      {
        "astId": 11562,
        "contract": "src/exchange-wrapper/ExchangeWrapper.sol:ExchangeWrapper",
        "label": "erc20TransferProxy",
        "offset": 0,
        "slot": "162",
        "type": "t_address"
      },
      {
        "astId": 11567,
        "contract": "src/exchange-wrapper/ExchangeWrapper.sol:ExchangeWrapper",
        "label": "proxies",
        "offset": 0,
        "slot": "163",
        "type": "t_mapping(t_enum(Markets)11582,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ISwapRouterV2)14749": {
        "encoding": "inplace",
        "label": "contract ISwapRouterV2",
        "numberOfBytes": "20"
      },
      "t_contract(ISwapRouterV3)14799": {
        "encoding": "inplace",
        "label": "contract ISwapRouterV3",
        "numberOfBytes": "20"
      },
      "t_enum(Markets)11582": {
        "encoding": "inplace",
        "label": "enum ExchangeWrapperCore.Markets",
        "numberOfBytes": "1"
      },
      "t_mapping(t_enum(Markets)11582,t_address)": {
        "encoding": "mapping",
        "key": "t_enum(Markets)11582",
        "label": "mapping(enum ExchangeWrapperCore.Markets => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}