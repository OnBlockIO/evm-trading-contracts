{
  "address": "0xaBe6320Aa780e3986E9122becE44F0540E96c2F0",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "result",
          "type": "bool"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "Execution",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_exchangeV2",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rarible",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_wyvern",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_seaport",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_x2y2",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_looksrare",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_sudoswap",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_blur",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_wethToken",
          "type": "address"
        },
        {
          "internalType": "contract ISwapRouterV3",
          "name": "_uniswapRouterV3",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_erc20TransferProxy",
          "type": "address"
        }
      ],
      "name": "__ExchangeWrapper_init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "enum ExchangeWrapperCore.Markets",
              "name": "marketId",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fees",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct ExchangeWrapperCore.PurchaseDetails[]",
          "name": "purchaseDetails",
          "type": "tuple[]"
        },
        {
          "internalType": "address",
          "name": "feeRecipientFirst",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "feeRecipientSecond",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "allowFail",
          "type": "bool"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountInMaximum",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "unwrap",
              "type": "bool"
            }
          ],
          "internalType": "struct ExchangeWrapperCore.SwapDetailsIn",
          "name": "swapDetails",
          "type": "tuple"
        }
      ],
      "name": "bulkPurchase",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_blur",
          "type": "address"
        }
      ],
      "name": "setBlur",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rarible",
          "type": "address"
        }
      ],
      "name": "setRarible",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_erc20TransferProxy",
          "type": "address"
        }
      ],
      "name": "setTransferProxy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISwapRouterV3",
          "name": "_uniswapRouterV3",
          "type": "address"
        }
      ],
      "name": "setUniswapV3",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_wethToken",
          "type": "address"
        }
      ],
      "name": "setWeth",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "enum ExchangeWrapperCore.Markets",
              "name": "marketId",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fees",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct ExchangeWrapperCore.PurchaseDetails",
          "name": "purchaseDetails",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "feeRecipientFirst",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "feeRecipientSecond",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountInMaximum",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "unwrap",
              "type": "bool"
            }
          ],
          "internalType": "struct ExchangeWrapperCore.SwapDetailsIn",
          "name": "swapDetails",
          "type": "tuple"
        }
      ],
      "name": "singlePurchase",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xcdfc2eb8d55043cd90dabcf47ebb42bda803e4b95e778340b3287c59e8762cfa",
  "receipt": {
    "to": null,
    "from": "0x9E1bd73820A607b06086b5B5173765a61CEEE7dC",
    "contractAddress": "0xaBe6320Aa780e3986E9122becE44F0540E96c2F0",
    "transactionIndex": 18,
    "gasUsed": "3282554",
    "logsBloom": "0x
    "blockHash": "0xd893d5093a7d9ec7a0396d16ba05a91a40c834f763153c742192f5b804a468c3",
    "transactionHash": "0xcdfc2eb8d55043cd90dabcf47ebb42bda803e4b95e778340b3287c59e8762cfa",
    "logs": [],
    "blockNumber": 8494699,
    "cumulativeGasUsed": "7978437",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "9dc71691ecb1f39d59f81c925aff3a24",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"Execution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_exchangeV2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rarible\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wyvern\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_seaport\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_x2y2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_looksrare\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sudoswap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_blur\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wethToken\",\"type\":\"address\"},{\"internalType\":\"contract ISwapRouterV3\",\"name\":\"_uniswapRouterV3\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_erc20TransferProxy\",\"type\":\"address\"}],\"name\":\"__ExchangeWrapper_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum ExchangeWrapperCore.Markets\",\"name\":\"marketId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct ExchangeWrapperCore.PurchaseDetails[]\",\"name\":\"purchaseDetails\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"feeRecipientFirst\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeRecipientSecond\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowFail\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMaximum\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"unwrap\",\"type\":\"bool\"}],\"internalType\":\"struct ExchangeWrapperCore.SwapDetailsIn\",\"name\":\"swapDetails\",\"type\":\"tuple\"}],\"name\":\"bulkPurchase\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_blur\",\"type\":\"address\"}],\"name\":\"setBlur\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rarible\",\"type\":\"address\"}],\"name\":\"setRarible\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20TransferProxy\",\"type\":\"address\"}],\"name\":\"setTransferProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISwapRouterV3\",\"name\":\"_uniswapRouterV3\",\"type\":\"address\"}],\"name\":\"setUniswapV3\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wethToken\",\"type\":\"address\"}],\"name\":\"setWeth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum ExchangeWrapperCore.Markets\",\"name\":\"marketId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct ExchangeWrapperCore.PurchaseDetails\",\"name\":\"purchaseDetails\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"feeRecipientFirst\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeRecipientSecond\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMaximum\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"unwrap\",\"type\":\"bool\"}],\"internalType\":\"struct ExchangeWrapperCore.SwapDetailsIn\",\"name\":\"swapDetails\",\"type\":\"tuple\"}],\"name\":\"singlePurchase\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"bulkPurchase((uint8,uint256,uint256,bytes)[],address,address,bool,(address,address,uint256,uint256,bool))\":{\"params\":{\"allowFail\":\"- true if fails while executing orders are allowed, false if fail of a single order means fail of the whole batch\",\"feeRecipientFirst\":\"- address of the first fee recipient\",\"feeRecipientSecond\":\"- address of the second fee recipient\",\"purchaseDetails\":\"- array of details about the purchases (more info in PurchaseDetails struct)\"}},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"singlePurchase((uint8,uint256,uint256,bytes),address,address,(address,address,uint256,uint256,bool))\":{\"params\":{\"feeRecipientFirst\":\"- address of the first fee recipient\",\"feeRecipientSecond\":\"- address of the second fee recipient\",\"purchaseDetails\":\"- details about the purchase (more info in PurchaseDetails struct)\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"bulkPurchase((uint8,uint256,uint256,bytes)[],address,address,bool,(address,address,uint256,uint256,bool))\":{\"notice\":\"executes an array of purchases\"},\"pause()\":{\"notice\":\"Pause the contract\"},\"setTransferProxy(address)\":{\"notice\":\"temp for upgrade - to remove once initialized\"},\"singlePurchase((uint8,uint256,uint256,bytes),address,address,(address,address,uint256,uint256,bool))\":{\"notice\":\"executes a single purchase\"},\"unpause()\":{\"notice\":\"Unpause the contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/exchange-wrapper/ExchangeWrapper.sol\":\"ExchangeWrapper\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x091a49ef99a2be002680781a10cc9dd74c0f348301ede5482c4ea625f79a8ffe\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xcc70d8e2281fb3ff69e8ab242500f10142cd0a7fa8dd9e45882be270d4d09024\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf42efac0d704b136c4d85e970562d4dbc1160d726ee93b5133122eb14fe368df\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x016298e66a5810253c6c905e61966bb31c8775c3f3517bf946ff56ee31d6c005\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xea5339a7fff0ed42b45be56a88efdd0b2ddde9fa480dc99fef9a6a4c5b776863\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.3) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xbf5daf926894541a40a64b43c3746aa1940c5a1b3b8d14a06465eea72a9b90cc\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSAUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n *\\n * @custom:storage-size 52\\n */\\nabstract contract EIP712Upgradeable is Initializable {\\n    /* solhint-disable var-name-mixedcase */\\n    bytes32 private _HASHED_NAME;\\n    bytes32 private _HASHED_VERSION;\\n    bytes32 private constant _TYPE_HASH = keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\\n        __EIP712_init_unchained(name, version);\\n    }\\n\\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        return _buildDomainSeparator(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash());\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev The hash of the name parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712NameHash() internal virtual view returns (bytes32) {\\n        return _HASHED_NAME;\\n    }\\n\\n    /**\\n     * @dev The hash of the version parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712VersionHash() internal virtual view returns (bytes32) {\\n        return _HASHED_VERSION;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xaf5a96100f421d61693605349511e43221d3c2e47d4b3efa87af2b936e2567fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155Receiver.sol\\\";\\n\\n/**\\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\\n *\\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\\n * stuck.\\n *\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x2e024ca51ce5abe16c0d34e6992a1104f356e2244eb4ccbec970435e8b3405e3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x3dd5e1a66a56f30302108a1da97d677a42b1daa60e503696b2bcbbf3e4c95bcb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x0108bf6a6ebd5f96678bed33a35947537263f96766131ee91461fb6485805028\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"src/custom-matcher/AssetMatcher.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../interfaces/IAssetMatcher.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nabstract contract AssetMatcher is Initializable, OwnableUpgradeable {\\n    bytes internal constant EMPTY = \\\"\\\";\\n    mapping(bytes4 => address) internal matchers;\\n\\n    event MatcherChange(bytes4 indexed assetType, address matcher);\\n\\n    function setAssetMatcher(bytes4 assetType, address matcher) external onlyOwner {\\n        matchers[assetType] = matcher;\\n        emit MatcherChange(assetType, matcher);\\n    }\\n\\n    function matchAssets(\\n        LibAsset.AssetType memory leftAssetType,\\n        LibAsset.AssetType memory rightAssetType\\n    ) internal view returns (LibAsset.AssetType memory) {\\n        LibAsset.AssetType memory result = matchAssetOneSide(leftAssetType, rightAssetType);\\n        if (result.assetClass == 0) {\\n            return matchAssetOneSide(rightAssetType, leftAssetType);\\n        } else {\\n            return result;\\n        }\\n    }\\n\\n    function matchAssetOneSide(\\n        LibAsset.AssetType memory leftAssetType,\\n        LibAsset.AssetType memory rightAssetType\\n    ) private view returns (LibAsset.AssetType memory) {\\n        bytes4 classLeft = leftAssetType.assetClass;\\n        bytes4 classRight = rightAssetType.assetClass;\\n        if (classLeft == LibAsset.ETH_ASSET_CLASS) {\\n            if (classRight == LibAsset.ETH_ASSET_CLASS) {\\n                return leftAssetType;\\n            }\\n            return LibAsset.AssetType(0, EMPTY);\\n        }\\n        if (classLeft == LibAsset.ERC20_ASSET_CLASS) {\\n            if (classRight == LibAsset.ERC20_ASSET_CLASS) {\\n                return simpleMatch(leftAssetType, rightAssetType);\\n            }\\n            return LibAsset.AssetType(0, EMPTY);\\n        }\\n        if (classLeft == LibAsset.ERC721_ASSET_CLASS) {\\n            if (classRight == LibAsset.ERC721_ASSET_CLASS) {\\n                return simpleMatch(leftAssetType, rightAssetType);\\n            }\\n            return LibAsset.AssetType(0, EMPTY);\\n        }\\n        if (classLeft == LibAsset.ERC1155_ASSET_CLASS) {\\n            if (classRight == LibAsset.ERC1155_ASSET_CLASS) {\\n                return simpleMatch(leftAssetType, rightAssetType);\\n            }\\n            return LibAsset.AssetType(0, EMPTY);\\n        }\\n        address matcher = matchers[classLeft];\\n        if (matcher != address(0)) {\\n            return IAssetMatcher(matcher).matchAssets(leftAssetType, rightAssetType);\\n        }\\n        if (classLeft == classRight) {\\n            return simpleMatch(leftAssetType, rightAssetType);\\n        }\\n        revert(\\\"not found IAssetMatcher\\\");\\n    }\\n\\n    function simpleMatch(\\n        LibAsset.AssetType memory leftAssetType,\\n        LibAsset.AssetType memory rightAssetType\\n    ) private pure returns (LibAsset.AssetType memory) {\\n        bytes32 leftHash = keccak256(leftAssetType.data);\\n        bytes32 rightHash = keccak256(rightAssetType.data);\\n        if (leftHash == rightHash) {\\n            return leftAssetType;\\n        }\\n        return LibAsset.AssetType(0, EMPTY);\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xdfc4cbf5b6af2b40b995adb349d201dfb60ecfc0734add2e6fe6d207f09367c9\",\"license\":\"MIT\"},\"src/exchange-wrapper/ExchangeWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./ExchangeWrapperCore.sol\\\";\\n\\ncontract ExchangeWrapper is ExchangeWrapperCore {\\n    function __ExchangeWrapper_init(\\n        address _exchangeV2,\\n        address _rarible,\\n        address _wyvern,\\n        address _seaport,\\n        address _x2y2,\\n        address _looksrare,\\n        address _sudoswap,\\n        address _blur,\\n        address _wethToken,\\n        ISwapRouterV3 _uniswapRouterV3,\\n        address _erc20TransferProxy\\n        // ISwapRouterV2 _uniswapRouterV2,\\n    ) external initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n        __Pausable_init_unchained();\\n        __ExchangeWrapper_init_unchained(_exchangeV2, _rarible, _wyvern, _seaport, _x2y2, _looksrare, _sudoswap, _blur, _wethToken, _uniswapRouterV3, _erc20TransferProxy/*, _uniswapRouterV2*/);\\n    }\\n}\",\"keccak256\":\"0x2ec6d6f23ac240069319013828f622efe3a661a7334f65fb21291023d03d89f6\",\"license\":\"MIT\"},\"src/exchange-wrapper/ExchangeWrapperCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../librairies/LibTransfer.sol\\\";\\nimport \\\"../librairies/BpLibrary.sol\\\";\\nimport \\\"../librairies/LibPart.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\n\\nimport \\\"./interfaces/IWyvernExchange.sol\\\";\\nimport \\\"./interfaces/IExchangeV2.sol\\\";\\nimport \\\"./interfaces/ISeaPort.sol\\\";\\nimport \\\"./interfaces/Ix2y2.sol\\\";\\nimport \\\"./interfaces/ILooksRare.sol\\\";\\nimport \\\"./interfaces/IBlurExchange.sol\\\";\\nimport {IWETH} from \\\"./interfaces/IWETH.sol\\\";\\n// import {ISwapRouterV2} from \\\"./interfaces/ISwapRouterV3.sol\\\";\\nimport {ISwapRouterV3} from \\\"./interfaces/ISwapRouterV3.sol\\\";\\n\\nabstract contract ExchangeWrapperCore is\\n    Initializable,\\n    OwnableUpgradeable,\\n    PausableUpgradeable,\\n    ERC721Holder,\\n    ERC1155Holder\\n{\\n    using LibTransfer for address;\\n    using BpLibrary for uint;\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    address internal exchangeV2;\\n    address internal rarible;\\n    address internal wyvern;\\n    address internal seaport;\\n    address internal x2y2;\\n    address internal looksrare;\\n    address internal sudoswap;\\n    address internal blur;\\n    address internal wethToken;\\n    ISwapRouterV3 internal uniswapRouterV3;\\n    address internal erc20TransferProxy;\\n    // ISwapRouterV2 internal uniswapRouterV2;\\n\\n    event Execution(bool result, address indexed sender);\\n\\n    enum Markets {\\n        Rarible,\\n        Wyvern,\\n        SeaPort,\\n        X2Y2,\\n        LooksRare,\\n        SudoSwap,\\n        ExchangeV2,\\n        Blur\\n    }\\n\\n    enum AdditionalDataTypes {\\n        NoAdditionalData,\\n        RoyaltiesAdditionalData\\n    }\\n\\n    /**\\n        @notice struct for the purchase data\\n        @param marketId - market key from Markets enum (what market to use)\\n        @param amount - eth price (amount of eth that needs to be send to the marketplace)\\n        @param fees - 2 fees (in base points) that are going to be taken on top of order amount encoded in 1 uint256\\n                        bytes (27,28) used for dataType\\n                        bytes (29,30) used for the first value (goes to feeRecipientFirst)\\n                        bytes (31,32) are used for the second value (goes to feeRecipientSecond)\\n        @param data - data for market call\\n     */\\n    struct PurchaseDetails {\\n        Markets marketId;\\n        uint256 amount;\\n        uint fees;\\n        bytes data;\\n    }\\n\\n    /**\\n        @notice struct for the data with additional Ddta\\n        @param data - data for market call\\n        @param additionalRoyalties - array additional Royalties (in base points plus address Royalty recipient)\\n     */\\n    struct AdditionalData {\\n        bytes data;\\n        uint[] additionalRoyalties;\\n    }\\n\\n    /**\\n        @notice struct for the swap in data\\n        @param tokenIn - tokenIn\\n        @param tokenOut - tokenOut\\n        @param amountOut - amountOut\\n        @param amountInMaximum - amountInMaximum\\n        @param unwrap - unwrap\\n     */\\n    struct SwapDetailsIn {\\n        address tokenIn;\\n        address tokenOut;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        bool unwrap;\\n    }\\n\\n    /**\\n        @notice struct for the swap out data\\n        @param tokenIn - tokenIn\\n        @param tokenOut - tokenOut\\n        @param amountIn - amountOut\\n        @param amountOutMinimum - amountOutMinimum\\n     */\\n    struct SwapDetailsOut {\\n        address tokenIn;\\n        address tokenOut;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        bool wrap;\\n    }\\n\\n    function __ExchangeWrapper_init_unchained(\\n        address _exchangeV2,\\n        address _rarible,\\n        address _wyvern,\\n        address _seaport,\\n        address _x2y2,\\n        address _looksrare,\\n        address _sudoswap,\\n        address _blur,\\n        address _wethToken,\\n        ISwapRouterV3 _uniswapRouterV3,\\n        address _erc20TransferProxy\\n        // ISwapRouterV2 _uniswapRouterV2,\\n    ) internal {\\n        exchangeV2 = _exchangeV2;\\n        rarible = _rarible;\\n        wyvern = _wyvern;\\n        seaport = _seaport;\\n        x2y2 = _x2y2;\\n        looksrare = _looksrare;\\n        sudoswap = _sudoswap;\\n        blur = _blur;\\n        wethToken = _wethToken;\\n        uniswapRouterV3 = _uniswapRouterV3;\\n        erc20TransferProxy = _erc20TransferProxy;\\n        // uniswapRouterV2 = _uniswapRouterV2;\\n    }\\n\\n    /// @notice Pause the contract\\n    function pause() public onlyOwner {\\n        _pause();\\n    }\\n\\n    /// @notice Unpause the contract\\n    function unpause() public onlyOwner {\\n        _unpause();\\n    }\\n\\n    /// temp for upgrade - to remove once initialized\\n    function setTransferProxy(address _erc20TransferProxy) external onlyOwner {\\n        erc20TransferProxy = _erc20TransferProxy;\\n    }\\n\\n    function setRarible(address _rarible) external onlyOwner {\\n        rarible = _rarible;\\n    }\\n\\n    function setBlur(address _blur) external onlyOwner {\\n        blur = _blur;\\n    }\\n\\n    function setWeth(address _wethToken) external onlyOwner {\\n        wethToken = _wethToken;\\n    }\\n\\n    function setUniswapV3(ISwapRouterV3 _uniswapRouterV3) external onlyOwner {\\n        uniswapRouterV3 = _uniswapRouterV3;\\n    }\\n\\n    /*function setUniswapV2(ISwapRouterV2 _uniswapRouterV2) external onlyOwner {\\n        uniswapRouterV2 = _uniswapRouterV2;\\n    }*/\\n    /// temp for upgrade - to remove once initialized\\n\\n    /**\\n        @notice executes a single purchase\\n        @param purchaseDetails - details about the purchase (more info in PurchaseDetails struct)\\n        @param feeRecipientFirst - address of the first fee recipient\\n        @param feeRecipientSecond - address of the second fee recipient\\n     */\\n    function singlePurchase(\\n        PurchaseDetails memory purchaseDetails,\\n        address feeRecipientFirst,\\n        address feeRecipientSecond,\\n        SwapDetailsIn memory swapDetails\\n    ) external payable whenNotPaused {\\n\\n        if (swapDetails.tokenIn != address(0))\\n        {\\n            bool isSwapExecuted = swapTokensForETHOrWETH(swapDetails);\\n            require(isSwapExecuted, \\\"swap not successful\\\");\\n        }\\n\\n        (bool success, uint feeAmountFirst, uint feeAmountSecond) = purchase(purchaseDetails, false);\\n        emit Execution(success, _msgSender());\\n\\n        transferFee(feeAmountFirst, feeRecipientFirst);\\n        transferFee(feeAmountSecond, feeRecipientSecond);\\n\\n        transferChange();\\n    }\\n\\n    /**\\n        @notice executes an array of purchases\\n        @param purchaseDetails - array of details about the purchases (more info in PurchaseDetails struct)\\n        @param feeRecipientFirst - address of the first fee recipient\\n        @param feeRecipientSecond - address of the second fee recipient\\n        @param allowFail - true if fails while executing orders are allowed, false if fail of a single order means fail of the whole batch\\n     */\\n\\n    function bulkPurchase(\\n        PurchaseDetails[] memory purchaseDetails,\\n        address feeRecipientFirst,\\n        address feeRecipientSecond,\\n        bool allowFail,\\n        SwapDetailsIn memory swapDetails\\n\\n    ) external payable whenNotPaused {\\n        uint sumFirstFees = 0;\\n        uint sumSecondFees = 0;\\n        bool result = false;\\n\\n        if (swapDetails.tokenIn != address(0))\\n        {\\n            bool isSwapExecuted = swapTokensForETHOrWETH(swapDetails);\\n            require(isSwapExecuted, \\\"swap not successful\\\");\\n        }\\n\\n        uint length = purchaseDetails.length;\\n        for (uint i; i < length; ++i) {\\n            (bool success, uint firstFeeAmount, uint secondFeeAmount) = purchase(purchaseDetails[i], allowFail);\\n\\n            result = result || success;\\n            emit Execution(success, _msgSender());\\n\\n            sumFirstFees = sumFirstFees + (firstFeeAmount);\\n            sumSecondFees = sumSecondFees + (secondFeeAmount);\\n        }\\n\\n        require(result, \\\"no successful executions\\\");\\n\\n        transferFee(sumFirstFees, feeRecipientFirst);\\n        transferFee(sumSecondFees, feeRecipientSecond);\\n\\n        transferChange();\\n    }\\n\\n    /**\\n        @notice executes one purchase\\n        @param purchaseDetails - details about the purchase\\n        @param allowFail - true if errors are handled, false if revert on errors\\n        @return result false if execution failed, true if succeded\\n        @return firstFeeAmount amount of the first fee of the purchase, 0 if failed\\n        @return secondFeeAmount amount of the second fee of the purchase, 0 if failed\\n     */\\n    function purchase(PurchaseDetails memory purchaseDetails, bool allowFail) internal returns (bool, uint, uint) {\\n        (bytes memory marketData, uint[] memory additionalRoyalties) = getDataAndAdditionalData(\\n            purchaseDetails.data,\\n            purchaseDetails.fees,\\n            purchaseDetails.marketId\\n        );\\n        uint paymentAmount = purchaseDetails.amount;\\n        if (purchaseDetails.marketId == Markets.SeaPort) {\\n            (bool success, ) = address(seaport).call{value: paymentAmount}(marketData);\\n            if (allowFail) {\\n                if (!success) {\\n                    return (false, 0, 0);\\n                }\\n            } else {\\n                require(success, \\\"Purchase Seaport failed\\\");\\n            }\\n        } else if (purchaseDetails.marketId == Markets.Wyvern) {\\n            (bool success, ) = address(wyvern).call{value: paymentAmount}(marketData);\\n            if (allowFail) {\\n                if (!success) {\\n                    return (false, 0, 0);\\n                }\\n            } else {\\n                require(success, \\\"Purchase Wyvern failed\\\");\\n            }\\n        } else if (purchaseDetails.marketId == Markets.ExchangeV2) {\\n            (bool success, ) = address(exchangeV2).call{value: paymentAmount}(marketData);\\n            if (allowFail) {\\n                if (!success) {\\n                    return (false, 0, 0);\\n                }\\n            } else {\\n                require(success, \\\"Purchase GhostMarket failed\\\");\\n            }\\n        } else if (purchaseDetails.marketId == Markets.Rarible) {\\n            (bool success, ) = address(rarible).call{value: paymentAmount}(marketData);\\n            if (allowFail) {\\n                if (!success) {\\n                    return (false, 0, 0);\\n                }\\n            } else {\\n                require(success, \\\"Purchase Rarible failed\\\");\\n            }\\n        } else if (purchaseDetails.marketId == Markets.X2Y2) {\\n            Ix2y2.RunInput memory input = abi.decode(marketData, (Ix2y2.RunInput));\\n\\n            if (allowFail) {\\n                try Ix2y2(x2y2).run{value: paymentAmount}(input) {} catch {\\n                    return (false, 0, 0);\\n                }\\n            } else {\\n                Ix2y2(x2y2).run{value: paymentAmount}(input);\\n            }\\n\\n            // for every element in input.details[] getting\\n            // order = input.details[i].orderIdx\\n            // and from that order getting item = input.details[i].itemId\\n            uint length = input.details.length;\\n            for (uint i; i < length; ++i) {\\n                uint orderId = input.details[i].orderIdx;\\n                uint itemId = input.details[i].itemIdx;\\n                bytes memory data = input.orders[orderId].items[itemId].data;\\n                {\\n                    if (input.orders[orderId].dataMask.length > 0 && input.details[i].dataReplacement.length > 0) {\\n                        _arrayReplace(data, input.details[i].dataReplacement, input.orders[orderId].dataMask);\\n                    }\\n                }\\n\\n                // 1 = erc-721\\n                if (input.orders[orderId].delegateType == 1) {\\n                    Ix2y2.Pair721[] memory pairs = abi.decode(data, (Ix2y2.Pair721[]));\\n\\n                    for (uint256 j = 0; j < pairs.length; j++) {\\n                        Ix2y2.Pair721 memory p = pairs[j];\\n                        IERC721Upgradeable(address(p.token)).safeTransferFrom(address(this), _msgSender(), p.tokenId);\\n                    }\\n                } else if (input.orders[orderId].delegateType == 2) {\\n                    // 2 = erc-1155\\n                    Ix2y2.Pair1155[] memory pairs = abi.decode(data, (Ix2y2.Pair1155[]));\\n\\n                    for (uint256 j = 0; j < pairs.length; j++) {\\n                        Ix2y2.Pair1155 memory p = pairs[j];\\n                        IERC1155Upgradeable(address(p.token)).safeTransferFrom(\\n                            address(this),\\n                            _msgSender(),\\n                            p.tokenId,\\n                            p.amount,\\n                            \\\"\\\"\\n                        );\\n                    }\\n                } else {\\n                    revert(\\\"unknown delegateType x2y2\\\");\\n                }\\n            }\\n        } else if (purchaseDetails.marketId == Markets.LooksRare) {\\n            (LibLooksRare.TakerOrder memory takerOrder, LibLooksRare.MakerOrder memory makerOrder, bytes4 typeNft) = abi\\n                .decode(marketData, (LibLooksRare.TakerOrder, LibLooksRare.MakerOrder, bytes4));\\n            if (allowFail) {\\n                try\\n                    ILooksRare(looksrare).matchAskWithTakerBidUsingETHAndWETH{value: paymentAmount}(\\n                        takerOrder,\\n                        makerOrder\\n                    )\\n                {} catch {\\n                    return (false, 0, 0);\\n                }\\n            } else {\\n                ILooksRare(looksrare).matchAskWithTakerBidUsingETHAndWETH{value: paymentAmount}(takerOrder, makerOrder);\\n            }\\n            if (typeNft == LibAsset.ERC721_ASSET_CLASS) {\\n                IERC721Upgradeable(makerOrder.collection).safeTransferFrom(\\n                    address(this),\\n                    _msgSender(),\\n                    makerOrder.tokenId\\n                );\\n            } else if (typeNft == LibAsset.ERC1155_ASSET_CLASS) {\\n                IERC1155Upgradeable(makerOrder.collection).safeTransferFrom(\\n                    address(this),\\n                    _msgSender(),\\n                    makerOrder.tokenId,\\n                    makerOrder.amount,\\n                    \\\"\\\"\\n                );\\n            } else {\\n                revert(\\\"Unknown token type\\\");\\n            }\\n        } else if (purchaseDetails.marketId == Markets.SudoSwap) {\\n            (bool success, ) = address(sudoswap).call{value: paymentAmount}(marketData);\\n            if (allowFail) {\\n                if (!success) {\\n                    return (false, 0, 0);\\n                }\\n            } else {\\n                require(success, \\\"Purchase SudoSwap failed\\\");\\n            }\\n        } else if (purchaseDetails.marketId == Markets.Blur) {\\n            (bool success, ) = address(blur).call{value: paymentAmount}(marketData);\\n            if (allowFail) {\\n                if (!success) {\\n                    return (false, 0, 0);\\n                }\\n            } else {\\n                require(success, \\\"Purchase blurio failed\\\");\\n            }\\n        } else {\\n            revert(\\\"Unknown purchase details\\\");\\n        }\\n\\n        //transferring royalties\\n        transferAdditionalRoyalties(additionalRoyalties, purchaseDetails.amount);\\n\\n        (uint firstFeeAmount, uint secondFeeAmount) = getFees(purchaseDetails.fees, purchaseDetails.amount);\\n        return (true, firstFeeAmount, secondFeeAmount);\\n    }\\n\\n    /**\\n        @notice transfers fee to feeRecipient\\n        @param feeAmount - amount to be transfered\\n        @param feeRecipient - address of the recipient\\n     */\\n    function transferFee(uint feeAmount, address feeRecipient) internal {\\n        if (feeAmount > 0 && feeRecipient != address(0)) {\\n            LibTransfer.transferEth(feeRecipient, feeAmount);\\n        }\\n    }\\n\\n    /**\\n        @notice transfers change back to sender\\n     */\\n    function transferChange() internal {\\n        uint ethAmount = address(this).balance;\\n        if (ethAmount > 0) {\\n            address(msg.sender).transferEth(ethAmount);\\n        }\\n    }\\n\\n    /**\\n        @notice parses fees in base points from one uint and calculates real amount of fees\\n        @param fees two fees encoded in one uint, 29 and 30 bytes are used for the first fee, 31 and 32 bytes for second fee\\n        @param amount price of the order\\n        @return firstFeeAmount real amount for the first fee\\n        @return secondFeeAmount real amount for the second fee\\n     */\\n    function getFees(uint fees, uint amount) internal pure returns (uint, uint) {\\n        uint firstFee = uint(uint16(fees >> 16));\\n        uint secondFee = uint(uint16(fees));\\n        return (amount.bp(firstFee), amount.bp(secondFee));\\n    }\\n\\n    /**\\n        @notice parses _data to data for market call and additionalData\\n        @param feesAndDataType 27 and 28 bytes for dataType\\n        @return marketData data for market call\\n        @return additionalRoyalties array uint256, (base point + address)\\n     */\\n    function getDataAndAdditionalData(\\n        bytes memory _data,\\n        uint feesAndDataType,\\n        Markets marketId\\n    ) internal pure returns (bytes memory, uint[] memory) {\\n        AdditionalDataTypes dataType = AdditionalDataTypes(uint16(feesAndDataType >> 32));\\n        uint[] memory additionalRoyalties;\\n\\n        //return no royalties if wrong data type\\n        if (dataType == AdditionalDataTypes.NoAdditionalData) {\\n            return (_data, additionalRoyalties);\\n        }\\n\\n        if (dataType == AdditionalDataTypes.RoyaltiesAdditionalData) {\\n            AdditionalData memory additionalData = abi.decode(_data, (AdditionalData));\\n\\n            //return no royalties if market doesn't support royalties\\n            if (supportsRoyalties(marketId)) {\\n                return (additionalData.data, additionalData.additionalRoyalties);\\n            } else {\\n                return (additionalData.data, additionalRoyalties);\\n            }\\n        }\\n\\n        revert(\\\"unknown additionalDataType\\\");\\n    }\\n\\n    /**\\n        @notice transfer additional royalties\\n        @param _additionalRoyalties array uint256 (base point + royalty recipient address)\\n     */\\n    function transferAdditionalRoyalties(uint[] memory _additionalRoyalties, uint amount) internal {\\n        uint length = _additionalRoyalties.length;\\n        for (uint i; i < length; ++i) {\\n            if (_additionalRoyalties[i] > 0) {\\n                address payable account = payable(address(uint160(_additionalRoyalties[i])));\\n                uint basePoint = uint(_additionalRoyalties[i] >> 160);\\n                uint value = amount.bp(basePoint);\\n                transferFee(value, account);\\n            }\\n        }\\n    }\\n\\n    // modifies `src`\\n    function _arrayReplace(bytes memory src, bytes memory replacement, bytes memory mask) internal view virtual {\\n        require(src.length == replacement.length);\\n        require(src.length == mask.length);\\n\\n        uint256 length = src.length;\\n        for (uint256 i; i < length; ++i) {\\n            if (mask[i] != 0) {\\n                src[i] = replacement[i];\\n            }\\n        }\\n    }\\n\\n    /**\\n        @notice returns true if this contract supports additional royalties for the marketpale\\n        now royalties support only for marketId = sudoswap\\n    */\\n    function supportsRoyalties(Markets marketId) internal pure returns (bool) {\\n        if (marketId == Markets.SudoSwap || marketId == Markets.LooksRare) {\\n            return true;\\n        }\\n\\n        return false;\\n    }\\n\\n    /**\\n        * @notice swaps tokenIn for ETH or WETH\\n        * @param swapDetails swapDetails required\\n     */\\n    function swapTokensForETHOrWETH(SwapDetailsIn memory swapDetails) internal returns (bool) {\\n\\n        // Move tokenIn to contract\\n        IERC20TransferProxy(erc20TransferProxy).erc20safeTransferFrom(IERC20Upgradeable(swapDetails.tokenIn), _msgSender(), address(this), swapDetails.amountInMaximum);\\n\\n        // Approve tokenIn on uniswap\\n        uint256 allowance = IERC20Upgradeable(swapDetails.tokenIn).allowance(address(uniswapRouterV3), address(this));\\n        if (allowance < swapDetails.amountInMaximum)\\n        {\\n            IERC20Upgradeable(swapDetails.tokenIn).approve(address(uniswapRouterV3), type(uint256).max);\\n        }\\n\\n        // Set the order parameters\\n        ISwapRouterV3.ExactOutputSingleParams memory params = ISwapRouterV3.ExactOutputSingleParams(\\n            address(swapDetails.tokenIn), // tokenIn\\n            address(wethToken), // tokenOut\\n            3000, // fee\\n            address(this), // recipient\\n            block.timestamp, // deadline\\n            swapDetails.amountOut, // amountOut\\n            swapDetails.amountInMaximum, // amountInMaximum\\n            0 // sqrtPriceLimitX96\\n        );\\n\\n        // Swap\\n        try uniswapRouterV3.exactOutputSingle(params) returns (uint256) {} catch {\\n            return false;\\n        }\\n        // Refund ETH from swap if any\\n        uniswapRouterV3.refundETH();\\n\\n        // Unwrap if required\\n        if (swapDetails.unwrap)\\n        {\\n            IWETH(wethToken).withdraw(swapDetails.amountOut);\\n        }\\n\\n        // Refund tokenIn left if any\\n        uint256 amountLeft = IERC20Upgradeable(swapDetails.tokenIn).balanceOf(address(this));\\n        if (amountLeft > 0)\\n        {\\n            IERC20Upgradeable(swapDetails.tokenIn).transfer(_msgSender(), amountLeft);\\n        }\\n       \\n        return true;\\n    }\\n\\n    /**\\n        * @notice swaps ETH or WETH for tokenOut\\n        * @param swapDetails swapDetails required\\n     */\\n    function swapETHOrWethForTokens(SwapDetailsOut memory swapDetails) internal returns (bool) {\\n\\n       // Move tokenIn to contract if ERC20\\n        if (!swapDetails.wrap)\\n        {\\n            IERC20TransferProxy(erc20TransferProxy).erc20safeTransferFrom(IERC20Upgradeable(swapDetails.tokenIn), _msgSender(), address(this), swapDetails.amountIn);\\n        }\\n\\n        // Approve tokenIn on uniswap\\n        uint256 allowance = IERC20Upgradeable(wethToken).allowance(address(uniswapRouterV3), address(this));\\n        if (allowance < swapDetails.amountIn)\\n        {\\n            IERC20Upgradeable(wethToken).approve(address(uniswapRouterV3), type(uint256).max);\\n        }\\n\\n        // Set the order parameters\\n        ISwapRouterV3.ExactInputSingleParams memory params = ISwapRouterV3.ExactInputSingleParams(\\n            address(wethToken), // tokenIn\\n            address(swapDetails.tokenOut), // tokenOut\\n            3000, // fee\\n            address(this), // recipient\\n            block.timestamp, // deadline\\n            swapDetails.amountIn, // amountIn\\n            swapDetails.amountOutMinimum, // amountOutMinimum\\n            0 // sqrtPriceLimitX96\\n        );\\n\\n        // Swap\\n        try uniswapRouterV3.exactInputSingle(params) returns (uint256) {} catch {\\n            return false;\\n        }\\n        // Refund ETH from swap if any\\n        uniswapRouterV3.refundETH();\\n\\n        return true;\\n    }\\n\\n    receive() external payable {}\\n}\",\"keccak256\":\"0xc22d259c4571dea8d62a96125dabc3261dd634c926c3bb61113d1d69394c4c5b\",\"license\":\"MIT\"},\"src/exchange-wrapper/interfaces/IBlurExchange.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport {Input, Order} from \\\"../librairies/OrderStructs.sol\\\";\\n\\ninterface IBlurExchange {\\n    function nonces(address) external view returns (uint256);\\n\\n    function cancelOrder(Order calldata order) external;\\n\\n    function cancelOrders(Order[] calldata orders) external;\\n\\n    function incrementNonce() external;\\n\\n    function execute(Input calldata sell, Input calldata buy) external payable;\\n}\\n\",\"keccak256\":\"0xc6858d178b7f7dc5405a42d4121500cb9de0ca22781ba6f02362d1244b72fad3\",\"license\":\"MIT\"},\"src/exchange-wrapper/interfaces/IExchangeV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../../exchange/ExchangeV2.sol\\\";\\n\\nimport {RoyaltiesRegistry} from \\\"../../royalties-registry/RoyaltiesRegistry.sol\\\";\\nimport {TransferProxy} from \\\"../../transfer-proxy/TransferProxy.sol\\\";\\nimport {ERC20TransferProxy} from \\\"../../transfer-proxy/ERC20TransferProxy.sol\\\";\\n\\ninterface IExchangeV2 {\\n    function matchOrders(\\n        LibOrder.Order memory orderLeft,\\n        bytes memory signatureLeft,\\n        LibOrder.Order memory orderRight,\\n        bytes memory signatureRight\\n    ) external payable;\\n\\n    function directPurchase(LibDirectTransfer.Purchase calldata direct) external payable;\\n}\\n\",\"keccak256\":\"0xbcf08d9cc90a1bc55826c88d98a0931fe5b7f8ff957b95c40105e8c467505f48\",\"license\":\"MIT\"},\"src/exchange-wrapper/interfaces/ILooksRare.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../librairies/LibLooksRare.sol\\\";\\n\\ninterface ILooksRare {\\n    function matchAskWithTakerBidUsingETHAndWETH(\\n        LibLooksRare.TakerOrder calldata takerBid,\\n        LibLooksRare.MakerOrder calldata makerAsk\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x9e50703072fcc59668f236dcab4407773ff4bdd077f878a92b394ad375b4dd2f\",\"license\":\"MIT\"},\"src/exchange-wrapper/interfaces/ISeaPort.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../librairies/LibSeaPort.sol\\\";\\n\\ninterface ISeaPort {\\n    function fulfillAdvancedOrder(\\n        LibSeaPort.AdvancedOrder calldata advancedOrder,\\n        LibSeaPort.CriteriaResolver[] calldata criteriaResolvers,\\n        bytes32 fulfillerConduitKey,\\n        address recipient\\n    ) external payable returns (bool fulfilled);\\n\\n    function fulfillAvailableAdvancedOrders(\\n        LibSeaPort.AdvancedOrder[] memory advancedOrders,\\n        LibSeaPort.CriteriaResolver[] calldata criteriaResolvers,\\n        LibSeaPort.FulfillmentComponent[][] calldata offerFulfillments,\\n        LibSeaPort.FulfillmentComponent[][] calldata considerationFulfillments,\\n        bytes32 fulfillerConduitKey,\\n        address recipient,\\n        uint256 maximumFulfilled\\n    ) external payable returns (bool[] memory availableOrders, LibSeaPort.Execution[] memory executions);\\n\\n    function fulfillBasicOrder(\\n        LibSeaPort.BasicOrderParameters calldata parameters\\n    ) external payable returns (bool fulfilled);\\n}\\n\",\"keccak256\":\"0x630b82f01b62b6bcdcb986898173fdad081c92c2cde794fce6c16aa346b8170a\",\"license\":\"MIT\"},\"src/exchange-wrapper/interfaces/ISwapRouterV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./IUniswapV3SwapCallback.sol\\\";\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouterV3 is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n\\n    function refundETH() external payable;\\n}\",\"keccak256\":\"0x3326b59bda20a29333bf3ce33fa85d1d30e1bf3f8d22dc99d6e745186ac25606\",\"license\":\"MIT\"},\"src/exchange-wrapper/interfaces/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\",\"keccak256\":\"0x20135880d0760fbc56885e718abdeafc0d6f1b4b74467d8f068f80e3f625adb1\",\"license\":\"MIT\"},\"src/exchange-wrapper/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function withdraw(uint256) external;\\n}\",\"keccak256\":\"0xffbe93f3e46102e916ee913b1891af60841a3073a72e3113259ddbd9b39c57ad\",\"license\":\"MIT\"},\"src/exchange-wrapper/interfaces/IWyvernExchange.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IWyvernExchange {\\n    function atomicMatch_(\\n        address[14] memory addrs,\\n        uint[18] memory uints,\\n        uint8[8] memory feeMethodsSidesKindsHowToCalls,\\n        bytes memory calldataBuy,\\n        bytes memory calldataSell,\\n        bytes memory replacementPatternBuy,\\n        bytes memory replacementPatternSell,\\n        bytes memory staticExtradataBuy,\\n        bytes memory staticExtradataSell,\\n        uint8[2] memory vs,\\n        bytes32[5] memory rssMetadata\\n    ) external payable;\\n\\n    enum Side {\\n        Buy,\\n        Sell\\n    }\\n\\n    enum SaleKind {\\n        FixedPrice,\\n        DutchAuction\\n    }\\n\\n    function calculateFinalPrice(\\n        Side side,\\n        SaleKind saleKind,\\n        uint256 basePrice,\\n        uint256 extra,\\n        uint256 listingTime,\\n        uint256 expirationTime\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x73aa407de98807ddf973a048ae71ae39d9b37d4c1a4ab19fa4940c8cc3551cc0\",\"license\":\"MIT\"},\"src/exchange-wrapper/interfaces/Ix2y2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface Ix2y2 {\\n    struct OrderItem {\\n        uint256 price;\\n        bytes data;\\n    }\\n\\n    struct Pair721 {\\n        address token;\\n        uint256 tokenId;\\n    }\\n\\n    struct Pair1155 {\\n        address token;\\n        uint256 tokenId;\\n        uint256 amount;\\n    }\\n\\n    struct Order {\\n        uint256 salt;\\n        address user;\\n        uint256 network;\\n        uint256 intent;\\n        uint256 delegateType;\\n        uint256 deadline;\\n        address currency;\\n        bytes dataMask;\\n        OrderItem[] items;\\n        // signature\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n        uint8 signVersion;\\n    }\\n\\n    struct Fee {\\n        uint256 percentage;\\n        address to;\\n    }\\n\\n    struct SettleDetail {\\n        Op op;\\n        uint256 orderIdx;\\n        uint256 itemIdx;\\n        uint256 price;\\n        bytes32 itemHash;\\n        address executionDelegate;\\n        bytes dataReplacement;\\n        uint256 bidIncentivePct;\\n        uint256 aucMinIncrementPct;\\n        uint256 aucIncDurationSecs;\\n        Fee[] fees;\\n    }\\n\\n    struct SettleShared {\\n        uint256 salt;\\n        uint256 deadline;\\n        uint256 amountToEth;\\n        uint256 amountToWeth;\\n        address user;\\n        bool canFail;\\n    }\\n\\n    struct RunInput {\\n        Order[] orders;\\n        SettleDetail[] details;\\n        SettleShared shared;\\n        // signature\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n    }\\n\\n    enum Op {\\n        INVALID,\\n        // off-chain\\n        COMPLETE_SELL_OFFER,\\n        COMPLETE_BUY_OFFER,\\n        CANCEL_OFFER,\\n        // auction\\n        BID,\\n        COMPLETE_AUCTION,\\n        REFUND_AUCTION,\\n        REFUND_AUCTION_STUCK_ITEM\\n    }\\n\\n    function run(RunInput memory input) external payable;\\n}\\n\",\"keccak256\":\"0xc96a3556fb1ee0b06eacc31618dd68667b63bdfb0d4c57ac8cf040b6d79b6010\",\"license\":\"MIT\"},\"src/exchange-wrapper/librairies/LibLooksRare.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nlibrary LibLooksRare {\\n    struct MakerOrder {\\n        bool isOrderAsk; // true --> ask / false --> bid\\n        address signer; // signer of the maker order\\n        address collection; // collection address\\n        uint256 price; // price (used as )\\n        uint256 tokenId; // id of the token\\n        uint256 amount; // amount of tokens to sell/purchase (must be 1 for ERC721, 1+ for ERC1155)\\n        address strategy; // strategy for trade execution (e.g., DutchAuction, StandardSaleForFixedPrice)\\n        address currency; // currency (e.g., WETH)\\n        uint256 nonce; // order nonce (must be unique unless new maker order is meant to override existing one e.g., lower ask price)\\n        uint256 startTime; // startTime in timestamp\\n        uint256 endTime; // endTime in timestamp\\n        uint256 minPercentageToAsk; // slippage protection (9000 --> 90% of the final price must return to ask)\\n        bytes params; // additional parameters\\n        uint8 v; // v: parameter (27 or 28)\\n        bytes32 r; // r: parameter\\n        bytes32 s; // s: parameter\\n    }\\n\\n    struct TakerOrder {\\n        bool isOrderAsk; // true --> ask / false --> bid\\n        address taker; // msg.sender\\n        uint256 price; // final price for the purchase\\n        uint256 tokenId;\\n        uint256 minPercentageToAsk; // // slippage protection (9000 --> 90% of the final price must return to ask)\\n        bytes params; // other params (e.g., tokenId)\\n    }\\n}\\n\",\"keccak256\":\"0x81cd487dbce83f2b49ae5589c88eac890525e85909838bcf3949fd69b90945e5\",\"license\":\"MIT\"},\"src/exchange-wrapper/librairies/LibSeaPort.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nlibrary LibSeaPort {\\n    /**\\n     * @dev For basic orders involving ETH / native / ERC20 <=> ERC721 / ERC1155\\n     *      matching, a group of six functions may be called that only requires a\\n     *      subset of the usual order arguments. Note the use of a \\\"basicOrderType\\\"\\n     *      enum; this represents both the usual order type as well as the \\\"route\\\"\\n     *      of the basic order (a simple derivation function for the basic order\\n     *      type is `basicOrderType = orderType + (4 * basicOrderRoute)`.)\\n     */\\n    struct BasicOrderParameters {\\n        address considerationToken; // 0x24\\n        uint256 considerationIdentifier; // 0x44\\n        uint256 considerationAmount; // 0x64\\n        address payable offerer; // 0x84\\n        address zone; // 0xa4\\n        address offerToken; // 0xc4\\n        uint256 offerIdentifier; // 0xe4\\n        uint256 offerAmount; // 0x104\\n        BasicOrderType basicOrderType; // 0x124\\n        uint256 startTime; // 0x144\\n        uint256 endTime; // 0x164\\n        bytes32 zoneHash; // 0x184\\n        uint256 salt; // 0x1a4\\n        bytes32 offererConduitKey; // 0x1c4\\n        bytes32 fulfillerConduitKey; // 0x1e4\\n        uint256 totalOriginalAdditionalRecipients; // 0x204\\n        AdditionalRecipient[] additionalRecipients; // 0x224\\n        bytes signature; // 0x244\\n    }\\n    /**\\n     * @dev Basic orders can supply any number of additional recipients, with the\\n     *      implied assumption that they are supplied from the offered ETH (or other\\n     *      native token) or ERC20 token for the order.\\n     */\\n    struct AdditionalRecipient {\\n        uint256 amount;\\n        address payable recipient;\\n    }\\n\\n    // prettier-ignore\\n    enum BasicOrderType {\\n        // 0: no partial fills, anyone can execute\\n        ETH_TO_ERC721_FULL_OPEN,\\n\\n        // 1: partial fills supported, anyone can execute\\n        ETH_TO_ERC721_PARTIAL_OPEN,\\n\\n        // 2: no partial fills, only offerer or zone can execute\\n        ETH_TO_ERC721_FULL_RESTRICTED,\\n\\n        // 3: partial fills supported, only offerer or zone can execute\\n        ETH_TO_ERC721_PARTIAL_RESTRICTED,\\n\\n        // 4: no partial fills, anyone can execute\\n        ETH_TO_ERC1155_FULL_OPEN,\\n\\n        // 5: partial fills supported, anyone can execute\\n        ETH_TO_ERC1155_PARTIAL_OPEN,\\n\\n        // 6: no partial fills, only offerer or zone can execute\\n        ETH_TO_ERC1155_FULL_RESTRICTED,\\n\\n        // 7: partial fills supported, only offerer or zone can execute\\n        ETH_TO_ERC1155_PARTIAL_RESTRICTED,\\n\\n        // 8: no partial fills, anyone can execute\\n        ERC20_TO_ERC721_FULL_OPEN,\\n\\n        // 9: partial fills supported, anyone can execute\\n        ERC20_TO_ERC721_PARTIAL_OPEN,\\n\\n        // 10: no partial fills, only offerer or zone can execute\\n        ERC20_TO_ERC721_FULL_RESTRICTED,\\n\\n        // 11: partial fills supported, only offerer or zone can execute\\n        ERC20_TO_ERC721_PARTIAL_RESTRICTED,\\n\\n        // 12: no partial fills, anyone can execute\\n        ERC20_TO_ERC1155_FULL_OPEN,\\n\\n        // 13: partial fills supported, anyone can execute\\n        ERC20_TO_ERC1155_PARTIAL_OPEN,\\n\\n        // 14: no partial fills, only offerer or zone can execute\\n        ERC20_TO_ERC1155_FULL_RESTRICTED,\\n\\n        // 15: partial fills supported, only offerer or zone can execute\\n        ERC20_TO_ERC1155_PARTIAL_RESTRICTED,\\n\\n        // 16: no partial fills, anyone can execute\\n        ERC721_TO_ERC20_FULL_OPEN,\\n\\n        // 17: partial fills supported, anyone can execute\\n        ERC721_TO_ERC20_PARTIAL_OPEN,\\n\\n        // 18: no partial fills, only offerer or zone can execute\\n        ERC721_TO_ERC20_FULL_RESTRICTED,\\n\\n        // 19: partial fills supported, only offerer or zone can execute\\n        ERC721_TO_ERC20_PARTIAL_RESTRICTED,\\n\\n        // 20: no partial fills, anyone can execute\\n        ERC1155_TO_ERC20_FULL_OPEN,\\n\\n        // 21: partial fills supported, anyone can execute\\n        ERC1155_TO_ERC20_PARTIAL_OPEN,\\n\\n        // 22: no partial fills, only offerer or zone can execute\\n        ERC1155_TO_ERC20_FULL_RESTRICTED,\\n\\n        // 23: partial fills supported, only offerer or zone can execute\\n        ERC1155_TO_ERC20_PARTIAL_RESTRICTED\\n    }\\n\\n    /**\\n     * @dev The full set of order components, with the exception of the counter,\\n     *      must be supplied when fulfilling more sophisticated orders or groups of\\n     *      orders. The total number of original consideration items must also be\\n     *      supplied, as the caller may specify additional consideration items.\\n     */\\n    struct OrderParameters {\\n        address offerer; // 0x00\\n        address zone; // 0x20\\n        OfferItem[] offer; // 0x40\\n        ConsiderationItem[] consideration; // 0x60\\n        OrderType orderType; // 0x80\\n        uint256 startTime; // 0xa0\\n        uint256 endTime; // 0xc0\\n        bytes32 zoneHash; // 0xe0\\n        uint256 salt; // 0x100\\n        bytes32 conduitKey; // 0x120\\n        uint256 totalOriginalConsiderationItems; // 0x140\\n        // offer.length                          // 0x160\\n    }\\n\\n    /**\\n     * @dev Orders require a signature in addition to the other order parameters.\\n     */\\n    struct Order {\\n        OrderParameters parameters;\\n        bytes signature;\\n    }\\n\\n    struct AdvancedOrder {\\n        OrderParameters parameters;\\n        uint120 numerator;\\n        uint120 denominator;\\n        bytes signature;\\n        bytes extraData;\\n    }\\n\\n    struct OfferItem {\\n        ItemType itemType;\\n        address token;\\n        uint256 identifierOrCriteria;\\n        uint256 startAmount;\\n        uint256 endAmount;\\n    }\\n\\n    /**\\n     * @dev A consideration item has the same five components as an offer item and\\n     *      an additional sixth component designating the required recipient of the\\n     *      item.\\n     */\\n    struct ConsiderationItem {\\n        ItemType itemType;\\n        address token;\\n        uint256 identifierOrCriteria;\\n        uint256 startAmount;\\n        uint256 endAmount;\\n        address payable recipient;\\n    }\\n\\n    // prettier-ignore\\n    enum OrderType {\\n        // 0: no partial fills, anyone can execute\\n        FULL_OPEN,\\n\\n        // 1: partial fills supported, anyone can execute\\n        PARTIAL_OPEN,\\n\\n        // 2: no partial fills, only offerer or zone can execute\\n        FULL_RESTRICTED,\\n\\n        // 3: partial fills supported, only offerer or zone can execute\\n        PARTIAL_RESTRICTED\\n    }\\n\\n    // prettier-ignore\\n    enum ItemType {\\n        // 0: ETH on mainnet, MATIC on polygon, etc.\\n        NATIVE,\\n\\n        // 1: ERC20 items (ERC777 and ERC20 analogues could also technically work)\\n        ERC20,\\n\\n        // 2: ERC721 items\\n        ERC721,\\n\\n        // 3: ERC1155 items\\n        ERC1155,\\n\\n        // 4: ERC721 items where a number of tokenIds are supported\\n        ERC721_WITH_CRITERIA,\\n\\n        // 5: ERC1155 items where a number of ids are supported\\n        ERC1155_WITH_CRITERIA\\n    }\\n\\n    /**\\n     * @dev A fulfillment is applied to a group of orders. It decrements a series of\\n     *      offer and consideration items, then generates a single execution\\n     *      element. A given fulfillment can be applied to as many offer and\\n     *      consideration items as desired, but must contain at least one offer and\\n     *      at least one consideration that match. The fulfillment must also remain\\n     *      consistent on all key parameters across all offer items (same offerer,\\n     *      token, type, tokenId, and conduit preference) as well as across all\\n     *      consideration items (token, type, tokenId, and recipient).\\n     */\\n    struct Fulfillment {\\n        FulfillmentComponent[] offerComponents;\\n        FulfillmentComponent[] considerationComponents;\\n    }\\n\\n    /**\\n     * @dev Each fulfillment component contains one index referencing a specific\\n     *      order and another referencing a specific offer or consideration item.\\n     */\\n    struct FulfillmentComponent {\\n        uint256 orderIndex;\\n        uint256 itemIndex;\\n    }\\n\\n    /**\\n     * @dev An execution is triggered once all consideration items have been zeroed\\n     *      out. It sends the item in question from the offerer to the item's\\n     *      recipient, optionally sourcing approvals from either this contract\\n     *      directly or from the offerer's chosen conduit if one is specified. An\\n     *      execution is not provided as an argument, but rather is derived via\\n     *      orders, criteria resolvers, and fulfillments (where the total number of\\n     *      executions will be less than or equal to the total number of indicated\\n     *      fulfillments) and returned as part of `matchOrders`.\\n     */\\n    struct Execution {\\n        ReceivedItem item;\\n        address offerer;\\n        bytes32 conduitKey;\\n    }\\n\\n    /**\\n     * @dev A received item is translated from a utilized consideration item and has\\n     *      the same four components as a spent item, as well as an additional fifth\\n     *      component designating the required recipient of the item.\\n     */\\n    struct ReceivedItem {\\n        ItemType itemType;\\n        address token;\\n        uint256 identifier;\\n        uint256 amount;\\n        address payable recipient;\\n    }\\n\\n    struct CriteriaResolver {\\n        uint256 orderIndex;\\n        Side side;\\n        uint256 index;\\n        uint256 identifier;\\n        bytes32[] criteriaProof;\\n    }\\n\\n    // prettier-ignore\\n    enum Side {\\n        // 0: Items that can be spent\\n        OFFER,\\n\\n        // 1: Items that must be received\\n        CONSIDERATION\\n    }\\n}\\n\",\"keccak256\":\"0x91809d3c08054e053a147bf214e37995ac10a5ef3fa56952ebcc987aafed91b6\",\"license\":\"MIT\"},\"src/exchange-wrapper/librairies/OrderStructs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nenum Side {\\n    Buy,\\n    Sell\\n}\\nenum SignatureVersion {\\n    Single,\\n    Bulk\\n}\\nenum AssetType {\\n    ERC721,\\n    ERC1155\\n}\\n\\nstruct Fee {\\n    uint16 rate;\\n    address payable recipient;\\n}\\n\\nstruct Order {\\n    address trader;\\n    Side side;\\n    address matchingPolicy;\\n    address collection;\\n    uint256 tokenId;\\n    uint256 amount;\\n    address paymentToken;\\n    uint256 price;\\n    uint256 listingTime;\\n    /* Order expiration timestamp - 0 for oracle cancellations. */\\n    uint256 expirationTime;\\n    Fee[] fees;\\n    uint256 salt;\\n    bytes extraParams;\\n}\\n\\nstruct Input {\\n    Order order;\\n    uint8 v;\\n    bytes32 r;\\n    bytes32 s;\\n    bytes extraSignature;\\n    SignatureVersion signatureVersion;\\n    uint256 blockNumber;\\n}\\n\\nstruct Execution {\\n    Input sell;\\n    Input buy;\\n}\\n\",\"keccak256\":\"0x5aca2da8ed70487ea66a23fb9faa50ec79356f367f13bf7db96b9fcf5b35064a\",\"license\":\"MIT\"},\"src/exchange/ExchangeV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./ExchangeV2Core.sol\\\";\\nimport \\\"../transfer-manager/GhostMarketTransferManager.sol\\\";\\n\\ncontract ExchangeV2 is ExchangeV2Core, GhostMarketTransferManager {\\n    function __ExchangeV2_init(\\n        address _transferProxy,\\n        address _erc20TransferProxy,\\n        uint newProtocolFee,\\n        address newDefaultFeeReceiver,\\n        IRoyaltiesProvider newRoyaltiesProvider\\n    ) external initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n        __TransferExecutor_init_unchained(_transferProxy, _erc20TransferProxy);\\n        __GhostMarketTransferManager_init_unchained(newProtocolFee, newDefaultFeeReceiver, newRoyaltiesProvider);\\n        __OrderValidator_init_unchained();\\n    }\\n}\\n\",\"keccak256\":\"0x3fb6d6171918b1fd0164cf57dd66bb4334818b0cf7ddfb100ecdb56b1b38e6e6\",\"license\":\"MIT\"},\"src/exchange/ExchangeV2Core.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../librairies/LibFill.sol\\\";\\nimport \\\"../librairies/LibOrderData.sol\\\";\\nimport \\\"../librairies/LibDirectTransfer.sol\\\";\\nimport \\\"./OrderValidator.sol\\\";\\nimport \\\"../custom-matcher/AssetMatcher.sol\\\";\\n\\nimport \\\"../transfer-manager/TransferExecutor.sol\\\";\\nimport \\\"../interfaces/ITransferManager.sol\\\";\\nimport \\\"../librairies/LibDeal.sol\\\";\\n\\nabstract contract ExchangeV2Core is\\n    Initializable,\\n    OwnableUpgradeable,\\n    AssetMatcher,\\n    TransferExecutor,\\n    OrderValidator,\\n    ITransferManager\\n{\\n    using LibTransfer for address;\\n\\n    //dev @deprecated\\n    address private matchAndTransferAdmin;\\n\\n    uint256 private constant UINT256_MAX = type(uint256).max;\\n\\n    //state of the orders\\n    mapping(bytes32 => uint256) public fills;\\n\\n    //events\\n    event OrderCancelled(\\n        bytes32 indexed hash,\\n        address indexed maker,\\n        LibAsset.AssetType makeAssetType,\\n        LibAsset.AssetType takeAssetType\\n    );\\n    event OrderFilled(\\n        bytes32 indexed leftHash,\\n        bytes32 indexed rightHash,\\n        address indexed leftMaker,\\n        address rightMaker,\\n        uint newLeftFill,\\n        uint newRightFill,\\n        LibAsset.AssetType leftAsset,\\n        LibAsset.AssetType rightAsset\\n    );\\n\\n    function cancel(LibOrder.Order memory order) external {\\n        require(_msgSender() == order.maker, \\\"not a maker\\\");\\n        require(order.salt != 0, \\\"0 salt can't be used\\\");\\n        bytes32 orderKeyHash = LibOrder.hashKey(order);\\n        fills[orderKeyHash] = UINT256_MAX;\\n        emit OrderCancelled(orderKeyHash, order.maker, order.makeAsset.assetType, order.takeAsset.assetType);\\n    }\\n\\n    function bulkCancelOrders(LibOrder.Order[] memory orders) external {\\n        uint256 length = orders.length;\\n        for (uint256 i; i < length; ++i) {\\n            // we can't call this.cancel function as the _msgSender() is changed to the contract address\\n            // and the _msgSender() == order.maker check fails\\n            require(_msgSender() == orders[i].maker, \\\"not a maker\\\");\\n            require(orders[i].salt != 0, \\\"0 salt can't be used\\\");\\n            bytes32 orderKeyHash = LibOrder.hashKey(orders[i]);\\n            fills[orderKeyHash] = UINT256_MAX;\\n            emit OrderCancelled(\\n                orderKeyHash,\\n                orders[i].maker,\\n                orders[i].makeAsset.assetType,\\n                orders[i].takeAsset.assetType\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev function, generate sellOrder and buyOrder from parameters and call validateAndMatch() for purchase transaction\\n     * @param direct struct with parameters for purchase operation\\n     */\\n    function directPurchase(LibDirectTransfer.Purchase calldata direct) external payable {\\n        LibAsset.AssetType memory paymentAssetType = getPaymentAssetType(direct.paymentToken);\\n\\n        LibOrder.Order memory sellOrder = LibOrder.Order(\\n            direct.sellOrderMaker,\\n            LibAsset.Asset(LibAsset.AssetType(direct.nftAssetClass, direct.nftData), direct.sellOrderNftAmount),\\n            address(0),\\n            LibAsset.Asset(paymentAssetType, direct.sellOrderPaymentAmount),\\n            direct.sellOrderSalt,\\n            direct.sellOrderStart,\\n            direct.sellOrderEnd,\\n            direct.sellOrderDataType,\\n            direct.sellOrderData\\n        );\\n\\n        LibOrder.Order memory buyOrder = LibOrder.Order(\\n            address(0),\\n            LibAsset.Asset(paymentAssetType, direct.buyOrderPaymentAmount),\\n            address(0),\\n            LibAsset.Asset(LibAsset.AssetType(direct.nftAssetClass, direct.nftData), direct.buyOrderNftAmount),\\n            0,\\n            0,\\n            0,\\n            getOtherOrderType(direct.sellOrderDataType),\\n            direct.buyOrderData\\n        );\\n\\n        validateFull(sellOrder, direct.sellOrderSignature);\\n        matchAndTransfer(sellOrder, buyOrder);\\n    }\\n\\n    /**\\n     * @dev function, generate sellOrder and buyOrder from parameters and call validateAndMatch() for accept bid transaction\\n     * @param direct struct with parameters for accept bid operation\\n     */\\n    function directAcceptBid(LibDirectTransfer.AcceptBid calldata direct) external payable {\\n        LibAsset.AssetType memory paymentAssetType = getPaymentAssetType(direct.paymentToken);\\n\\n        LibOrder.Order memory buyOrder = LibOrder.Order(\\n            direct.bidMaker,\\n            LibAsset.Asset(paymentAssetType, direct.bidPaymentAmount),\\n            address(0),\\n            LibAsset.Asset(LibAsset.AssetType(direct.nftAssetClass, direct.nftData), direct.bidNftAmount),\\n            direct.bidSalt,\\n            direct.bidStart,\\n            direct.bidEnd,\\n            direct.bidDataType,\\n            direct.bidData\\n        );\\n\\n        LibOrder.Order memory sellOrder = LibOrder.Order(\\n            address(0),\\n            LibAsset.Asset(LibAsset.AssetType(direct.nftAssetClass, direct.nftData), direct.sellOrderNftAmount),\\n            address(0),\\n            LibAsset.Asset(paymentAssetType, direct.sellOrderPaymentAmount),\\n            0,\\n            0,\\n            0,\\n            getOtherOrderType(direct.bidDataType),\\n            direct.sellOrderData\\n        );\\n\\n        validateFull(buyOrder, direct.bidSignature);\\n        matchAndTransfer(sellOrder, buyOrder);\\n    }\\n\\n    /**\\n     * @dev function, match orders\\n     * @param orderLeft left order\\n     * @param signatureLeft order left signature\\n     * @param orderRight right order\\n     * @param signatureRight order right signature\\n     */\\n    function matchOrders(\\n        LibOrder.Order memory orderLeft,\\n        bytes memory signatureLeft,\\n        LibOrder.Order memory orderRight,\\n        bytes memory signatureRight\\n    ) external payable {\\n        validateOrders(orderLeft, signatureLeft, orderRight, signatureRight);\\n        matchAndTransfer(orderLeft, orderRight);\\n    }\\n\\n    /**\\n     * @dev function, validate orders\\n     * @param orderLeft left order\\n     * @param signatureLeft order left signature\\n     * @param orderRight right order\\n     * @param signatureRight order right signature\\n     */\\n    function validateOrders(\\n        LibOrder.Order memory orderLeft,\\n        bytes memory signatureLeft,\\n        LibOrder.Order memory orderRight,\\n        bytes memory signatureRight\\n    ) internal view {\\n        validateFull(orderLeft, signatureLeft);\\n        validateFull(orderRight, signatureRight);\\n        if (orderLeft.taker != address(0)) {\\n            if (orderRight.maker != address(0))\\n                require(orderRight.maker == orderLeft.taker, \\\"leftOrder.taker verification failed\\\");\\n        }\\n        if (orderRight.taker != address(0)) {\\n            if (orderLeft.maker != address(0))\\n                require(orderRight.taker == orderLeft.maker, \\\"rightOrder.taker verification failed\\\");\\n        }\\n    }\\n\\n    /**\\n        @notice matches valid orders and transfers their assets\\n        @param orderLeft the left order of the match\\n        @param orderRight the right order of the match\\n    */\\n    function matchAndTransfer(LibOrder.Order memory orderLeft, LibOrder.Order memory orderRight) internal {\\n        (LibAsset.AssetType memory makeMatch, LibAsset.AssetType memory takeMatch) = matchAssets(orderLeft, orderRight);\\n\\n        (\\n            LibOrderData.GenericOrderData memory leftOrderData,\\n            LibOrderData.GenericOrderData memory rightOrderData,\\n            LibFill.FillResult memory newFill\\n        ) = parseOrdersSetFillEmitMatch(orderLeft, orderRight);\\n\\n        (uint totalMakeValue, uint totalTakeValue) = doTransfers(\\n            LibDeal.DealSide({\\n                asset: LibAsset.Asset({assetType: makeMatch, value: newFill.leftValue}),\\n                payouts: leftOrderData.payouts,\\n                originFees: leftOrderData.originFees,\\n                proxy: proxies[makeMatch.assetClass],\\n                from: orderLeft.maker\\n            }),\\n            LibDeal.DealSide({\\n                asset: LibAsset.Asset(takeMatch, newFill.rightValue),\\n                payouts: rightOrderData.payouts,\\n                originFees: rightOrderData.originFees,\\n                proxy: proxies[takeMatch.assetClass],\\n                from: orderRight.maker\\n            }),\\n            getDealData(\\n                makeMatch.assetClass,\\n                takeMatch.assetClass,\\n                orderLeft.dataType,\\n                orderRight.dataType,\\n                leftOrderData,\\n                rightOrderData\\n            )\\n        );\\n        if (makeMatch.assetClass == LibAsset.ETH_ASSET_CLASS) {\\n            require(takeMatch.assetClass != LibAsset.ETH_ASSET_CLASS, \\\"wrong takeMatch.assetClass\\\");\\n            require(msg.value >= totalMakeValue, \\\"not enough eth\\\");\\n            if (msg.value > totalMakeValue) {\\n                address(msg.sender).transferEth(msg.value - (totalMakeValue));\\n            }\\n        } else if (takeMatch.assetClass == LibAsset.ETH_ASSET_CLASS) {\\n            require(msg.value >= totalTakeValue, \\\"not enough eth\\\");\\n            if (msg.value > totalTakeValue) {\\n                address(msg.sender).transferEth(msg.value - (totalTakeValue));\\n            }\\n        }\\n\\n        bytes32 leftOrderKeyHash = LibOrder.hashKey(orderLeft);\\n        bytes32 rightOrderKeyHash = LibOrder.hashKey(orderRight);\\n        emit OrderFilled(\\n            leftOrderKeyHash,\\n            rightOrderKeyHash,\\n            orderLeft.maker,\\n            orderRight.maker,\\n            newFill.rightValue,\\n            newFill.leftValue,\\n            makeMatch,\\n            takeMatch\\n        );\\n    }\\n\\n    function parseOrdersSetFillEmitMatch(\\n        LibOrder.Order memory orderLeft,\\n        LibOrder.Order memory orderRight\\n    )\\n        internal\\n        returns (\\n            LibOrderData.GenericOrderData memory leftOrderData,\\n            LibOrderData.GenericOrderData memory rightOrderData,\\n            LibFill.FillResult memory newFill\\n        )\\n    {\\n        bytes32 leftOrderKeyHash = LibOrder.hashKey(orderLeft);\\n        bytes32 rightOrderKeyHash = LibOrder.hashKey(orderRight);\\n\\n        address msgSender = _msgSender();\\n        if (orderLeft.maker == address(0)) {\\n            orderLeft.maker = msgSender;\\n        }\\n        if (orderRight.maker == address(0)) {\\n            orderRight.maker = msgSender;\\n        }\\n\\n        leftOrderData = LibOrderData.parse(orderLeft);\\n        rightOrderData = LibOrderData.parse(orderRight);\\n\\n        newFill = setFillEmitMatch(\\n            orderLeft,\\n            orderRight,\\n            leftOrderKeyHash,\\n            rightOrderKeyHash,\\n            leftOrderData.isMakeFill,\\n            rightOrderData.isMakeFill\\n        );\\n    }\\n\\n    function getDealData(\\n        bytes4 makeMatchAssetClass,\\n        bytes4 takeMatchAssetClass,\\n        bytes4 leftDataType,\\n        bytes4 rightDataType,\\n        LibOrderData.GenericOrderData memory leftOrderData,\\n        LibOrderData.GenericOrderData memory rightOrderData\\n    ) internal pure returns (LibDeal.DealData memory dealData) {\\n        dealData.feeSide = LibFeeSide.getFeeSide(makeMatchAssetClass, takeMatchAssetClass);\\n        dealData.maxFeesBasePoint = getMaxFee(\\n            leftDataType,\\n            rightDataType,\\n            leftOrderData,\\n            rightOrderData,\\n            dealData.feeSide\\n        );\\n    }\\n\\n    /**\\n        @notice determines the max amount of fees for the match\\n        @param dataTypeLeft data type of the left order\\n        @param dataTypeRight data type of the right order\\n        @param leftOrderData data of the left order\\n        @param rightOrderData data of the right order\\n        @param feeSide fee side of the match\\n        @return max fee amount in base points\\n    */\\n    function getMaxFee(\\n        bytes4 dataTypeLeft,\\n        bytes4 dataTypeRight,\\n        LibOrderData.GenericOrderData memory leftOrderData,\\n        LibOrderData.GenericOrderData memory rightOrderData,\\n        LibFeeSide.FeeSide feeSide\\n    ) internal pure returns (uint) {\\n        if (\\n            dataTypeLeft != LibOrderDataV3.V3_SELL &&\\n            dataTypeRight != LibOrderDataV3.V3_SELL &&\\n            dataTypeLeft != LibOrderDataV3.V3_BUY &&\\n            dataTypeRight != LibOrderDataV3.V3_BUY\\n        ) {\\n            return 0;\\n        }\\n\\n        uint matchFees = getSumFees(leftOrderData.originFees, rightOrderData.originFees);\\n        uint maxFee;\\n        if (feeSide == LibFeeSide.FeeSide.LEFT) {\\n            maxFee = rightOrderData.maxFeesBasePoint;\\n            require(dataTypeLeft == LibOrderDataV3.V3_BUY && dataTypeRight == LibOrderDataV3.V3_SELL, \\\"wrong V3 type1\\\");\\n        } else if (feeSide == LibFeeSide.FeeSide.RIGHT) {\\n            maxFee = leftOrderData.maxFeesBasePoint;\\n            require(dataTypeRight == LibOrderDataV3.V3_BUY && dataTypeLeft == LibOrderDataV3.V3_SELL, \\\"wrong V3 type2\\\");\\n        } else {\\n            return 0;\\n        }\\n        require(maxFee > 0 && maxFee >= matchFees && maxFee <= 1000, \\\"wrong maxFee\\\");\\n\\n        return maxFee;\\n    }\\n\\n    /**\\n        @notice calculates amount of fees for the match\\n        @param originLeft origin fees of the left order\\n        @param originRight origin fees of the right order\\n        @return sum of all fees for the match (protcolFee + leftOrder.originFees + rightOrder.originFees)\\n     */\\n    function getSumFees(\\n        LibPart.Part[] memory originLeft,\\n        LibPart.Part[] memory originRight\\n    ) internal pure returns (uint) {\\n        uint result = 0;\\n\\n        //adding left origin fees\\n        for (uint i; i < originLeft.length; i++) {\\n            result = result + originLeft[i].value;\\n        }\\n\\n        //adding right origin fees\\n        for (uint i; i < originRight.length; i++) {\\n            result = result + originRight[i].value;\\n        }\\n\\n        return result;\\n    }\\n\\n    /**\\n        @notice calculates fills for the matched orders and set them in \\\"fills\\\" mapping\\n        @param orderLeft left order of the match\\n        @param orderRight right order of the match\\n        @param leftMakeFill true if the left orders uses make-side fills, false otherwise\\n        @param rightMakeFill true if the right orders uses make-side fills, false otherwise\\n        @return returns change in orders' fills by the match \\n    */\\n    function setFillEmitMatch(\\n        LibOrder.Order memory orderLeft,\\n        LibOrder.Order memory orderRight,\\n        bytes32 leftOrderKeyHash,\\n        bytes32 rightOrderKeyHash,\\n        bool leftMakeFill,\\n        bool rightMakeFill\\n    ) internal returns (LibFill.FillResult memory) {\\n        uint leftOrderFill = getOrderFill(orderLeft.salt, leftOrderKeyHash);\\n        uint rightOrderFill = getOrderFill(orderRight.salt, rightOrderKeyHash);\\n        LibFill.FillResult memory newFill = LibFill.fillOrder(\\n            orderLeft,\\n            orderRight,\\n            leftOrderFill,\\n            rightOrderFill,\\n            leftMakeFill,\\n            rightMakeFill\\n        );\\n\\n        require(newFill.rightValue > 0 && newFill.leftValue > 0, \\\"nothing to fill\\\");\\n\\n        if (orderLeft.salt != 0) {\\n            if (leftMakeFill) {\\n                fills[leftOrderKeyHash] = leftOrderFill + (newFill.leftValue);\\n            } else {\\n                fills[leftOrderKeyHash] = leftOrderFill + (newFill.rightValue);\\n            }\\n        }\\n\\n        if (orderRight.salt != 0) {\\n            if (rightMakeFill) {\\n                fills[rightOrderKeyHash] = rightOrderFill + (newFill.rightValue);\\n            } else {\\n                fills[rightOrderKeyHash] = rightOrderFill + (newFill.leftValue);\\n            }\\n        }\\n\\n        return newFill;\\n    }\\n\\n    function getOrderFill(uint salt, bytes32 hash) internal view returns (uint fill) {\\n        if (salt == 0) {\\n            fill = 0;\\n        } else {\\n            fill = fills[hash];\\n        }\\n    }\\n\\n    function matchAssets(\\n        LibOrder.Order memory orderLeft,\\n        LibOrder.Order memory orderRight\\n    ) internal view returns (LibAsset.AssetType memory makeMatch, LibAsset.AssetType memory takeMatch) {\\n        makeMatch = matchAssets(orderLeft.makeAsset.assetType, orderRight.takeAsset.assetType);\\n        require(makeMatch.assetClass != 0, \\\"assets don't match\\\");\\n        takeMatch = matchAssets(orderLeft.takeAsset.assetType, orderRight.makeAsset.assetType);\\n        require(takeMatch.assetClass != 0, \\\"assets don't match\\\");\\n    }\\n\\n    function validateFull(LibOrder.Order memory order, bytes memory signature) internal view {\\n        LibOrder.validateOrderTime(order);\\n        validate(order, signature);\\n    }\\n\\n    function getPaymentAssetType(address token) internal pure returns (LibAsset.AssetType memory) {\\n        LibAsset.AssetType memory result;\\n        if (token == address(0)) {\\n            result.assetClass = LibAsset.ETH_ASSET_CLASS;\\n        } else {\\n            result.assetClass = LibAsset.ERC20_ASSET_CLASS;\\n            result.data = abi.encode(token);\\n        }\\n        return result;\\n    }\\n\\n    function getOtherOrderType(bytes4 dataType) internal pure returns (bytes4) {\\n        if (dataType == LibOrderDataV3.V3_SELL) {\\n            return LibOrderDataV3.V3_BUY;\\n        }\\n        if (dataType == LibOrderDataV3.V3_BUY) {\\n            return LibOrderDataV3.V3_SELL;\\n        }\\n        return dataType;\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x084b25ccbc6cbb3030c3b6dd9ea91351cb2d8676824ea29ec48f84ef06c3c9aa\",\"license\":\"MIT\"},\"src/exchange/OrderValidator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../interfaces/IERC1271.sol\\\";\\nimport \\\"../librairies/LibOrder.sol\\\";\\nimport \\\"../librairies/LibSignature.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol\\\";\\n\\nabstract contract OrderValidator is Initializable, ContextUpgradeable, EIP712Upgradeable {\\n    using LibSignature for bytes32;\\n    using AddressUpgradeable for address;\\n\\n    bytes4 internal constant MAGICVALUE = 0x1626ba7e;\\n\\n    function __OrderValidator_init_unchained() internal initializer {\\n        __EIP712_init_unchained(\\\"GhostMarket\\\", \\\"2\\\");\\n    }\\n\\n    function validate(LibOrder.Order memory order, bytes memory signature) internal view {\\n        if (order.salt == 0) {\\n            if (order.maker != address(0)) {\\n                require(_msgSender() == order.maker, \\\"maker is not tx sender\\\");\\n            }\\n        } else {\\n            if (_msgSender() != order.maker) {\\n                bytes32 hash = LibOrder.hash(order);\\n                // if maker is contract checking ERC1271 signature\\n                if (order.maker.isContract()) {\\n                    require(\\n                        IERC1271(order.maker).isValidSignature(_hashTypedDataV4(hash), signature) == MAGICVALUE,\\n                        \\\"contract order signature verification error\\\"\\n                    );\\n                } else {\\n                    // if maker is not contract then checking ECDSA signature\\n                    if (_hashTypedDataV4(hash).recover(signature) != order.maker) {\\n                        revert(\\\"order signature verification error\\\");\\n                    } else {\\n                        require(order.maker != address(0), \\\"no maker\\\");\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x6e2dd7001360a8f16adc21b6c5ebc8b27888841d8fd01cf7b43b136b5e4c7b33\",\"license\":\"MIT\"},\"src/interfaces/IAssetMatcher.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../librairies/LibAsset.sol\\\";\\n\\ninterface IAssetMatcher {\\n    function matchAssets(\\n        LibAsset.AssetType memory leftAssetType,\\n        LibAsset.AssetType memory rightAssetType\\n    ) external view returns (LibAsset.AssetType memory);\\n}\\n\",\"keccak256\":\"0x07d4f1a0fb8742e578f746cd326cc56856eed9c50ac74acd8978d273dc580a19\",\"license\":\"MIT\"},\"src/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nabstract contract IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param _hash Hash of the data signed on the behalf of address(this)\\n     * @param _signature Signature byte array associated with _data\\n     *\\n     * MUST return the bytes4 magic value 0x1626ba7e when function passes.\\n     * MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5)\\n     * MUST allow external calls\\n     */\\n    function isValidSignature(\\n        bytes32 _hash,\\n        bytes calldata _signature\\n    ) external view virtual returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x0598a4c93aef17a84b52a2b925baf6632a9da20adaa5678df4c34ced8c42ea3d\",\"license\":\"MIT\"},\"src/interfaces/IERC20TransferProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\ninterface IERC20TransferProxy {\\n    function erc20safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) external;\\n}\\n\",\"keccak256\":\"0x73d3cb89e7f7626882b328ede811afc71c77835f14fad09c2cb1c8e0fb2ff66a\",\"license\":\"MIT\"},\"src/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../librairies/LibPart.sol\\\";\\n\\n///\\n/// @dev Interface for the NFT Royalty Standard\\n///\\n//interface IERC2981 is IERC165 {\\ninterface IERC2981 {\\n    /// ERC165 bytes to add to interface array - set in parent contract\\n    /// implementing this standard\\n    ///\\n    /// bytes4(keccak256(\\\"royaltyInfo(uint256,uint256)\\\")) == 0x2a55205a\\n    /// bytes4 private constant _INTERFACE_ID_ERC2981 = 0x2a55205a;\\n    /// _registerInterface(_INTERFACE_ID_ERC2981);\\n\\n    /// @notice Called with the sale price to determine how much royalty\\n    //          is owed and to whom.\\n    /// @param _tokenId - the NFT asset queried for royalty information\\n    /// @param _salePrice - the sale price of the NFT asset specified by _tokenId\\n    /// @return receiver - address of who should be sent the royalty payment\\n    /// @return royaltyAmount - the royalty payment amount for _salePrice\\n    function royaltyInfo(\\n        uint256 _tokenId,\\n        uint256 _salePrice\\n    ) external view returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0xa343d178673f487fa98ac133502f0fd09b7ef74012c7ab9bfc9f4d47b46c0023\",\"license\":\"MIT\"},\"src/interfaces/INftTransferProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\\\";\\n\\ninterface INftTransferProxy {\\n    function erc721safeTransferFrom(IERC721Upgradeable token, address from, address to, uint256 tokenId) external;\\n\\n    function erc1155safeTransferFrom(\\n        IERC1155Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x051dbb17a3bd2ef87619192abf8f02c486d175a6bb5b2cbb4aac855ecbe87d80\",\"license\":\"MIT\"},\"src/interfaces/IRoyaltiesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../librairies/LibPart.sol\\\";\\n\\ninterface IRoyaltiesProvider {\\n    function getRoyalties(address token, uint256 tokenId) external returns (LibPart.Part[] memory);\\n}\\n\",\"keccak256\":\"0x8b4727a9e57087f973efddadfb6a482862b32e0c9c964a3cdb4152aff779c036\",\"license\":\"MIT\"},\"src/interfaces/ITransferExecutor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../librairies/LibAsset.sol\\\";\\n\\nabstract contract ITransferExecutor {\\n    function transfer(LibAsset.Asset memory asset, address from, address to, address proxy) internal virtual;\\n}\\n\",\"keccak256\":\"0x7af6ba949df9f7abc8e326a8bc2f579b08569dd1b40ce07cd86c920ed38a76f0\",\"license\":\"MIT\"},\"src/interfaces/ITransferManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../librairies/LibDeal.sol\\\";\\nimport \\\"./ITransferExecutor.sol\\\";\\n\\nabstract contract ITransferManager is ITransferExecutor {\\n    function doTransfers(\\n        LibDeal.DealSide memory left,\\n        LibDeal.DealSide memory right,\\n        LibDeal.DealData memory dealData\\n    ) internal virtual returns (uint totalMakeValue, uint totalTakeValue);\\n}\\n\",\"keccak256\":\"0xdf4544e9a15f172fec813a65617d4bbbc8690338327bcccccc6b84787380f1db\",\"license\":\"MIT\"},\"src/interfaces/ITransferProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../librairies/LibAsset.sol\\\";\\n\\ninterface ITransferProxy {\\n    function transfer(LibAsset.Asset calldata asset, address from, address to) external;\\n}\\n\",\"keccak256\":\"0x63f1b4ed2eb68b70cafd22db48d9cbce066ef45ae7e233d5bb5d297cb32c6122\",\"license\":\"MIT\"},\"src/librairies/BpLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nlibrary BpLibrary {\\n    function bp(uint256 value, uint256 bpValue) internal pure returns (uint256) {\\n        return (value * (bpValue)) / (10000);\\n    }\\n}\\n\",\"keccak256\":\"0x24d598e4d4b0fae9b4202a96bc4082aea9a1bd224f52a6ec7d92a873ef06b010\",\"license\":\"MIT\"},\"src/librairies/LibAsset.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nlibrary LibAsset {\\n    bytes4 public constant ETH_ASSET_CLASS = bytes4(keccak256(\\\"ETH\\\"));\\n    bytes4 public constant ERC20_ASSET_CLASS = bytes4(keccak256(\\\"ERC20\\\"));\\n    bytes4 public constant ERC721_ASSET_CLASS = bytes4(keccak256(\\\"ERC721\\\"));\\n    bytes4 public constant ERC1155_ASSET_CLASS = bytes4(keccak256(\\\"ERC1155\\\"));\\n    bytes4 public constant COLLECTION = bytes4(keccak256(\\\"COLLECTION\\\"));\\n    bytes4 public constant CRYPTO_PUNKS = bytes4(keccak256(\\\"CRYPTO_PUNKS\\\"));\\n\\n    bytes32 public constant ASSET_TYPE_TYPEHASH = keccak256(\\\"AssetType(bytes4 assetClass,bytes data)\\\");\\n\\n    bytes32 public constant ASSET_TYPEHASH =\\n        keccak256(\\\"Asset(AssetType assetType,uint256 value)AssetType(bytes4 assetClass,bytes data)\\\");\\n\\n    struct AssetType {\\n        bytes4 assetClass;\\n        bytes data;\\n    }\\n\\n    struct Asset {\\n        AssetType assetType;\\n        uint256 value;\\n    }\\n\\n    function hash(AssetType memory assetType) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(ASSET_TYPE_TYPEHASH, assetType.assetClass, keccak256(assetType.data)));\\n    }\\n\\n    function hash(Asset memory asset) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(ASSET_TYPEHASH, hash(asset.assetType), asset.value));\\n    }\\n}\\n\",\"keccak256\":\"0x10f962b944a4ffa957d22d70073318bc5376a3666d6e6b858affc8eb258d7d8d\",\"license\":\"MIT\"},\"src/librairies/LibDeal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./LibPart.sol\\\";\\nimport \\\"./LibAsset.sol\\\";\\nimport \\\"./LibFeeSide.sol\\\";\\n\\nlibrary LibDeal {\\n    struct DealSide {\\n        LibAsset.Asset asset;\\n        LibPart.Part[] payouts;\\n        LibPart.Part[] originFees;\\n        address proxy;\\n        address from;\\n    }\\n\\n    struct DealData {\\n        uint maxFeesBasePoint;\\n        LibFeeSide.FeeSide feeSide;\\n    }\\n}\\n\",\"keccak256\":\"0xef1379eb1c549adbd43acc7da7132dd78a1214b69080ad27d997e5f75e2514b6\",\"license\":\"MIT\"},\"src/librairies/LibDirectTransfer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./LibAsset.sol\\\";\\n\\nlibrary LibDirectTransfer {\\n    //LibDirectTransfers\\n    /*All buy parameters need for create buyOrder and sellOrder*/\\n    struct Purchase {\\n        address sellOrderMaker; //\\n        uint256 sellOrderNftAmount;\\n        bytes4 nftAssetClass;\\n        bytes nftData;\\n        uint256 sellOrderPaymentAmount;\\n        address paymentToken;\\n        uint256 sellOrderSalt;\\n        uint sellOrderStart;\\n        uint sellOrderEnd;\\n        bytes4 sellOrderDataType;\\n        bytes sellOrderData;\\n        bytes sellOrderSignature;\\n        uint256 buyOrderPaymentAmount;\\n        uint256 buyOrderNftAmount;\\n        bytes buyOrderData;\\n    }\\n\\n    /*All accept bid parameters need for create buyOrder and sellOrder*/\\n    struct AcceptBid {\\n        address bidMaker; //\\n        uint256 bidNftAmount;\\n        bytes4 nftAssetClass;\\n        bytes nftData;\\n        uint256 bidPaymentAmount;\\n        address paymentToken;\\n        uint256 bidSalt;\\n        uint bidStart;\\n        uint bidEnd;\\n        bytes4 bidDataType;\\n        bytes bidData;\\n        bytes bidSignature;\\n        uint256 sellOrderPaymentAmount;\\n        uint256 sellOrderNftAmount;\\n        bytes sellOrderData;\\n    }\\n}\\n\",\"keccak256\":\"0xd4df19802dce7c617ac5c7dbb7c332a3ea300b30e4b43ec101005d66c8a3ebad\",\"license\":\"MIT\"},\"src/librairies/LibERC1155LazyMint.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./LibPart.sol\\\";\\n\\nlibrary LibERC1155LazyMint {\\n    bytes4 public constant ERC1155_LAZY_ASSET_CLASS = bytes4(keccak256(\\\"ERC1155_LAZY\\\"));\\n\\n    struct Mint1155Data {\\n        uint tokenId;\\n        string tokenURI;\\n        uint amount;\\n        address minter;\\n        LibPart.Part[] royalties;\\n        bytes signature;\\n    }\\n\\n    bytes32 public constant MINT_AND_TRANSFER_TYPEHASH =\\n        keccak256(\\n            \\\"Mint1155(uint256 tokenId,string tokenURI,uint256 amount,address minter,Part[] royalties)Part(address recipient,uint256 value)\\\"\\n        );\\n\\n    function hash(Mint1155Data memory data) internal pure returns (bytes32) {\\n        bytes32[] memory royaltiesBytes = new bytes32[](data.royalties.length);\\n        uint length = data.royalties.length;\\n        for (uint i; i < length; ++i) {\\n            royaltiesBytes[i] = LibPart.hash(data.royalties[i]);\\n        }\\n        return\\n            keccak256(\\n                abi.encode(\\n                    MINT_AND_TRANSFER_TYPEHASH,\\n                    data.tokenId,\\n                    keccak256(bytes(data.tokenURI)),\\n                    data.amount,\\n                    data.minter,\\n                    keccak256(abi.encodePacked(royaltiesBytes))\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x47be425101670fa8dce1529ea5c1e2890c833040fbf9a13ce4cbe2eaa4e690e7\",\"license\":\"MIT\"},\"src/librairies/LibERC721LazyMint.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./LibPart.sol\\\";\\n\\nlibrary LibERC721LazyMint {\\n    bytes4 public constant ERC721_LAZY_ASSET_CLASS = bytes4(keccak256(\\\"ERC721_LAZY\\\"));\\n\\n    struct Mint721Data {\\n        uint tokenId;\\n        string tokenURI;\\n        address minter;\\n        LibPart.Part[] royalties;\\n        bytes signature;\\n    }\\n\\n    bytes32 public constant MINT_AND_TRANSFER_TYPEHASH =\\n        keccak256(\\n            \\\"Mint721(uint256 tokenId,string tokenURI,address minter,Part[] royalties)Part(address recipient,uint256 value)\\\"\\n        );\\n\\n    function hash(Mint721Data memory data) internal pure returns (bytes32) {\\n        bytes32[] memory royaltiesBytes = new bytes32[](data.royalties.length);\\n        uint length = data.royalties.length;\\n        for (uint i; i < length; ++i) {\\n            royaltiesBytes[i] = LibPart.hash(data.royalties[i]);\\n        }\\n        return\\n            keccak256(\\n                abi.encode(\\n                    MINT_AND_TRANSFER_TYPEHASH,\\n                    data.tokenId,\\n                    keccak256(bytes(data.tokenURI)),\\n                    data.minter,\\n                    keccak256(abi.encodePacked(royaltiesBytes))\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xd0a8924d168e58094773f3602b8029b3c8c999410c123569e093dfb81f89ac8a\",\"license\":\"MIT\"},\"src/librairies/LibFeeSide.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./LibAsset.sol\\\";\\n\\nlibrary LibFeeSide {\\n    enum FeeSide {\\n        NONE,\\n        LEFT,\\n        RIGHT\\n    }\\n\\n    function getFeeSide(bytes4 leftClass, bytes4 rightClass) internal pure returns (FeeSide) {\\n        if (leftClass == LibAsset.ETH_ASSET_CLASS) {\\n            return FeeSide.LEFT;\\n        }\\n        if (rightClass == LibAsset.ETH_ASSET_CLASS) {\\n            return FeeSide.RIGHT;\\n        }\\n        if (leftClass == LibAsset.ERC20_ASSET_CLASS) {\\n            return FeeSide.LEFT;\\n        }\\n        if (rightClass == LibAsset.ERC20_ASSET_CLASS) {\\n            return FeeSide.RIGHT;\\n        }\\n        if (leftClass == LibAsset.ERC1155_ASSET_CLASS) {\\n            return FeeSide.LEFT;\\n        }\\n        if (rightClass == LibAsset.ERC1155_ASSET_CLASS) {\\n            return FeeSide.RIGHT;\\n        }\\n        return FeeSide.NONE;\\n    }\\n}\\n\",\"keccak256\":\"0xea4b067a9bdacac3fa1248fd87d0bd09229fc00352b2b186170d67195558d5b5\",\"license\":\"MIT\"},\"src/librairies/LibFill.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./LibOrder.sol\\\";\\n\\nlibrary LibFill {\\n    struct FillResult {\\n        uint leftValue;\\n        uint rightValue;\\n    }\\n\\n    struct IsMakeFill {\\n        bool leftMake;\\n        bool rightMake;\\n    }\\n\\n    /**\\n     * @dev Should return filled values\\n     * @param leftOrder left order\\n     * @param rightOrder right order\\n     * @param leftOrderFill current fill of the left order (0 if order is unfilled)\\n     * @param rightOrderFill current fill of the right order (0 if order is unfilled)\\n     * @param leftIsMakeFill true if left orders fill is calculated from the make side, false if from the take side\\n     * @param rightIsMakeFill true if right orders fill is calculated from the make side, false if from the take side\\n     */\\n    function fillOrder(\\n        LibOrder.Order memory leftOrder,\\n        LibOrder.Order memory rightOrder,\\n        uint leftOrderFill,\\n        uint rightOrderFill,\\n        bool leftIsMakeFill,\\n        bool rightIsMakeFill\\n    ) internal pure returns (FillResult memory) {\\n        (uint leftMakeValue, uint leftTakeValue) = LibOrder.calculateRemaining(\\n            leftOrder,\\n            leftOrderFill,\\n            leftIsMakeFill\\n        );\\n        (uint rightMakeValue, uint rightTakeValue) = LibOrder.calculateRemaining(\\n            rightOrder,\\n            rightOrderFill,\\n            rightIsMakeFill\\n        );\\n\\n        //We have 3 cases here:\\n        if (rightTakeValue > leftMakeValue) {\\n            //1nd: left order should be fully filled\\n            return fillLeft(leftMakeValue, leftTakeValue, rightOrder.makeAsset.value, rightOrder.takeAsset.value);\\n        } //2st: right order should be fully filled or 3d: both should be fully filled if required values are the same\\n        return fillRight(leftOrder.makeAsset.value, leftOrder.takeAsset.value, rightMakeValue, rightTakeValue);\\n    }\\n\\n    function fillRight(\\n        uint leftMakeValue,\\n        uint leftTakeValue,\\n        uint rightMakeValue,\\n        uint rightTakeValue\\n    ) internal pure returns (FillResult memory result) {\\n        uint makerValue = LibMath.safeGetPartialAmountFloor(rightTakeValue, leftMakeValue, leftTakeValue);\\n        require(makerValue <= rightMakeValue, \\\"fillRight: unable to fill\\\");\\n        return FillResult(rightTakeValue, makerValue);\\n    }\\n\\n    function fillLeft(\\n        uint leftMakeValue,\\n        uint leftTakeValue,\\n        uint rightMakeValue,\\n        uint rightTakeValue\\n    ) internal pure returns (FillResult memory result) {\\n        uint rightTake = LibMath.safeGetPartialAmountFloor(leftTakeValue, rightMakeValue, rightTakeValue);\\n        require(rightTake <= leftMakeValue, \\\"fillLeft: unable to fill\\\");\\n        return FillResult(leftMakeValue, leftTakeValue);\\n    }\\n}\\n\",\"keccak256\":\"0x7ae5de6d8b9545159e93fbeed07b0e6d620d6182021404b1b1f50fbe1dd603df\",\"license\":\"MIT\"},\"src/librairies/LibMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nlibrary LibMath {\\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\\n    ///      Reverts if rounding error is >= 0.1%\\n    /// @param numerator Numerator.\\n    /// @param denominator Denominator.\\n    /// @param target Value to calculate partial of.\\n    /// @return partialAmount value of target rounded down.\\n    function safeGetPartialAmountFloor(\\n        uint256 numerator,\\n        uint256 denominator,\\n        uint256 target\\n    ) internal pure returns (uint256 partialAmount) {\\n        if (isRoundingErrorFloor(numerator, denominator, target)) {\\n            revert(\\\"rounding error\\\");\\n        }\\n        partialAmount = (numerator * (target)) / (denominator);\\n    }\\n\\n    /// @dev Checks if rounding error >= 0.1% when rounding down.\\n    /// @param numerator Numerator.\\n    /// @param denominator Denominator.\\n    /// @param target Value to multiply with numerator/denominator.\\n    /// @return isError Rounding error is present.\\n    function isRoundingErrorFloor(\\n        uint256 numerator,\\n        uint256 denominator,\\n        uint256 target\\n    ) internal pure returns (bool isError) {\\n        if (denominator == 0) {\\n            revert(\\\"division by zero\\\");\\n        }\\n\\n        // The absolute rounding error is the difference between the rounded\\n        // value and the ideal value. The relative rounding error is the\\n        // absolute rounding error divided by the absolute value of the\\n        // ideal value. This is undefined when the ideal value is zero.\\n        //\\n        // The ideal value is `numerator * target / denominator`.\\n        // Let's call `numerator * target % denominator` the remainder.\\n        // The absolute error is `remainder / denominator`.\\n        //\\n        // When the ideal value is zero, we require the absolute error to\\n        // be zero. Fortunately, this is always the case. The ideal value is\\n        // zero iff `numerator == 0` and/or `target == 0`. In this case the\\n        // remainder and absolute error are also zero.\\n        if (target == 0 || numerator == 0) {\\n            return false;\\n        }\\n\\n        // Otherwise, we want the relative rounding error to be strictly\\n        // less than 0.1%.\\n        // The relative error is `remainder / (numerator * target)`.\\n        // We want the relative error less than 1 / 1000:\\n        //        remainder / (numerator * target)  <  1 / 1000\\n        // or equivalently:\\n        //        1000 * remainder  <  numerator * target\\n        // so we have a rounding error iff:\\n        //        1000 * remainder  >=  numerator * target\\n        uint256 remainder = mulmod(target, numerator, denominator);\\n        isError = remainder * (1000) >= numerator * (target);\\n    }\\n\\n    function safeGetPartialAmountCeil(\\n        uint256 numerator,\\n        uint256 denominator,\\n        uint256 target\\n    ) internal pure returns (uint256 partialAmount) {\\n        if (isRoundingErrorCeil(numerator, denominator, target)) {\\n            revert(\\\"rounding error\\\");\\n        }\\n        partialAmount = (numerator * (target)) + (denominator - (1)) / (denominator);\\n    }\\n\\n    /// @dev Checks if rounding error >= 0.1% when rounding up.\\n    /// @param numerator Numerator.\\n    /// @param denominator Denominator.\\n    /// @param target Value to multiply with numerator/denominator.\\n    /// @return isError Rounding error is present.\\n    function isRoundingErrorCeil(\\n        uint256 numerator,\\n        uint256 denominator,\\n        uint256 target\\n    ) internal pure returns (bool isError) {\\n        if (denominator == 0) {\\n            revert(\\\"division by zero\\\");\\n        }\\n\\n        // See the comments in `isRoundingError`.\\n        if (target == 0 || numerator == 0) {\\n            // When either is zero, the ideal value and rounded value are zero\\n            // and there is no rounding error. (Although the relative error\\n            // is undefined.)\\n            return false;\\n        }\\n        // Compute remainder as before\\n        uint256 remainder = mulmod(target, numerator, denominator);\\n        remainder = denominator - ((remainder) % denominator);\\n        isError = remainder * (1000) >= numerator * (target);\\n        return isError;\\n    }\\n}\\n\",\"keccak256\":\"0x37ff06f06bf5c378e17b7c166e469b66058be11979f0d983e580c06090123b7d\",\"license\":\"MIT\"},\"src/librairies/LibOrder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./LibAsset.sol\\\";\\nimport \\\"./LibMath.sol\\\";\\nimport \\\"./LibOrderDataV3.sol\\\";\\nimport \\\"./LibOrderDataV2.sol\\\";\\nimport \\\"./LibOrderDataV1.sol\\\";\\n\\nlibrary LibOrder {\\n    bytes32 public constant ORDER_TYPEHASH =\\n        keccak256(\\n            \\\"Order(address maker,Asset makeAsset,address taker,Asset takeAsset,uint256 salt,uint256 start,uint256 end,bytes4 dataType,bytes data)Asset(AssetType assetType,uint256 value)AssetType(bytes4 assetClass,bytes data)\\\"\\n        );\\n\\n    bytes4 public constant DEFAULT_ORDER_TYPE = 0xffffffff;\\n\\n    struct Order {\\n        address maker;\\n        LibAsset.Asset makeAsset;\\n        address taker;\\n        LibAsset.Asset takeAsset;\\n        uint salt;\\n        uint start;\\n        uint end;\\n        bytes4 dataType;\\n        bytes data;\\n    }\\n\\n    function calculateRemaining(\\n        Order memory order,\\n        uint fill,\\n        bool isMakeFill\\n    ) internal pure returns (uint makeValue, uint takeValue) {\\n        if (isMakeFill) {\\n            makeValue = order.makeAsset.value - (fill);\\n            takeValue = LibMath.safeGetPartialAmountFloor(order.takeAsset.value, order.makeAsset.value, makeValue);\\n        } else {\\n            takeValue = order.takeAsset.value - (fill);\\n            makeValue = LibMath.safeGetPartialAmountFloor(order.makeAsset.value, order.takeAsset.value, takeValue);\\n        }\\n    }\\n\\n    function hashKey(Order memory order) internal pure returns (bytes32) {\\n        if (order.dataType == LibOrderDataV1.V1 || order.dataType == DEFAULT_ORDER_TYPE) {\\n            return\\n                keccak256(\\n                    abi.encode(\\n                        order.maker,\\n                        LibAsset.hash(order.makeAsset.assetType),\\n                        LibAsset.hash(order.takeAsset.assetType),\\n                        order.salt\\n                    )\\n                );\\n        } else {\\n            //order.data is in hash for V2, V3 and all new order\\n            return\\n                keccak256(\\n                    abi.encode(\\n                        order.maker,\\n                        LibAsset.hash(order.makeAsset.assetType),\\n                        LibAsset.hash(order.takeAsset.assetType),\\n                        order.salt,\\n                        order.data\\n                    )\\n                );\\n        }\\n    }\\n\\n    function hash(Order memory order) internal pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    ORDER_TYPEHASH,\\n                    order.maker,\\n                    LibAsset.hash(order.makeAsset),\\n                    order.taker,\\n                    LibAsset.hash(order.takeAsset),\\n                    order.salt,\\n                    order.start,\\n                    order.end,\\n                    order.dataType,\\n                    keccak256(order.data)\\n                )\\n            );\\n    }\\n\\n    function validateOrderTime(LibOrder.Order memory order) internal view {\\n        require(order.start == 0 || order.start < block.timestamp, \\\"Order start validation failed\\\");\\n        require(order.end == 0 || order.end > block.timestamp, \\\"Order end validation failed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x9d40d06c9001c1f5a4a3b994fdcb3ce6746eae901b575998ea1dc7fca76cbc5c\",\"license\":\"MIT\"},\"src/librairies/LibOrderData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./LibOrder.sol\\\";\\n\\nlibrary LibOrderData {\\n    struct GenericOrderData {\\n        LibPart.Part[] payouts;\\n        LibPart.Part[] originFees;\\n        bool isMakeFill;\\n        uint maxFeesBasePoint;\\n    }\\n\\n    function parse(LibOrder.Order memory order) internal pure returns (GenericOrderData memory dataOrder) {\\n        if (order.dataType == LibOrderDataV1.V1) {\\n            LibOrderDataV1.DataV1 memory data = abi.decode(order.data, (LibOrderDataV1.DataV1));\\n            dataOrder.payouts = data.payouts;\\n            dataOrder.originFees = data.originFees;\\n        } else if (order.dataType == LibOrderDataV2.V2) {\\n            LibOrderDataV2.DataV2 memory data = abi.decode(order.data, (LibOrderDataV2.DataV2));\\n            dataOrder.payouts = data.payouts;\\n            dataOrder.originFees = data.originFees;\\n            dataOrder.isMakeFill = data.isMakeFill;\\n        } else if (order.dataType == LibOrderDataV3.V3_SELL) {\\n            LibOrderDataV3.DataV3_SELL memory data = abi.decode(order.data, (LibOrderDataV3.DataV3_SELL));\\n            dataOrder.payouts = parsePayouts(data.payouts);\\n            dataOrder.originFees = parseOriginFeeData(data.originFeeFirst, data.originFeeSecond);\\n            dataOrder.isMakeFill = true;\\n            dataOrder.maxFeesBasePoint = data.maxFeesBasePoint;\\n        } else if (order.dataType == LibOrderDataV3.V3_BUY) {\\n            LibOrderDataV3.DataV3_BUY memory data = abi.decode(order.data, (LibOrderDataV3.DataV3_BUY));\\n            dataOrder.payouts = parsePayouts(data.payouts);\\n            dataOrder.originFees = parseOriginFeeData(data.originFeeFirst, data.originFeeSecond);\\n            dataOrder.isMakeFill = false;\\n        } else if (order.dataType == 0xffffffff) {} else {\\n            revert(\\\"Unknown Order data type\\\");\\n        }\\n        if (dataOrder.payouts.length == 0) {\\n            dataOrder.payouts = payoutSet(order.maker);\\n        }\\n    }\\n\\n    function payoutSet(address orderAddress) internal pure returns (LibPart.Part[] memory) {\\n        LibPart.Part[] memory payout = new LibPart.Part[](1);\\n        payout[0].account = payable(orderAddress);\\n        payout[0].value = 10000;\\n        return payout;\\n    }\\n\\n    function parseOriginFeeData(uint dataFirst, uint dataSecond) internal pure returns (LibPart.Part[] memory) {\\n        LibPart.Part[] memory originFee;\\n\\n        if (dataFirst > 0 && dataSecond > 0) {\\n            originFee = new LibPart.Part[](2);\\n\\n            originFee[0] = uintToLibPart(dataFirst);\\n            originFee[1] = uintToLibPart(dataSecond);\\n        }\\n\\n        if (dataFirst > 0 && dataSecond == 0) {\\n            originFee = new LibPart.Part[](1);\\n\\n            originFee[0] = uintToLibPart(dataFirst);\\n        }\\n\\n        if (dataFirst == 0 && dataSecond > 0) {\\n            originFee = new LibPart.Part[](1);\\n\\n            originFee[0] = uintToLibPart(dataSecond);\\n        }\\n\\n        return originFee;\\n    }\\n\\n    function parsePayouts(uint data) internal pure returns (LibPart.Part[] memory) {\\n        LibPart.Part[] memory payouts;\\n\\n        if (data > 0) {\\n            payouts = new LibPart.Part[](1);\\n            payouts[0] = uintToLibPart(data);\\n        }\\n\\n        return payouts;\\n    }\\n\\n    /**\\n        @notice converts uint to LibPart.Part\\n        @param data address and value encoded in uint (first 12 bytes )\\n        @return result LibPart.Part \\n     */\\n    function uintToLibPart(uint data) internal pure returns (LibPart.Part memory result) {\\n        if (data > 0) {\\n            result.account = payable(address(uint160(data)));\\n            result.value = uint96(data >> 160);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd4ef142f516ce56f3df80a776880db191567bc5bb7a97d0700d790f50b9242bf\",\"license\":\"MIT\"},\"src/librairies/LibOrderDataV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./LibPart.sol\\\";\\n\\nlibrary LibOrderDataV1 {\\n    bytes4 public constant V1 = bytes4(keccak256(\\\"V1\\\"));\\n\\n    struct DataV1 {\\n        LibPart.Part[] payouts;\\n        LibPart.Part[] originFees;\\n    }\\n}\\n\",\"keccak256\":\"0x43b6827718725ecbd90b9d9fbd0e96f39221d65197c87a7d0b6afb0d03105fe8\",\"license\":\"MIT\"},\"src/librairies/LibOrderDataV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./LibPart.sol\\\";\\n\\nlibrary LibOrderDataV2 {\\n    bytes4 public constant V2 = bytes4(keccak256(\\\"V2\\\"));\\n\\n    struct DataV2 {\\n        LibPart.Part[] payouts;\\n        LibPart.Part[] originFees;\\n        bool isMakeFill;\\n    }\\n}\\n\",\"keccak256\":\"0x40d057f168ce6ca96e58ecd0418fdf99f8e39af544af59f0260c55bb0d961dac\",\"license\":\"MIT\"},\"src/librairies/LibOrderDataV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./LibPart.sol\\\";\\n\\nlibrary LibOrderDataV3 {\\n    bytes4 public constant V3_SELL = bytes4(keccak256(\\\"V3_SELL\\\"));\\n    bytes4 public constant V3_BUY = bytes4(keccak256(\\\"V3_BUY\\\"));\\n\\n    struct DataV3_SELL {\\n        uint payouts;\\n        uint originFeeFirst;\\n        uint originFeeSecond;\\n        uint maxFeesBasePoint;\\n        bytes32 marketplaceMarker;\\n    }\\n\\n    struct DataV3_BUY {\\n        uint payouts;\\n        uint originFeeFirst;\\n        uint originFeeSecond;\\n        bytes32 marketplaceMarker;\\n    }\\n}\\n\",\"keccak256\":\"0xf931bfd1f243272c5e106e85b66a6fab9527e1258e5633f10b6bc0bb7a83c3e5\",\"license\":\"MIT\"},\"src/librairies/LibPart.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nlibrary LibPart {\\n    bytes32 public constant TYPE_HASH = keccak256(\\\"Part(address account,uint96 value)\\\");\\n\\n    struct Part {\\n        address payable account;\\n        uint96 value;\\n    }\\n\\n    function hash(Part memory part) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(TYPE_HASH, part.account, part.value));\\n    }\\n}\\n\",\"keccak256\":\"0xedbb696dbf7cd7d5325fc114fd5b7531cf1b1676df98cc5a4cf6330b609ef651\",\"license\":\"MIT\"},\"src/librairies/LibSignature.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nlibrary LibSignature {\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        // Check the signature length\\n        if (signature.length != 65) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        }\\n\\n        // Divide the signature in r, s and v variables\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // ecrecover takes the signature parameters, and the only way to get them\\n        // currently is to use assembly.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r := mload(add(signature, 0x20))\\n            s := mload(add(signature, 0x40))\\n            v := byte(0, mload(add(signature, 0x60)))\\n        }\\n\\n        return recover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover-bytes32-bytes-} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (282): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        require(\\n            uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0,\\n            \\\"ECDSA: invalid signature 's' value\\\"\\n        );\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        // v > 30 is a special case, we need to adjust hash with \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\"\\n        // and v = v - 4\\n        address signer;\\n        if (v > 30) {\\n            require(v - 4 == 27 || v - 4 == 28, \\\"ECDSA: invalid signature 'v' value\\\");\\n            signer = ecrecover(toEthSignedMessageHash(hash), v - 4, r, s);\\n        } else {\\n            require(v == 27 || v == 28, \\\"ECDSA: invalid signature 'v' value\\\");\\n            signer = ecrecover(hash, v, r, s);\\n        }\\n\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * replicates the behavior of the\\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\\n     * JSON-RPC method.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n}\\n\",\"keccak256\":\"0x4b1e82ebf9df18caa8cce9f20189d392c335f3cc7aa99c9265bdbfbf87af0816\",\"license\":\"MIT\"},\"src/librairies/LibTransfer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nlibrary LibTransfer {\\n    function transferEth(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(\\\"\\\");\\n        require(success, \\\"LibTransfer BaseCurrency transfer failed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x1755b75d1a33d9acb9ba3428698657d091681399b949c43e0844bf1dc4847b2c\",\"license\":\"MIT\"},\"src/operator/OperatorRole.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\ncontract OperatorRole is OwnableUpgradeable {\\n    mapping(address => bool) public operators;\\n\\n    function __OperatorRole_init() external initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function addOperator(address operator) external onlyOwner {\\n        operators[operator] = true;\\n    }\\n\\n    function removeOperator(address operator) external onlyOwner {\\n        operators[operator] = false;\\n    }\\n\\n    modifier onlyOperator() {\\n        require(operators[_msgSender()], \\\"OperatorRole: caller is not the operator\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xd3c60cb4a0bac98068b2adf1a42169a3488264e268853171f573d66f8bfc5fa1\",\"license\":\"MIT\"},\"src/royalties-registry/RoyaltiesRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../interfaces/IRoyaltiesProvider.sol\\\";\\nimport \\\"../interfaces/IERC2981.sol\\\";\\nimport \\\"../royalties/LibRoyaltiesV2.sol\\\";\\nimport \\\"../royalties/LibRoyalties2981.sol\\\";\\nimport \\\"../royalties/LibRoyaltiesGhostMarketV2.sol\\\";\\nimport \\\"../royalties/RoyaltiesV2.sol\\\";\\nimport \\\"../royalties/GhostMarketRoyalties.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\ncontract RoyaltiesRegistry is IRoyaltiesProvider, OwnableUpgradeable, GhostMarketRoyalties {\\n    /// @dev emitted when royalties set for token in\\n    event RoyaltiesSetForContract(address indexed token, LibPart.Part[] royalties);\\n\\n    /// @dev struct to store royalties in royaltiesByToken\\n    struct RoyaltiesSet {\\n        bool initialized;\\n        LibPart.Part[] royalties;\\n    }\\n\\n    /// @dev stores royalties for token contract, set in setRoyaltiesByToken() method\\n    mapping(address => RoyaltiesSet) public royaltiesByToken;\\n    /// @dev stores external provider and royalties type for token contract\\n    mapping(address => uint256) public royaltiesProviders;\\n\\n    /// @dev total amount or supported royalties types\\n    // 0 - royalties type is unset\\n    // 1 - royaltiesByToken,\\n    // 2 - v2,\\n    // 3 - v1,\\n    // 4 - external provider,\\n    // 5 - EIP-2981\\n    // 6 - unsupported/nonexistent royalties type\\n    uint256 public constant royaltiesTypesAmount = 6;\\n\\n    function __RoyaltiesRegistry_init() external initializer {\\n        __Ownable_init_unchained();\\n    }\\n\\n    /// @dev sets external provider for token contract, and royalties type = 4\\n    function setProviderByToken(address token, address provider) external {\\n        checkOwner(token);\\n        setRoyaltiesType(token, 4, provider);\\n    }\\n\\n    /// @dev returns provider address for token contract from royaltiesProviders mapping\\n    function getProvider(address token) public view returns (address) {\\n        return address(uint160(royaltiesProviders[token]));\\n    }\\n\\n    /// @dev returns royalties type for token contract\\n    function getRoyaltiesType(address token) external view returns (uint256) {\\n        return _getRoyaltiesType(royaltiesProviders[token]);\\n    }\\n\\n    /// @dev returns royalties type from uint\\n    function _getRoyaltiesType(uint256 data) internal pure returns (uint256) {\\n        for (uint256 i = 1; i <= royaltiesTypesAmount; ++i) {\\n            if (data / 2 ** (256 - i) == 1) {\\n                return i;\\n            }\\n        }\\n        return 0;\\n    }\\n\\n    /// @dev sets royalties type for token contract\\n    function setRoyaltiesType(address token, uint256 royaltiesType, address royaltiesProvider) internal {\\n        require(royaltiesType > 0 && royaltiesType <= royaltiesTypesAmount, \\\"wrong royaltiesType\\\");\\n        royaltiesProviders[token] = uint256(uint160(royaltiesProvider)) + 2 ** (256 - royaltiesType);\\n    }\\n\\n    /// @dev clears and sets new royalties type for token contract\\n    function forceSetRoyaltiesType(address token, uint256 royaltiesType) external {\\n        checkOwner(token);\\n        setRoyaltiesType(token, royaltiesType, getProvider(token));\\n    }\\n\\n    /// @dev clears royalties type for token contract\\n    function clearRoyaltiesType(address token) external {\\n        checkOwner(token);\\n        royaltiesProviders[token] = uint256(uint160(getProvider(token)));\\n        emit RoyaltiesSetForContract(token, new LibPart.Part[](0));\\n    }\\n\\n    /// @dev sets royalties for token contract in royaltiesByToken mapping and royalties type = 1\\n    function setRoyaltiesByToken(address token, LibPart.Part[] memory royalties) external {\\n        checkOwner(token);\\n        //clearing royaltiesProviders value for the token\\n        delete royaltiesProviders[token];\\n        // setting royaltiesType = 1 for the token\\n        setRoyaltiesType(token, 1, address(0));\\n        uint256 sumRoyalties = 0;\\n        delete royaltiesByToken[token];\\n        uint256 length = royalties.length;\\n        for (uint256 i; i < length; ++i) {\\n            require(royalties[i].account != address(0x0), \\\"RoyaltiesByToken recipient should be present\\\");\\n            require(royalties[i].value != 0, \\\"Royalty value for RoyaltiesByToken should be > 0\\\");\\n            royaltiesByToken[token].royalties.push(royalties[i]);\\n            sumRoyalties += royalties[i].value;\\n        }\\n        require(sumRoyalties < 10000, \\\"Set by token royalties sum more, than 100%\\\");\\n        royaltiesByToken[token].initialized = true;\\n        emit RoyaltiesSetForContract(token, royalties);\\n    }\\n\\n    /// @dev checks if msg.sender is owner of this contract or owner of the token contract\\n    function checkOwner(address token) internal view {\\n        if ((owner() != _msgSender()) && (OwnableUpgradeable(token).owner() != _msgSender())) {\\n            revert(\\\"Token owner not detected\\\");\\n        }\\n    }\\n\\n    /// @dev calculates royalties type for token contract\\n    function calculateRoyaltiesType(address token, address royaltiesProvider) internal view returns (uint256) {\\n        try IERC165Upgradeable(token).supportsInterface(LibRoyaltiesV2._INTERFACE_ID_ROYALTIES) returns (bool result) {\\n            if (result) {\\n                return 2;\\n            }\\n        } catch {}\\n\\n        try IERC165Upgradeable(token).supportsInterface(LibRoyaltiesGhostMarketV2._INTERFACE_ID_ROYALTIES) returns (\\n            bool result\\n        ) {\\n            if (result) {\\n                return 3;\\n            }\\n        } catch {}\\n\\n        try IERC165Upgradeable(token).supportsInterface(LibRoyalties2981._INTERFACE_ID_ROYALTIES) returns (\\n            bool result\\n        ) {\\n            if (result) {\\n                return 5;\\n            }\\n        } catch {}\\n\\n        if (royaltiesProvider != address(0)) {\\n            return 4;\\n        }\\n\\n        if (royaltiesByToken[token].initialized) {\\n            return 1;\\n        }\\n\\n        return 6;\\n    }\\n\\n    /// @dev returns royalties for token contract and token id\\n    function getRoyalties(address token, uint256 tokenId) external override returns (LibPart.Part[] memory) {\\n        uint256 royaltiesProviderData = royaltiesProviders[token];\\n\\n        address royaltiesProvider = address(uint160(royaltiesProviderData));\\n        uint256 royaltiesType = _getRoyaltiesType(royaltiesProviderData);\\n\\n        // case when royaltiesType is not set\\n        if (royaltiesType == 0) {\\n            // calculating royalties type for token\\n            royaltiesType = calculateRoyaltiesType(token, royaltiesProvider);\\n\\n            //saving royalties type\\n            setRoyaltiesType(token, royaltiesType, royaltiesProvider);\\n        }\\n        //case royaltiesType = 1, royalties are set in royaltiesByToken\\n        if (royaltiesType == 1) {\\n            return royaltiesByToken[token].royalties;\\n        }\\n\\n        //case royaltiesType = 2, royalties rarible v2\\n        if (royaltiesType == 2) {\\n            return getRoyaltiesRaribleV2(token, tokenId);\\n        }\\n\\n        //case royaltiesType = 3, royalties ghostmarket\\n        if (royaltiesType == 3) {\\n            return getRoyaltiesGhostmarket(token, tokenId);\\n        }\\n\\n        //case royaltiesType = 4, royalties from external provider\\n        if (royaltiesType == 4) {\\n            return providerExtractor(token, tokenId, royaltiesProvider);\\n        }\\n\\n        //case royaltiesType = 5, royalties EIP-2981\\n        if (royaltiesType == 5) {\\n            return getRoyaltiesEIP2981(token, tokenId);\\n        }\\n\\n        // case royaltiesType = 6, unknown/empty royalties\\n        if (royaltiesType == 6) {\\n            return new LibPart.Part[](0);\\n        }\\n\\n        revert(\\\"something wrong in getRoyalties\\\");\\n    }\\n\\n    /// @dev tries to get royalties rarible-v2 for token and tokenId\\n    function getRoyaltiesRaribleV2(address token, uint256 tokenId) internal view returns (LibPart.Part[] memory) {\\n        try RoyaltiesV2(token).getRaribleV2Royalties(tokenId) returns (LibPart.Part[] memory result) {\\n            return result;\\n        } catch {\\n            return new LibPart.Part[](0);\\n        }\\n    }\\n\\n    /// @dev tries to get royalties ghostmarket for token and tokenId\\n    function getRoyaltiesGhostmarket(address token, uint256 tokenId) internal view returns (LibPart.Part[] memory) {\\n        try GhostMarketRoyalties(token).getRoyalties(tokenId) returns (Royalty[] memory values) {\\n            LibPart.Part[] memory result = new LibPart.Part[](values.length);\\n            for (uint256 i; i < values.length; ++i) {\\n                result[i].value = uint96(values[i].value);\\n                result[i].account = values[i].recipient;\\n            }\\n            return result;\\n        } catch {\\n            return new LibPart.Part[](0);\\n        }\\n    }\\n\\n    /// @dev tries to get royalties EIP-2981 for token and tokenId\\n    function getRoyaltiesEIP2981(address token, uint256 tokenId) internal view returns (LibPart.Part[] memory) {\\n        try IERC2981(token).royaltyInfo(tokenId, LibRoyalties2981._WEIGHT_VALUE) returns (\\n            address receiver,\\n            uint256 royaltyAmount\\n        ) {\\n            return LibRoyalties2981.calculateRoyalties(receiver, royaltyAmount);\\n        } catch {\\n            return new LibPart.Part[](0);\\n        }\\n    }\\n\\n    /// @dev tries to get royalties for token and tokenId from external provider set in royaltiesProviders\\n    function providerExtractor(\\n        address token,\\n        uint256 tokenId,\\n        address providerAddress\\n    ) internal returns (LibPart.Part[] memory) {\\n        try IRoyaltiesProvider(providerAddress).getRoyalties(token, tokenId) returns (LibPart.Part[] memory result) {\\n            return result;\\n        } catch {\\n            return new LibPart.Part[](0);\\n        }\\n    }\\n\\n    uint256[46] private __gap;\\n}\\n\",\"keccak256\":\"0xe55bdc1f96792261c6f62aa83c711f9c7bcb1c7355c7dd2c967442d23d7a3ef4\",\"license\":\"MIT\"},\"src/royalties/GhostMarketRoyalties.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nabstract contract GhostMarketRoyalties {\\n    struct Royalty {\\n        address payable recipient;\\n        uint256 value;\\n    }\\n\\n    function getRoyalties(uint256 tokenId) external view returns (Royalty[] memory) {}\\n}\\n\",\"keccak256\":\"0x0f7b674acfda8a2bd07cebd76decbe2721d45b2714c92b61a353b3feb30cf428\",\"license\":\"MIT\"},\"src/royalties/LibRoyalties2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../librairies/LibPart.sol\\\";\\n\\nlibrary LibRoyalties2981 {\\n    /*\\n     * https://eips.ethereum.org/EIPS/eip-2981: bytes4 private constant _INTERFACE_ID_ERC2981 = 0x2a55205a;\\n     */\\n    bytes4 public constant _INTERFACE_ID_ROYALTIES = 0x2a55205a;\\n    uint96 public constant _WEIGHT_VALUE = 1000000;\\n\\n    /*Method for converting amount to percent and forming LibPart*/\\n    function calculateRoyalties(address to, uint256 amount) internal pure returns (LibPart.Part[] memory) {\\n        LibPart.Part[] memory result;\\n        if (amount == 0) {\\n            return result;\\n        }\\n        uint256 percent = ((amount * 100) / _WEIGHT_VALUE) * 100;\\n        require(percent < 10000, \\\"Royalties 2981, than 100%\\\");\\n        result = new LibPart.Part[](1);\\n        result[0].account = payable(to);\\n        result[0].value = uint96(percent);\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5c73d6c32166a0cae808cc4df7c0ba59298ee61af90b94ccbe9ba5a2d60e4f77\",\"license\":\"MIT\"},\"src/royalties/LibRoyaltiesGhostMarketV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nlibrary LibRoyaltiesGhostMarketV2 {\\n    /*\\n     * bytes4(keccak256('_GHOSTMARKET_NFT_ROYALTIES')) == 0xe42093a6\\n     */\\n    bytes4 public constant _INTERFACE_ID_ROYALTIES = 0xe42093a6;\\n}\\n\",\"keccak256\":\"0x6ce312b5f21794afb4f77b3b8a6c682f2ac20fad57a8226c1b0f2d4152f8d259\",\"license\":\"MIT\"},\"src/royalties/LibRoyaltiesV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nlibrary LibRoyaltiesV2 {\\n    /*\\n     * bytes4(keccak256('getRaribleV2Royalties(uint256)')) == 0xcad96cca\\n     */\\n    bytes4 public constant _INTERFACE_ID_ROYALTIES = 0xcad96cca;\\n}\\n\",\"keccak256\":\"0xb6828f41e64edd28a41fcc0538a6d36484fb43a6933581914b4a6c9dcda32f64\",\"license\":\"MIT\"},\"src/royalties/RoyaltiesV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../librairies/LibPart.sol\\\";\\n\\ninterface RoyaltiesV2 {\\n    event RoyaltiesSet(uint256 tokenId, LibPart.Part[] royalties);\\n\\n    function getRaribleV2Royalties(uint256 id) external view returns (LibPart.Part[] memory);\\n}\\n\",\"keccak256\":\"0xb277ce5843465098064fa786862345c391352d9de62a50b8d96851b8577cb07e\",\"license\":\"MIT\"},\"src/transfer-manager/GhostMarketTransferManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nimport \\\"../librairies/LibERC721LazyMint.sol\\\";\\nimport \\\"../librairies/LibERC1155LazyMint.sol\\\";\\nimport \\\"../interfaces/IRoyaltiesProvider.sol\\\";\\nimport \\\"../librairies/BpLibrary.sol\\\";\\nimport \\\"../interfaces/ITransferManager.sol\\\";\\n\\nabstract contract GhostMarketTransferManager is OwnableUpgradeable, ITransferManager {\\n    using BpLibrary for uint;\\n\\n    // @notice protocolFee is deprecated\\n    uint private protocolFee;\\n\\n    IRoyaltiesProvider public royaltiesRegistry;\\n\\n    // deprecated: no need without protocolFee\\n    address private defaultFeeReceiver;\\n\\n    // deprecated: no need without protocolFee\\n    mapping(address => address) private feeReceivers;\\n\\n    function __GhostMarketTransferManager_init_unchained(\\n        uint newProtocolFee,\\n        address newDefaultFeeReceiver,\\n        IRoyaltiesProvider newRoyaltiesProvider\\n    ) internal initializer {\\n        protocolFee = newProtocolFee;\\n        defaultFeeReceiver = newDefaultFeeReceiver;\\n        royaltiesRegistry = newRoyaltiesProvider;\\n    }\\n\\n    function setRoyaltiesRegistry(IRoyaltiesProvider newRoyaltiesRegistry) external onlyOwner {\\n        royaltiesRegistry = newRoyaltiesRegistry;\\n    }\\n\\n    /**\\n        @notice executes transfers for 2 matched orders\\n        @param left DealSide from the left order (see LibDeal.sol)\\n        @param right DealSide from the right order (see LibDeal.sol)\\n        @param dealData DealData of the match (see LibDeal.sol)\\n        @return totalLeftValue - total amount for the left order\\n        @return totalRightValue - total amout for the right order\\n    */\\n    function doTransfers(\\n        LibDeal.DealSide memory left,\\n        LibDeal.DealSide memory right,\\n        LibDeal.DealData memory dealData\\n    ) internal override returns (uint totalLeftValue, uint totalRightValue) {\\n        totalLeftValue = left.asset.value;\\n        totalRightValue = right.asset.value;\\n\\n        if (dealData.feeSide == LibFeeSide.FeeSide.LEFT) {\\n            totalLeftValue = doTransfersWithFees(left, right, dealData.maxFeesBasePoint);\\n            transferPayouts(right.asset.assetType, right.asset.value, right.from, left.payouts, right.proxy);\\n        } else if (dealData.feeSide == LibFeeSide.FeeSide.RIGHT) {\\n            totalRightValue = doTransfersWithFees(right, left, dealData.maxFeesBasePoint);\\n            transferPayouts(left.asset.assetType, left.asset.value, left.from, right.payouts, left.proxy);\\n        } else {\\n            transferPayouts(left.asset.assetType, left.asset.value, left.from, right.payouts, left.proxy);\\n            transferPayouts(right.asset.assetType, right.asset.value, right.from, left.payouts, right.proxy);\\n        }\\n    }\\n\\n    /**\\n        @notice executes the fee-side transfers (payment + fees)\\n        @param paymentSide DealSide of the fee-side order\\n        @param nftSide  DealSide of the nft-side order\\n        @param maxFeesBasePoint max fee for the sell-order (used and is > 0 for V3 orders only)\\n        @return totalAmount of fee-side asset\\n    */\\n    function doTransfersWithFees(\\n        LibDeal.DealSide memory paymentSide,\\n        LibDeal.DealSide memory nftSide,\\n        uint maxFeesBasePoint\\n    ) internal returns (uint totalAmount) {\\n        totalAmount = calculateTotalAmount(paymentSide.asset.value, paymentSide.originFees, maxFeesBasePoint);\\n        uint rest = totalAmount;\\n\\n        rest = transferRoyalties(\\n            paymentSide.asset.assetType,\\n            nftSide.asset.assetType,\\n            nftSide.payouts,\\n            rest,\\n            paymentSide.asset.value,\\n            paymentSide.from,\\n            paymentSide.proxy\\n        );\\n        if (\\n            paymentSide.originFees.length == 1 &&\\n            nftSide.originFees.length == 1 &&\\n            nftSide.originFees[0].account == paymentSide.originFees[0].account\\n        ) {\\n            require(\\n                nftSide.originFees[0].value < 10000 && paymentSide.originFees[0].value < 10000,\\n                \\\"wrong origin fees\\\"\\n            );\\n            LibPart.Part[] memory origin = new LibPart.Part[](1);\\n            origin[0].account = nftSide.originFees[0].account;\\n            origin[0].value = nftSide.originFees[0].value + paymentSide.originFees[0].value;\\n            (rest, ) = transferFees(\\n                paymentSide.asset.assetType,\\n                rest,\\n                paymentSide.asset.value,\\n                origin,\\n                paymentSide.from,\\n                paymentSide.proxy\\n            );\\n        } else {\\n            (rest, ) = transferFees(\\n                paymentSide.asset.assetType,\\n                rest,\\n                paymentSide.asset.value,\\n                paymentSide.originFees,\\n                paymentSide.from,\\n                paymentSide.proxy\\n            );\\n            (rest, ) = transferFees(\\n                paymentSide.asset.assetType,\\n                rest,\\n                paymentSide.asset.value,\\n                nftSide.originFees,\\n                paymentSide.from,\\n                paymentSide.proxy\\n            );\\n        }\\n        transferPayouts(paymentSide.asset.assetType, rest, paymentSide.from, nftSide.payouts, paymentSide.proxy);\\n    }\\n\\n    /**\\n        @notice Transfer royalties. If there is only one royalties receiver and one address in payouts and they match,\\n           nothing is transferred in this function\\n        @param paymentAssetType Asset Type which represents payment\\n        @param nftAssetType Asset Type which represents NFT to pay royalties for\\n        @param payouts Payouts to be made\\n        @param rest How much of the amount left after previous transfers\\n        @param from owner of the Asset to transfer\\n        @param proxy Transfer proxy to use\\n        @return How much left after transferring royalties\\n    */\\n    function transferRoyalties(\\n        LibAsset.AssetType memory paymentAssetType,\\n        LibAsset.AssetType memory nftAssetType,\\n        LibPart.Part[] memory payouts,\\n        uint rest,\\n        uint amount,\\n        address from,\\n        address proxy\\n    ) internal returns (uint) {\\n        LibPart.Part[] memory royalties = getRoyaltiesByAssetType(nftAssetType);\\n        if (royalties.length == 1 && payouts.length == 1 && royalties[0].account == payouts[0].account) {\\n            require(royalties[0].value <= 5000, \\\"Royalties are too high (>50%)\\\");\\n            return rest;\\n        }\\n        (uint result, uint totalRoyalties) = transferFees(paymentAssetType, rest, amount, royalties, from, proxy);\\n        require(totalRoyalties <= 5000, \\\"Royalties are too high (>50%)\\\");\\n        return result;\\n    }\\n\\n    /**\\n        @notice calculates royalties by asset type. If it's a lazy NFT, then royalties are extracted from asset. otherwise using royaltiesRegistry\\n        @param nftAssetType NFT Asset Type to calculate royalties for\\n        @return calculated royalties (Array of LibPart.Part)\\n    */\\n    function getRoyaltiesByAssetType(LibAsset.AssetType memory nftAssetType) internal returns (LibPart.Part[] memory) {\\n        if (\\n            nftAssetType.assetClass == LibAsset.ERC1155_ASSET_CLASS ||\\n            nftAssetType.assetClass == LibAsset.ERC721_ASSET_CLASS\\n        ) {\\n            (address token, uint tokenId) = abi.decode(nftAssetType.data, (address, uint));\\n            return royaltiesRegistry.getRoyalties(token, tokenId);\\n        } else if (nftAssetType.assetClass == LibERC1155LazyMint.ERC1155_LAZY_ASSET_CLASS) {\\n            (, LibERC1155LazyMint.Mint1155Data memory data) = abi.decode(\\n                nftAssetType.data,\\n                (address, LibERC1155LazyMint.Mint1155Data)\\n            );\\n            return data.royalties;\\n        } else if (nftAssetType.assetClass == LibERC721LazyMint.ERC721_LAZY_ASSET_CLASS) {\\n            (, LibERC721LazyMint.Mint721Data memory data) = abi.decode(\\n                nftAssetType.data,\\n                (address, LibERC721LazyMint.Mint721Data)\\n            );\\n            return data.royalties;\\n        }\\n        LibPart.Part[] memory empty;\\n        return empty;\\n    }\\n\\n    /**\\n        @notice Transfer fees\\n        @param assetType Asset Type to transfer\\n        @param rest How much of the amount left after previous transfers\\n        @param amount Total amount of the Asset. Used as a base to calculate part from (100%)\\n        @param fees Array of LibPart.Part which represents fees to pay\\n        @param from owner of the Asset to transfer\\n        @param proxy Transfer proxy to use\\n        @return newRest how much left after transferring fees\\n        @return totalFees total number of fees in bp\\n    */\\n    function transferFees(\\n        LibAsset.AssetType memory assetType,\\n        uint rest,\\n        uint amount,\\n        LibPart.Part[] memory fees,\\n        address from,\\n        address proxy\\n    ) internal returns (uint newRest, uint totalFees) {\\n        totalFees = 0;\\n        newRest = rest;\\n        for (uint256 i = 0; i < fees.length; ++i) {\\n            totalFees = totalFees + (fees[i].value);\\n            uint feeValue;\\n            (newRest, feeValue) = subFeeInBp(newRest, amount, fees[i].value);\\n            if (feeValue > 0) {\\n                transfer(LibAsset.Asset(assetType, feeValue), from, fees[i].account, proxy);\\n            }\\n        }\\n    }\\n\\n    /**\\n        @notice transfers main part of the asset (payout)\\n        @param assetType Asset Type to transfer\\n        @param amount Amount of the asset to transfer\\n        @param from Current owner of the asset\\n        @param payouts List of payouts - receivers of the Asset\\n        @param proxy Transfer Proxy to use\\n    */\\n    function transferPayouts(\\n        LibAsset.AssetType memory assetType,\\n        uint amount,\\n        address from,\\n        LibPart.Part[] memory payouts,\\n        address proxy\\n    ) internal {\\n        require(payouts.length > 0, \\\"transferPayouts: nothing to transfer\\\");\\n        uint sumBps = 0;\\n        uint rest = amount;\\n        for (uint256 i = 0; i < payouts.length - 1; ++i) {\\n            uint currentAmount = amount.bp(payouts[i].value);\\n            sumBps = sumBps + (payouts[i].value);\\n            if (currentAmount > 0) {\\n                rest = rest - (currentAmount);\\n                transfer(LibAsset.Asset(assetType, currentAmount), from, payouts[i].account, proxy);\\n            }\\n        }\\n        LibPart.Part memory lastPayout = payouts[payouts.length - 1];\\n        sumBps = sumBps + (lastPayout.value);\\n        require(sumBps == 10000, \\\"Sum payouts Bps not equal 100%\\\");\\n        if (rest > 0) {\\n            transfer(LibAsset.Asset(assetType, rest), from, lastPayout.account, proxy);\\n        }\\n    }\\n\\n    /**\\n        @notice calculates total amount of fee-side asset that is going to be used in match\\n        @param amount fee-side order value\\n        @param orderOriginFees fee-side order's origin fee (it adds on top of the amount)\\n        @param maxFeesBasePoint max fee for the sell-order (used and is > 0 for V3 orders only)\\n        @return total amount of fee-side asset\\n    */\\n    function calculateTotalAmount(\\n        uint amount,\\n        LibPart.Part[] memory orderOriginFees,\\n        uint maxFeesBasePoint\\n    ) internal pure returns (uint) {\\n        if (maxFeesBasePoint > 0) {\\n            return amount;\\n        }\\n        uint fees = 0;\\n        for (uint256 i = 0; i < orderOriginFees.length; ++i) {\\n            // require(orderOriginFees[i].value <= 10000, \\\"origin fee is too big\\\");\\n            fees = fees + orderOriginFees[i].value;\\n        }\\n        return amount + (amount.bp(fees));\\n    }\\n\\n    function subFeeInBp(uint value, uint total, uint feeInBp) internal pure returns (uint newValue, uint realFee) {\\n        return subFee(value, total.bp(feeInBp));\\n    }\\n\\n    function subFee(uint value, uint fee) internal pure returns (uint newValue, uint realFee) {\\n        if (value > fee) {\\n            newValue = value - (fee);\\n            realFee = fee;\\n        } else {\\n            newValue = 0;\\n            realFee = value;\\n        }\\n    }\\n\\n    uint256[46] private __gap;\\n}\\n\",\"keccak256\":\"0x6b52865df07a07b0e4bd9e098b8118deed02ddf0cea4f40b2b59dc121390d05a\",\"license\":\"MIT\"},\"src/transfer-manager/TransferExecutor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../interfaces/ITransferProxy.sol\\\";\\nimport \\\"../interfaces/INftTransferProxy.sol\\\";\\nimport \\\"../interfaces/IERC20TransferProxy.sol\\\";\\nimport \\\"../interfaces/ITransferExecutor.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"../librairies/LibTransfer.sol\\\";\\n\\nabstract contract TransferExecutor is Initializable, OwnableUpgradeable, ITransferExecutor {\\n    using LibTransfer for address;\\n\\n    mapping(bytes4 => address) internal proxies;\\n\\n    event ProxyChange(bytes4 indexed assetType, address proxy);\\n\\n    function __TransferExecutor_init_unchained(address transferProxy, address erc20TransferProxy) internal {\\n        proxies[LibAsset.ERC20_ASSET_CLASS] = address(erc20TransferProxy);\\n        proxies[LibAsset.ERC721_ASSET_CLASS] = address(transferProxy);\\n        proxies[LibAsset.ERC1155_ASSET_CLASS] = address(transferProxy);\\n    }\\n\\n    function setTransferProxy(bytes4 assetType, address proxy) external onlyOwner {\\n        proxies[assetType] = proxy;\\n        emit ProxyChange(assetType, proxy);\\n    }\\n\\n    function transfer(LibAsset.Asset memory asset, address from, address to, address proxy) internal override {\\n        if (asset.assetType.assetClass == LibAsset.ERC721_ASSET_CLASS) {\\n            //not using transfer proxy when transfering from this contract\\n            (address token, uint tokenId) = abi.decode(asset.assetType.data, (address, uint256));\\n            require(asset.value == 1, \\\"erc721 value error\\\");\\n            if (from == address(this)) {\\n                IERC721Upgradeable(token).safeTransferFrom(address(this), to, tokenId);\\n            } else {\\n                INftTransferProxy(proxy).erc721safeTransferFrom(IERC721Upgradeable(token), from, to, tokenId);\\n            }\\n        } else if (asset.assetType.assetClass == LibAsset.ERC20_ASSET_CLASS) {\\n            //not using transfer proxy when transfering from this contract\\n            address token = abi.decode(asset.assetType.data, (address));\\n            if (from == address(this)) {\\n                require(IERC20Upgradeable(token).transfer(to, asset.value), \\\"erc20 transfer failed\\\");\\n            } else {\\n                IERC20TransferProxy(proxy).erc20safeTransferFrom(IERC20Upgradeable(token), from, to, asset.value);\\n            }\\n        } else if (asset.assetType.assetClass == LibAsset.ERC1155_ASSET_CLASS) {\\n            //not using transfer proxy when transfering from this contract\\n            (address token, uint tokenId) = abi.decode(asset.assetType.data, (address, uint256));\\n            if (from == address(this)) {\\n                IERC1155Upgradeable(token).safeTransferFrom(address(this), to, tokenId, asset.value, \\\"\\\");\\n            } else {\\n                INftTransferProxy(proxy).erc1155safeTransferFrom(\\n                    IERC1155Upgradeable(token),\\n                    from,\\n                    to,\\n                    tokenId,\\n                    asset.value,\\n                    \\\"\\\"\\n                );\\n            }\\n        } else if (asset.assetType.assetClass == LibAsset.ETH_ASSET_CLASS) {\\n            if (to != address(this)) {\\n                to.transferEth(asset.value);\\n            }\\n        } else {\\n            ITransferProxy(proxy).transfer(asset, from, to);\\n        }\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xd410f83ebe99734f8a4d859230eeec23adee6c8952d8c95ed801199373073e0a\",\"license\":\"MIT\"},\"src/transfer-proxy/ERC20TransferProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../operator/OperatorRole.sol\\\";\\nimport \\\"../interfaces/IERC20TransferProxy.sol\\\";\\n\\ncontract ERC20TransferProxy is IERC20TransferProxy, Initializable, OperatorRole {\\n    function __ERC20TransferProxy_init() external initializer {\\n        __Ownable_init();\\n    }\\n\\n    function erc20safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external override onlyOperator {\\n        require(token.transferFrom(from, to, value), \\\"failure while transferring\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x04cc0793054b9e7acc8834a6cfdcf69eb1b3849597471c70bfa74189f1ebadf9\",\"license\":\"MIT\"},\"src/transfer-proxy/TransferProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../operator/OperatorRole.sol\\\";\\nimport \\\"../interfaces/INftTransferProxy.sol\\\";\\n\\ncontract TransferProxy is INftTransferProxy, Initializable, OperatorRole {\\n    function __TransferProxy_init() external initializer {\\n        __Ownable_init();\\n    }\\n\\n    function erc721safeTransferFrom(\\n        IERC721Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external override onlyOperator {\\n        token.safeTransferFrom(from, to, tokenId);\\n    }\\n\\n    function erc1155safeTransferFrom(\\n        IERC1155Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external override onlyOperator {\\n        token.safeTransferFrom(from, to, id, value, data);\\n    }\\n}\\n\",\"keccak256\":\"0x4e218c3597aaa8a478f4b0d40046a52b0ec3c379e8f4826b2640261163237d36\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613a6d806100206000396000f3fe6080604052600436106100ed5760003560e01c80638456cb59116100855780638456cb591461023657806388aaceee1461024b5780638ae429051461025e5780638da5cb5b1461027e5780639b7c0735146102a4578063b8d1452f146102b7578063bc197c81146102d7578063f23a6e6114610303578063f2fde38b1461032f57600080fd5b8063018249f1146100f957806301ffc9a71461011b57806308b1571d14610150578063150b7a02146101705780633f4ba83a146101b457806359e86829146101c95780635c975abb146101e9578063715018a6146102015780637908716c1461021657600080fd5b366100f457005b600080fd5b34801561010557600080fd5b50610119610114366004612155565b61034f565b005b34801561012757600080fd5b5061013b610136366004612249565b610551565b60405190151581526020015b60405180910390f35b34801561015c57600080fd5b5061011961016b366004612266565b610588565b34801561017c57600080fd5b5061019b61018b36600461241b565b630a85bd0160e11b949350505050565b6040516001600160e01b03199091168152602001610147565b3480156101c057600080fd5b506101196105b2565b3480156101d557600080fd5b506101196101e4366004612266565b6105c4565b3480156101f557600080fd5b5060655460ff1661013b565b34801561020d57600080fd5b506101196105ee565b34801561022257600080fd5b50610119610231366004612266565b610600565b34801561024257600080fd5b5061011961062a565b6101196102593660046125e8565b61063a565b34801561026a57600080fd5b50610119610279366004612266565b61079f565b34801561028a57600080fd5b506033546001600160a01b031660405161014791906126eb565b6101196102b23660046126ff565b6107c9565b3480156102c357600080fd5b506101196102d2366004612266565b610893565b3480156102e357600080fd5b5061019b6102f23660046127d9565b63bc197c8160e01b95945050505050565b34801561030f57600080fd5b5061019b61031e366004612886565b63f23a6e6160e01b95945050505050565b34801561033b57600080fd5b5061011961034a366004612266565b6108bd565b600054610100900460ff161580801561036f5750600054600160ff909116105b806103895750303b158015610389575060005460ff166001145b6103f15760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff191660011790558015610414576000805461ff0019166101001790555b61041c610936565b61042461095d565b61042c61098d565b6104fd8c8c8c8c8c8c8c8c8c8c8c609780546001600160a01b039c8d166001600160a01b031991821617909155609880549b8d169b82169b909b17909a5560998054998c16998b1699909917909855609a8054978b16978a1697909717909655609b8054958a1695891695909517909455609c805493891693881693909317909255609d8054918816918716919091179055609e8054918716918616919091179055609f805491861691851691909117905560a0805491851691841691909117905560a18054919093169116179055565b8015610543576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050505050505050565b60006001600160e01b03198216630271189760e51b148061058257506301ffc9a760e01b6001600160e01b03198316145b92915050565b6105906109c0565b609e80546001600160a01b0319166001600160a01b0392909216919091179055565b6105ba6109c0565b6105c2610a1a565b565b6105cc6109c0565b60a080546001600160a01b0319166001600160a01b0392909216919091179055565b6105f66109c0565b6105c26000610a66565b6106086109c0565b609880546001600160a01b0319166001600160a01b0392909216919091179055565b6106326109c0565b6105c2610ab8565b610642610af5565b8051600090819081906001600160a01b03161561068557600061066485610b3b565b9050806106835760405162461bcd60e51b81526004016103e8906128ee565b505b875160005b8181101561072f5760008060006106ba8d85815181106106ac576106ac61291b565b60200260200101518b610fff565b92509250925085806106c95750825b604051841515815290965033907fc5dd8c21802b423a9c822ee9c934f042186e6bb7097a1dd17717343ee84df7149060200160405180910390a261070d8289612947565b97506107198188612947565b9650505050806107289061295f565b905061068a565b50816107785760405162461bcd60e51b81526020600482015260186024820152776e6f207375636365737366756c20657865637574696f6e7360401b60448201526064016103e8565b6107828489611d07565b61078c8388611d07565b610794611d32565b505050505050505050565b6107a76109c0565b60a180546001600160a01b0319166001600160a01b0392909216919091179055565b6107d1610af5565b80516001600160a01b03161561080d5760006107ec82610b3b565b90508061080b5760405162461bcd60e51b81526004016103e8906128ee565b505b600080600061081d876000610fff565b92509250925061082a3390565b6001600160a01b03167fc5dd8c21802b423a9c822ee9c934f042186e6bb7097a1dd17717343ee84df71484604051610866911515815260200190565b60405180910390a26108788287611d07565b6108828186611d07565b61088a611d32565b50505050505050565b61089b6109c0565b609f80546001600160a01b0319166001600160a01b0392909216919091179055565b6108c56109c0565b6001600160a01b03811661092a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103e8565b61093381610a66565b50565b600054610100900460ff166105c25760405162461bcd60e51b81526004016103e89061297a565b600054610100900460ff166109845760405162461bcd60e51b81526004016103e89061297a565b6105c233610a66565b600054610100900460ff166109b45760405162461bcd60e51b81526004016103e89061297a565b6065805460ff19169055565b6033546001600160a01b031633146105c25760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103e8565b610a22611d43565b6065805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b604051610a5c91906126eb565b60405180910390a1565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b610ac0610af5565b6065805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610a4f3390565b60655460ff16156105c25760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016103e8565b60a15481516000916001600160a01b03169063776062c3903360608601516040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301523060448301526064820152608401600060405180830381600087803b158015610bae57600080fd5b505af1158015610bc2573d6000803e3d6000fd5b5050835160a054604051636eb1769f60e11b81526001600160a01b039182166004820152306024820152600094509116915063dd62ed3e9060440160206040518083038186803b158015610c1557600080fd5b505afa158015610c29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c4d91906129c5565b90508260600151811015610ce557825160a05460405163095ea7b360e01b81526001600160a01b039182166004820152600019602482015291169063095ea7b390604401602060405180830381600087803b158015610cab57600080fd5b505af1158015610cbf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce391906129e9565b505b604080516101008101825284516001600160a01b039081168252609f54811660208301908152610bb883850190815230606080860191825242608087019081528a88015160a0808901918252928c015160c08901908152600060e08a0190815293549951631b67c43360e31b8152895189166004820152965188166024880152945162ffffff166044870152925186166064860152516084850152905160a4840152905160c483015251821660e48201529192169063db3e21989061010401602060405180830381600087803b158015610dbe57600080fd5b505af1925050508015610dee575060408051601f3d908101601f19168201909252610deb918101906129c5565b60015b610dfc575060009392505050565b5060a060009054906101000a90046001600160a01b03166001600160a01b03166312210e8a6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610e4d57600080fd5b505af1158015610e61573d6000803e3d6000fd5b50505050836080015115610ed957609f546040808601519051632e1a7d4d60e01b81526001600160a01b0390921691632e1a7d4d91610ea69160040190815260200190565b600060405180830381600087803b158015610ec057600080fd5b505af1158015610ed4573d6000803e3d6000fd5b505050505b83516040516370a0823160e01b81526000916001600160a01b0316906370a0823190610f099030906004016126eb565b60206040518083038186803b158015610f2157600080fd5b505afa158015610f35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f5991906129c5565b90508015610ff45784516001600160a01b031663a9059cbb336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101849052604401602060405180830381600087803b158015610fba57600080fd5b505af1158015610fce573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ff291906129e9565b505b506001949350505050565b600080600080600061101e876060015188604001518960000151611d8c565b6020890151919350915060028851600781111561103d5761103d612a06565b141561111a57609a546040516000916001600160a01b0316908390611063908790612a48565b60006040518083038185875af1925050503d80600081146110a0576040519150601f19603f3d011682016040523d82523d6000602084013e6110a5565b606091505b5050905087156110cd57806110c857600080600096509650965050505050611d00565b611114565b806111145760405162461bcd60e51b8152602060048201526017602482015276141d5c98da185cd94814d9585c1bdc9d0819985a5b1959604a1b60448201526064016103e8565b50611cce565b60018851600781111561112f5761112f612a06565b1415611200576099546040516000916001600160a01b0316908390611155908790612a48565b60006040518083038185875af1925050503d8060008114611192576040519150601f19603f3d011682016040523d82523d6000602084013e611197565b606091505b5050905087156111ba57806110c857600080600096509650965050505050611d00565b806111145760405162461bcd60e51b8152602060048201526016602482015275141d5c98da185cd94815de5d995c9b8819985a5b195960521b60448201526064016103e8565b60068851600781111561121557611215612a06565b14156112ed576097546040516000916001600160a01b031690839061123b908790612a48565b60006040518083038185875af1925050503d8060008114611278576040519150601f19603f3d011682016040523d82523d6000602084013e61127d565b606091505b5050905087156112a057806110c857600080600096509650965050505050611d00565b806111145760405162461bcd60e51b815260206004820152601b60248201527f50757263686173652047686f73744d61726b6574206661696c6564000000000060448201526064016103e8565b60008851600781111561130257611302612a06565b14156113d4576098546040516000916001600160a01b0316908390611328908790612a48565b60006040518083038185875af1925050503d8060008114611365576040519150601f19603f3d011682016040523d82523d6000602084013e61136a565b606091505b50509050871561138d57806110c857600080600096509650965050505050611d00565b806111145760405162461bcd60e51b8152602060048201526017602482015276141d5c98da185cd94814985c9a589b194819985a5b1959604a1b60448201526064016103e8565b6003885160078111156113e9576113e9612a06565b141561187c576000838060200190518101906114059190612f60565b9050871561148757609b5460405163357a150b60e01b81526001600160a01b039091169063357a150b90849061143f908590600401613212565b6000604051808303818588803b15801561145857600080fd5b505af19350505050801561146a575060015b61148257600080600096509650965050505050611d00565b6114ec565b609b5460405163357a150b60e01b81526001600160a01b039091169063357a150b9084906114b9908590600401613212565b6000604051808303818588803b1580156114d257600080fd5b505af11580156114e6573d6000803e3d6000fd5b50505050505b60208101515160005b81811015611874576000836020015182815181106115155761151561291b565b602002602001015160200151905060008460200151838151811061153b5761153b61291b565b60200260200101516040015190506000856000015183815181106115615761156161291b565b60200260200101516101000151828151811061157f5761157f61291b565b60200260200101516020015190506000866000015184815181106115a5576115a561291b565b602002602001015160e00151511180156115e157506000866020015185815181106115d2576115d261291b565b602002602001015160c0015151115b156116335761163381876020015186815181106116005761160061291b565b602002602001015160c00151886000015186815181106116225761162261291b565b602002602001015160e00151611e87565b85518051849081106116475761164761291b565b602002602001015160800151600114156117285760008180602001905181019061167191906133ce565b905060005b81518110156117215760008282815181106116935761169361291b565b6020026020010151905080600001516001600160a01b03166342842e0e306116b83390565b84602001516040518463ffffffff1660e01b81526004016116db9392919061348c565b600060405180830381600087803b1580156116f557600080fd5b505af1158015611709573d6000803e3d6000fd5b505050505080806117199061295f565b915050611676565b5050611860565b855180518490811061173c5761173c61291b565b6020026020010151608001516002141561181c5760008180602001905181019061176691906134b0565b905060005b81518110156117215760008282815181106117885761178861291b565b6020026020010151905080600001516001600160a01b031663f242432a306117ad3390565b846020015185604001516040518563ffffffff1660e01b81526004016117d69493929190613576565b600060405180830381600087803b1580156117f057600080fd5b505af1158015611804573d6000803e3d6000fd5b505050505080806118149061295f565b91505061176b565b60405162461bcd60e51b81526020600482015260196024820152783ab735b737bbb7103232b632b3b0ba32aa3cb832903c193c9960391b60448201526064016103e8565b5050508061186d9061295f565b90506114f5565b505050611cce565b60048851600781111561189157611891612a06565b1415611abd576000806000858060200190518101906118b091906136cc565b925092509250891561193a57609c54604051635a72594b60e11b81526001600160a01b039091169063b4e4b2969086906118f090879087906004016137b4565b6000604051808303818588803b15801561190957600080fd5b505af19350505050801561191b575060015b611935576000806000985098509850505050505050611d00565b6119a1565b609c54604051635a72594b60e11b81526001600160a01b039091169063b4e4b29690869061196e90879087906004016137b4565b6000604051808303818588803b15801561198757600080fd5b505af115801561199b573d6000803e3d6000fd5b50505050505b6001600160e01b031981166339d690a360e11b1415611a295760408201516001600160a01b03166342842e0e303385608001516040518463ffffffff1660e01b81526004016119f29392919061348c565b600060405180830381600087803b158015611a0c57600080fd5b505af1158015611a20573d6000803e3d6000fd5b50505050611874565b6001600160e01b0319811663025ceed960e61b1415611a8057604082810151608084015160a08501519251637921219560e11b81526001600160a01b039092169263f242432a926119f29230923392600401613576565b60405162461bcd60e51b8152602060048201526012602482015271556e6b6e6f776e20746f6b656e207479706560701b60448201526064016103e8565b600588516007811115611ad257611ad2612a06565b1415611ba557609d546040516000916001600160a01b0316908390611af8908790612a48565b60006040518083038185875af1925050503d8060008114611b35576040519150601f19603f3d011682016040523d82523d6000602084013e611b3a565b606091505b505090508715611b5d57806110c857600080600096509650965050505050611d00565b806111145760405162461bcd60e51b8152602060048201526018602482015277141d5c98da185cd94814dd591bd4ddd85c0819985a5b195960421b60448201526064016103e8565b600788516007811115611bba57611bba612a06565b1415611c8b57609e546040516000916001600160a01b0316908390611be0908790612a48565b60006040518083038185875af1925050503d8060008114611c1d576040519150601f19603f3d011682016040523d82523d6000602084013e611c22565b606091505b505090508715611c4557806110c857600080600096509650965050505050611d00565b806111145760405162461bcd60e51b8152602060048201526016602482015275141d5c98da185cd948189b1d5c9a5bc819985a5b195960521b60448201526064016103e8565b60405162461bcd60e51b8152602060048201526018602482015277556e6b6e6f776e2070757263686173652064657461696c7360401b60448201526064016103e8565b611cdc828960200151611f34565b600080611cf18a604001518b60200151611fde565b60019950909750955050505050505b9250925092565b600082118015611d1f57506001600160a01b03811615155b15611d2e57611d2e818361200f565b5050565b47801561093357610933338261200f565b60655460ff166105c25760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016103e8565b6060806000602085901c61ffff166001811115611dab57611dab612a06565b905060606000826001811115611dc357611dc3612a06565b1415611dd5578693509150611e7f9050565b6001826001811115611de957611de9612a06565b1415611e3757600087806020019051810190611e05919061390e565b9050611e10866120c8565b15611e2b578060000151816020015194509450505050611e7f565b5193509150611e7f9050565b60405162461bcd60e51b815260206004820152601a60248201527f756e6b6e6f776e206164646974696f6e616c446174615479706500000000000060448201526064016103e8565b935093915050565b8151835114611e9557600080fd5b8051835114611ea357600080fd5b825160005b81811015611f2d57828181518110611ec257611ec261291b565b01602001516001600160f81b03191615611f1d57838181518110611ee857611ee861291b565b602001015160f81c60f81b858281518110611f0557611f0561291b565b60200101906001600160f81b031916908160001a9053505b611f268161295f565b9050611ea8565b5050505050565b815160005b81811015611fd8576000848281518110611f5557611f5561291b565b60200260200101511115611fc8576000848281518110611f7757611f7761291b565b60200260200101519050600060a0868481518110611f9757611f9761291b565b6020026020010151901c90506000611fb8828761211090919063ffffffff16565b9050611fc48184611d07565b5050505b611fd18161295f565b9050611f39565b50505050565b60008061ffff601085901c8116908516611ff88583612110565b6120028683612110565b9350935050509250929050565b6000826001600160a01b03168260405160006040518083038185875af1925050503d806000811461205c576040519150601f19603f3d011682016040523d82523d6000602084013e612061565b606091505b50509050806120c35760405162461bcd60e51b815260206004820152602860248201527f4c69625472616e73666572204261736543757272656e6379207472616e7366656044820152671c8819985a5b195960c21b60648201526084016103e8565b505050565b600060058260078111156120de576120de612a06565b14806120fb575060048260078111156120f9576120f9612a06565b145b1561210857506001919050565b506000919050565b600061271061211f83856139f6565b6121299190613a15565b9392505050565b6001600160a01b038116811461093357600080fd5b803561215081612130565b919050565b60008060008060008060008060008060006101608c8e03121561217757600080fd5b8b3561218281612130565b9a5060208c013561219281612130565b995060408c01356121a281612130565b985060608c01356121b281612130565b975060808c01356121c281612130565b965060a08c01356121d281612130565b955060c08c01356121e281612130565b945060e08c01356121f281612130565b93506101008c013561220381612130565b92506122126101208d01612145565b91506122216101408d01612145565b90509295989b509295989b9093969950565b6001600160e01b03198116811461093357600080fd5b60006020828403121561225b57600080fd5b813561212981612233565b60006020828403121561227857600080fd5b813561212981612130565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b03811182821017156122bb576122bb612283565b60405290565b6040516101a081016001600160401b03811182821017156122bb576122bb612283565b60405161016081016001600160401b03811182821017156122bb576122bb612283565b60405160c081016001600160401b03811182821017156122bb576122bb612283565b604051606081016001600160401b03811182821017156122bb576122bb612283565b60405161020081016001600160401b03811182821017156122bb576122bb612283565b604051601f8201601f191681016001600160401b038111828210171561239657612396612283565b604052919050565b60006001600160401b038211156123b7576123b7612283565b50601f01601f191660200190565b600082601f8301126123d657600080fd5b81356123e96123e48261239e565b61236e565b8181528460208386010111156123fe57600080fd5b816020850160208301376000918101602001919091529392505050565b6000806000806080858703121561243157600080fd5b843561243c81612130565b9350602085013561244c81612130565b92506040850135915060608501356001600160401b0381111561246e57600080fd5b61247a878288016123c5565b91505092959194509250565b60006001600160401b0382111561249f5761249f612283565b5060051b60200190565b6008811061093357600080fd5b6000608082840312156124c857600080fd5b604051608081016001600160401b0382821081831117156124eb576124eb612283565b81604052829350843591506124ff826124a9565b8183526020850135602084015260408501356040840152606085013591508082111561252a57600080fd5b50612537858286016123c5565b6060830152505092915050565b801515811461093357600080fd5b803561215081612544565b600060a0828403121561256f57600080fd5b60405160a081018181106001600160401b038211171561259157612591612283565b60405290508082356125a281612130565b815260208301356125b281612130565b80602083015250604083013560408201526060830135606082015260808301356125db81612544565b6080919091015292915050565b6000806000806000610120868803121561260157600080fd5b85356001600160401b038082111561261857600080fd5b818801915088601f83011261262c57600080fd5b8135602061263c6123e483612486565b82815260059290921b8401810191818101908c84111561265b57600080fd5b8286015b84811015612693578035868111156126775760008081fd5b6126858f86838b01016124b6565b84525091830191830161265f565b5099506126a390508a8201612145565b9750505050506126b560408701612145565b92506126c360608701612552565b91506126d2876080880161255d565b90509295509295909350565b6001600160a01b03169052565b6001600160a01b0391909116815260200190565b600080600080610100858703121561271657600080fd5b84356001600160401b0381111561272c57600080fd5b612738878288016124b6565b945050602085013561274981612130565b9250604085013561275981612130565b9150612768866060870161255d565b905092959194509250565b600082601f83011261278457600080fd5b813560206127946123e483612486565b82815260059290921b840181019181810190868411156127b357600080fd5b8286015b848110156127ce57803583529183019183016127b7565b509695505050505050565b600080600080600060a086880312156127f157600080fd5b85356127fc81612130565b9450602086013561280c81612130565b935060408601356001600160401b038082111561282857600080fd5b61283489838a01612773565b9450606088013591508082111561284a57600080fd5b61285689838a01612773565b9350608088013591508082111561286c57600080fd5b50612879888289016123c5565b9150509295509295909350565b600080600080600060a0868803121561289e57600080fd5b85356128a981612130565b945060208601356128b981612130565b9350604086013592506060860135915060808601356001600160401b038111156128e257600080fd5b612879888289016123c5565b6020808252601390820152721cddd85c081b9bdd081cdd58d8d95cdcd99d5b606a1b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000821982111561295a5761295a612931565b500190565b600060001982141561297357612973612931565b5060010190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6000602082840312156129d757600080fd5b5051919050565b805161215081612544565b6000602082840312156129fb57600080fd5b815161212981612544565b634e487b7160e01b600052602160045260246000fd5b60005b83811015612a37578181015183820152602001612a1f565b83811115611fd85750506000910152565b60008251612a5a818460208701612a1c565b9190910192915050565b805161215081612130565b600082601f830112612a8057600080fd5b8151612a8e6123e48261239e565b818152846020838601011115612aa357600080fd5b612ab4826020830160208701612a1c565b949350505050565b600082601f830112612acd57600080fd5b81516020612add6123e483612486565b82815260059290921b84018101918181019086841115612afc57600080fd5b8286015b848110156127ce5780516001600160401b0380821115612b205760008081fd5b908801906040828b03601f1901811315612b3a5760008081fd5b612b42612299565b838801518152908301519082821115612b5b5760008081fd5b612b698c8984870101612a6f565b818901528652505050918301918301612b00565b805160ff8116811461215057600080fd5b600082601f830112612b9f57600080fd5b81516020612baf6123e483612486565b82815260059290921b84018101918181019086841115612bce57600080fd5b8286015b848110156127ce5780516001600160401b0380821115612bf25760008081fd5b908801906101a0828b03601f1901811315612c0d5760008081fd5b612c156122c1565b8784015181526040612c28818601612a64565b89830152606080860151828401526080915081860151818401525060a0808601518284015260c0915081860151818401525060e0612c67818701612a64565b8284015261010091508186015185811115612c825760008081fd5b612c908f8c838a0101612a6f565b8285015250506101208086015185811115612cab5760008081fd5b612cb98f8c838a0101612abc565b838501525061014094508486015181840152505061016080850151848301526101809350612ce8848601612b7d565b90820152612cf7848301612b7d565b9281019290925250845250918301918301612bd2565b8051612150816124a9565b600082601f830112612d2957600080fd5b81516020612d396123e483612486565b82815260069290921b84018101918181019086841115612d5857600080fd5b8286015b848110156127ce5760408189031215612d755760008081fd5b612d7d612299565b8151815284820151612d8e81612130565b81860152835291830191604001612d5c565b600082601f830112612db157600080fd5b81516020612dc16123e483612486565b82815260059290921b84018101918181019086841115612de057600080fd5b8286015b848110156127ce5780516001600160401b0380821115612e045760008081fd5b90880190610160828b03601f1901811315612e1f5760008081fd5b612e276122e4565b612e32888501612d0d565b815260408085015189830152606080860151828401526080915081860151818401525060a0808601518284015260c09150612e6e828701612a64565b9083015260e08581015185811115612e865760008081fd5b612e948f8c838a0101612a6f565b838501525061010091508186015181840152506101208086015182840152610140915081860151818401525082850151925083831115612ed45760008081fd5b612ee28d8a85880101612d18565b908201528652505050918301918301612de4565b600060c08284031215612f0857600080fd5b612f10612307565b9050815181526020820151602082015260408201516040820152606082015160608201526080820151612f4281612130565b608082015260a0820151612f5581612544565b60a082015292915050565b600060208284031215612f7257600080fd5b81516001600160401b0380821115612f8957600080fd5b908301906101608286031215612f9e57600080fd5b612fa6612307565b825182811115612fb557600080fd5b612fc187828601612b8e565b825250602083015182811115612fd657600080fd5b612fe287828601612da0565b602083015250612ff58660408501612ef6565b60408201526101008301516060820152610120830151608082015261301d6101408401612b7d565b60a082015295945050505050565b60008151808452613043816020860160208601612a1c565b601f01601f19169290920160200192915050565b600081518084526020808501808196508360051b8101915082860160005b858110156130b3578284038952815180518552850151604086860181905261309f8187018361302b565b9a87019a9550505090840190600101613075565b5091979650505050505050565b600881106130de57634e487b7160e01b600052602160045260246000fd5b9052565b600081518084526020808501945080840160005b83811015613126578151805188528301516001600160a01b031683880152604090960195908201906001016130f6565b509495945050505050565b600081518084526020808501808196508360051b8101915082860160005b858110156130b3578284038952815161016061316c8683516130c0565b818701518688015260408083015190870152606080830151908701526080808301519087015260a0808301516131a4828901826126de565b505060c08083015182828901526131bd8389018261302b565b60e085810151908a015261010080860151908a015261012080860151908a015261014094850151898203958a019590955292506131fe9150829050836130e2565b9a87019a955050509084019060010161314f565b60006020808352610180808401855161016080858801528282518085526101a094508489019150848160051b8a0101878501945060005b8281101561332d578a820361019f19018452855180518352898101516132718b8501826126de565b5060408181015190840152606080820151908401526080808201519084015260a0808201519084015260c0808201516132ac828601826126de565b505060e08082015189828601526132c58a86018261302b565b91505061010080830151858303828701526132e08382613057565b925050506101208083015181860152506101408083015181860152508682015161330e8886018260ff169052565b509089015160ff16928901929092529488019492880192600101613249565b50968a0151898803601f190160408b0152966133498189613131565b97505050506040880151935061339f6060880185805182526020808201519083015260408082015190830152606080820151908301526080808201516001600160a01b03169083015260a0908101511515910152565b6060880151610120880152608088015161014088015260a09097015160ff169690950195909552509392505050565b600060208083850312156133e157600080fd5b82516001600160401b038111156133f757600080fd5b8301601f8101851361340857600080fd5b80516134166123e482612486565b81815260069190911b8201830190838101908783111561343557600080fd5b928401925b8284101561348157604084890312156134535760008081fd5b61345b612299565b845161346681612130565b8152848601518682015282526040909301929084019061343a565b979650505050505050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b600060208083850312156134c357600080fd5b82516001600160401b038111156134d957600080fd5b8301601f810185136134ea57600080fd5b80516134f86123e482612486565b8181526060918202830184019184820191908884111561351757600080fd5b938501935b8385101561356a5780858a0312156135345760008081fd5b61353c612329565b855161354781612130565b81528587015187820152604080870151908201528352938401939185019161351c565b50979650505050505050565b6001600160a01b0394851681529290931660208301526040820152606081019190915260a06080820181905260009082015260c00190565b600061020082840312156135c157600080fd5b6135c961234b565b90506135d4826129de565b81526135e260208301612a64565b60208201526135f360408301612a64565b6040820152606082015160608201526080820151608082015260a082015160a082015261362260c08301612a64565b60c082015261363360e08301612a64565b60e08201526101008281015190820152610120808301519082015261014080830151908201526101608083015190820152610180808301516001600160401b0381111561367f57600080fd5b61368b85828601612a6f565b8284015250506101a061369f818401612b7d565b908201526101c082810151908201526101e09182015191810191909152919050565b805161215081612233565b6000806000606084860312156136e157600080fd5b83516001600160401b03808211156136f857600080fd5b9085019060c0828803121561370c57600080fd5b613714612307565b825161371f81612544565b8152602083015161372f81612130565b8060208301525060408301516040820152606083015160608201526080830151608082015260a08301518281111561376657600080fd5b61377289828601612a6f565b60a083015250602087015190955091508082111561378f57600080fd5b5061379c868287016135ae565b9250506137ab604085016136c1565b90509250925092565b60408152600061010084511515604084015260018060a01b03602086015116606084015260408501516080840152606085015160a0840152608085015160c084015260a085015160c060e085015261380e8285018261302b565b84810360208601528551151581529050610200602086015161383360208401826126de565b50604086015161384660408401826126de565b50606086015160608301526080860151608083015260a086015160a083015260c086015161387760c08401826126de565b5060e086015161388a60e08401826126de565b508583015192820192909252610120808601519082015261014080860151908201526101608086015190820152610180808601518183018490529092906138d38284018261302b565b935050506101a0808601516138ec8284018260ff169052565b50506101c085810151908201526101e094850151940193909352509092915050565b6000602080838503121561392157600080fd5b82516001600160401b038082111561393857600080fd5b908401906040828703121561394c57600080fd5b613954612299565b82518281111561396357600080fd5b61396f88828601612a6f565b825250838301518281111561398357600080fd5b80840193505086601f84011261399857600080fd5b825191506139a86123e483612486565b82815260059290921b830184019184810190888411156139c757600080fd5b938501935b838510156139e5578451825293850193908501906139cc565b948201949094529695505050505050565b6000816000190483118215151615613a1057613a10612931565b500290565b600082613a3257634e487b7160e01b600052601260045260246000fd5b50049056fea26469706673582212200734c33d1bbb183e66f7103fd0d34c140d31b521d3d8dfd2d21a11542682daa764736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106100ed5760003560e01c80638456cb59116100855780638456cb591461023657806388aaceee1461024b5780638ae429051461025e5780638da5cb5b1461027e5780639b7c0735146102a4578063b8d1452f146102b7578063bc197c81146102d7578063f23a6e6114610303578063f2fde38b1461032f57600080fd5b8063018249f1146100f957806301ffc9a71461011b57806308b1571d14610150578063150b7a02146101705780633f4ba83a146101b457806359e86829146101c95780635c975abb146101e9578063715018a6146102015780637908716c1461021657600080fd5b366100f457005b600080fd5b34801561010557600080fd5b50610119610114366004612155565b61034f565b005b34801561012757600080fd5b5061013b610136366004612249565b610551565b60405190151581526020015b60405180910390f35b34801561015c57600080fd5b5061011961016b366004612266565b610588565b34801561017c57600080fd5b5061019b61018b36600461241b565b630a85bd0160e11b949350505050565b6040516001600160e01b03199091168152602001610147565b3480156101c057600080fd5b506101196105b2565b3480156101d557600080fd5b506101196101e4366004612266565b6105c4565b3480156101f557600080fd5b5060655460ff1661013b565b34801561020d57600080fd5b506101196105ee565b34801561022257600080fd5b50610119610231366004612266565b610600565b34801561024257600080fd5b5061011961062a565b6101196102593660046125e8565b61063a565b34801561026a57600080fd5b50610119610279366004612266565b61079f565b34801561028a57600080fd5b506033546001600160a01b031660405161014791906126eb565b6101196102b23660046126ff565b6107c9565b3480156102c357600080fd5b506101196102d2366004612266565b610893565b3480156102e357600080fd5b5061019b6102f23660046127d9565b63bc197c8160e01b95945050505050565b34801561030f57600080fd5b5061019b61031e366004612886565b63f23a6e6160e01b95945050505050565b34801561033b57600080fd5b5061011961034a366004612266565b6108bd565b600054610100900460ff161580801561036f5750600054600160ff909116105b806103895750303b158015610389575060005460ff166001145b6103f15760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff191660011790558015610414576000805461ff0019166101001790555b61041c610936565b61042461095d565b61042c61098d565b6104fd8c8c8c8c8c8c8c8c8c8c8c609780546001600160a01b039c8d166001600160a01b031991821617909155609880549b8d169b82169b909b17909a5560998054998c16998b1699909917909855609a8054978b16978a1697909717909655609b8054958a1695891695909517909455609c805493891693881693909317909255609d8054918816918716919091179055609e8054918716918616919091179055609f805491861691851691909117905560a0805491851691841691909117905560a18054919093169116179055565b8015610543576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050505050505050565b60006001600160e01b03198216630271189760e51b148061058257506301ffc9a760e01b6001600160e01b03198316145b92915050565b6105906109c0565b609e80546001600160a01b0319166001600160a01b0392909216919091179055565b6105ba6109c0565b6105c2610a1a565b565b6105cc6109c0565b60a080546001600160a01b0319166001600160a01b0392909216919091179055565b6105f66109c0565b6105c26000610a66565b6106086109c0565b609880546001600160a01b0319166001600160a01b0392909216919091179055565b6106326109c0565b6105c2610ab8565b610642610af5565b8051600090819081906001600160a01b03161561068557600061066485610b3b565b9050806106835760405162461bcd60e51b81526004016103e8906128ee565b505b875160005b8181101561072f5760008060006106ba8d85815181106106ac576106ac61291b565b60200260200101518b610fff565b92509250925085806106c95750825b604051841515815290965033907fc5dd8c21802b423a9c822ee9c934f042186e6bb7097a1dd17717343ee84df7149060200160405180910390a261070d8289612947565b97506107198188612947565b9650505050806107289061295f565b905061068a565b50816107785760405162461bcd60e51b81526020600482015260186024820152776e6f207375636365737366756c20657865637574696f6e7360401b60448201526064016103e8565b6107828489611d07565b61078c8388611d07565b610794611d32565b505050505050505050565b6107a76109c0565b60a180546001600160a01b0319166001600160a01b0392909216919091179055565b6107d1610af5565b80516001600160a01b03161561080d5760006107ec82610b3b565b90508061080b5760405162461bcd60e51b81526004016103e8906128ee565b505b600080600061081d876000610fff565b92509250925061082a3390565b6001600160a01b03167fc5dd8c21802b423a9c822ee9c934f042186e6bb7097a1dd17717343ee84df71484604051610866911515815260200190565b60405180910390a26108788287611d07565b6108828186611d07565b61088a611d32565b50505050505050565b61089b6109c0565b609f80546001600160a01b0319166001600160a01b0392909216919091179055565b6108c56109c0565b6001600160a01b03811661092a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103e8565b61093381610a66565b50565b600054610100900460ff166105c25760405162461bcd60e51b81526004016103e89061297a565b600054610100900460ff166109845760405162461bcd60e51b81526004016103e89061297a565b6105c233610a66565b600054610100900460ff166109b45760405162461bcd60e51b81526004016103e89061297a565b6065805460ff19169055565b6033546001600160a01b031633146105c25760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103e8565b610a22611d43565b6065805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b604051610a5c91906126eb565b60405180910390a1565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b610ac0610af5565b6065805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610a4f3390565b60655460ff16156105c25760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016103e8565b60a15481516000916001600160a01b03169063776062c3903360608601516040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301523060448301526064820152608401600060405180830381600087803b158015610bae57600080fd5b505af1158015610bc2573d6000803e3d6000fd5b5050835160a054604051636eb1769f60e11b81526001600160a01b039182166004820152306024820152600094509116915063dd62ed3e9060440160206040518083038186803b158015610c1557600080fd5b505afa158015610c29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c4d91906129c5565b90508260600151811015610ce557825160a05460405163095ea7b360e01b81526001600160a01b039182166004820152600019602482015291169063095ea7b390604401602060405180830381600087803b158015610cab57600080fd5b505af1158015610cbf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce391906129e9565b505b604080516101008101825284516001600160a01b039081168252609f54811660208301908152610bb883850190815230606080860191825242608087019081528a88015160a0808901918252928c015160c08901908152600060e08a0190815293549951631b67c43360e31b8152895189166004820152965188166024880152945162ffffff166044870152925186166064860152516084850152905160a4840152905160c483015251821660e48201529192169063db3e21989061010401602060405180830381600087803b158015610dbe57600080fd5b505af1925050508015610dee575060408051601f3d908101601f19168201909252610deb918101906129c5565b60015b610dfc575060009392505050565b5060a060009054906101000a90046001600160a01b03166001600160a01b03166312210e8a6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610e4d57600080fd5b505af1158015610e61573d6000803e3d6000fd5b50505050836080015115610ed957609f546040808601519051632e1a7d4d60e01b81526001600160a01b0390921691632e1a7d4d91610ea69160040190815260200190565b600060405180830381600087803b158015610ec057600080fd5b505af1158015610ed4573d6000803e3d6000fd5b505050505b83516040516370a0823160e01b81526000916001600160a01b0316906370a0823190610f099030906004016126eb565b60206040518083038186803b158015610f2157600080fd5b505afa158015610f35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f5991906129c5565b90508015610ff45784516001600160a01b031663a9059cbb336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101849052604401602060405180830381600087803b158015610fba57600080fd5b505af1158015610fce573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ff291906129e9565b505b506001949350505050565b600080600080600061101e876060015188604001518960000151611d8c565b6020890151919350915060028851600781111561103d5761103d612a06565b141561111a57609a546040516000916001600160a01b0316908390611063908790612a48565b60006040518083038185875af1925050503d80600081146110a0576040519150601f19603f3d011682016040523d82523d6000602084013e6110a5565b606091505b5050905087156110cd57806110c857600080600096509650965050505050611d00565b611114565b806111145760405162461bcd60e51b8152602060048201526017602482015276141d5c98da185cd94814d9585c1bdc9d0819985a5b1959604a1b60448201526064016103e8565b50611cce565b60018851600781111561112f5761112f612a06565b1415611200576099546040516000916001600160a01b0316908390611155908790612a48565b60006040518083038185875af1925050503d8060008114611192576040519150601f19603f3d011682016040523d82523d6000602084013e611197565b606091505b5050905087156111ba57806110c857600080600096509650965050505050611d00565b806111145760405162461bcd60e51b8152602060048201526016602482015275141d5c98da185cd94815de5d995c9b8819985a5b195960521b60448201526064016103e8565b60068851600781111561121557611215612a06565b14156112ed576097546040516000916001600160a01b031690839061123b908790612a48565b60006040518083038185875af1925050503d8060008114611278576040519150601f19603f3d011682016040523d82523d6000602084013e61127d565b606091505b5050905087156112a057806110c857600080600096509650965050505050611d00565b806111145760405162461bcd60e51b815260206004820152601b60248201527f50757263686173652047686f73744d61726b6574206661696c6564000000000060448201526064016103e8565b60008851600781111561130257611302612a06565b14156113d4576098546040516000916001600160a01b0316908390611328908790612a48565b60006040518083038185875af1925050503d8060008114611365576040519150601f19603f3d011682016040523d82523d6000602084013e61136a565b606091505b50509050871561138d57806110c857600080600096509650965050505050611d00565b806111145760405162461bcd60e51b8152602060048201526017602482015276141d5c98da185cd94814985c9a589b194819985a5b1959604a1b60448201526064016103e8565b6003885160078111156113e9576113e9612a06565b141561187c576000838060200190518101906114059190612f60565b9050871561148757609b5460405163357a150b60e01b81526001600160a01b039091169063357a150b90849061143f908590600401613212565b6000604051808303818588803b15801561145857600080fd5b505af19350505050801561146a575060015b61148257600080600096509650965050505050611d00565b6114ec565b609b5460405163357a150b60e01b81526001600160a01b039091169063357a150b9084906114b9908590600401613212565b6000604051808303818588803b1580156114d257600080fd5b505af11580156114e6573d6000803e3d6000fd5b50505050505b60208101515160005b81811015611874576000836020015182815181106115155761151561291b565b602002602001015160200151905060008460200151838151811061153b5761153b61291b565b60200260200101516040015190506000856000015183815181106115615761156161291b565b60200260200101516101000151828151811061157f5761157f61291b565b60200260200101516020015190506000866000015184815181106115a5576115a561291b565b602002602001015160e00151511180156115e157506000866020015185815181106115d2576115d261291b565b602002602001015160c0015151115b156116335761163381876020015186815181106116005761160061291b565b602002602001015160c00151886000015186815181106116225761162261291b565b602002602001015160e00151611e87565b85518051849081106116475761164761291b565b602002602001015160800151600114156117285760008180602001905181019061167191906133ce565b905060005b81518110156117215760008282815181106116935761169361291b565b6020026020010151905080600001516001600160a01b03166342842e0e306116b83390565b84602001516040518463ffffffff1660e01b81526004016116db9392919061348c565b600060405180830381600087803b1580156116f557600080fd5b505af1158015611709573d6000803e3d6000fd5b505050505080806117199061295f565b915050611676565b5050611860565b855180518490811061173c5761173c61291b565b6020026020010151608001516002141561181c5760008180602001905181019061176691906134b0565b905060005b81518110156117215760008282815181106117885761178861291b565b6020026020010151905080600001516001600160a01b031663f242432a306117ad3390565b846020015185604001516040518563ffffffff1660e01b81526004016117d69493929190613576565b600060405180830381600087803b1580156117f057600080fd5b505af1158015611804573d6000803e3d6000fd5b505050505080806118149061295f565b91505061176b565b60405162461bcd60e51b81526020600482015260196024820152783ab735b737bbb7103232b632b3b0ba32aa3cb832903c193c9960391b60448201526064016103e8565b5050508061186d9061295f565b90506114f5565b505050611cce565b60048851600781111561189157611891612a06565b1415611abd576000806000858060200190518101906118b091906136cc565b925092509250891561193a57609c54604051635a72594b60e11b81526001600160a01b039091169063b4e4b2969086906118f090879087906004016137b4565b6000604051808303818588803b15801561190957600080fd5b505af19350505050801561191b575060015b611935576000806000985098509850505050505050611d00565b6119a1565b609c54604051635a72594b60e11b81526001600160a01b039091169063b4e4b29690869061196e90879087906004016137b4565b6000604051808303818588803b15801561198757600080fd5b505af115801561199b573d6000803e3d6000fd5b50505050505b6001600160e01b031981166339d690a360e11b1415611a295760408201516001600160a01b03166342842e0e303385608001516040518463ffffffff1660e01b81526004016119f29392919061348c565b600060405180830381600087803b158015611a0c57600080fd5b505af1158015611a20573d6000803e3d6000fd5b50505050611874565b6001600160e01b0319811663025ceed960e61b1415611a8057604082810151608084015160a08501519251637921219560e11b81526001600160a01b039092169263f242432a926119f29230923392600401613576565b60405162461bcd60e51b8152602060048201526012602482015271556e6b6e6f776e20746f6b656e207479706560701b60448201526064016103e8565b600588516007811115611ad257611ad2612a06565b1415611ba557609d546040516000916001600160a01b0316908390611af8908790612a48565b60006040518083038185875af1925050503d8060008114611b35576040519150601f19603f3d011682016040523d82523d6000602084013e611b3a565b606091505b505090508715611b5d57806110c857600080600096509650965050505050611d00565b806111145760405162461bcd60e51b8152602060048201526018602482015277141d5c98da185cd94814dd591bd4ddd85c0819985a5b195960421b60448201526064016103e8565b600788516007811115611bba57611bba612a06565b1415611c8b57609e546040516000916001600160a01b0316908390611be0908790612a48565b60006040518083038185875af1925050503d8060008114611c1d576040519150601f19603f3d011682016040523d82523d6000602084013e611c22565b606091505b505090508715611c4557806110c857600080600096509650965050505050611d00565b806111145760405162461bcd60e51b8152602060048201526016602482015275141d5c98da185cd948189b1d5c9a5bc819985a5b195960521b60448201526064016103e8565b60405162461bcd60e51b8152602060048201526018602482015277556e6b6e6f776e2070757263686173652064657461696c7360401b60448201526064016103e8565b611cdc828960200151611f34565b600080611cf18a604001518b60200151611fde565b60019950909750955050505050505b9250925092565b600082118015611d1f57506001600160a01b03811615155b15611d2e57611d2e818361200f565b5050565b47801561093357610933338261200f565b60655460ff166105c25760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016103e8565b6060806000602085901c61ffff166001811115611dab57611dab612a06565b905060606000826001811115611dc357611dc3612a06565b1415611dd5578693509150611e7f9050565b6001826001811115611de957611de9612a06565b1415611e3757600087806020019051810190611e05919061390e565b9050611e10866120c8565b15611e2b578060000151816020015194509450505050611e7f565b5193509150611e7f9050565b60405162461bcd60e51b815260206004820152601a60248201527f756e6b6e6f776e206164646974696f6e616c446174615479706500000000000060448201526064016103e8565b935093915050565b8151835114611e9557600080fd5b8051835114611ea357600080fd5b825160005b81811015611f2d57828181518110611ec257611ec261291b565b01602001516001600160f81b03191615611f1d57838181518110611ee857611ee861291b565b602001015160f81c60f81b858281518110611f0557611f0561291b565b60200101906001600160f81b031916908160001a9053505b611f268161295f565b9050611ea8565b5050505050565b815160005b81811015611fd8576000848281518110611f5557611f5561291b565b60200260200101511115611fc8576000848281518110611f7757611f7761291b565b60200260200101519050600060a0868481518110611f9757611f9761291b565b6020026020010151901c90506000611fb8828761211090919063ffffffff16565b9050611fc48184611d07565b5050505b611fd18161295f565b9050611f39565b50505050565b60008061ffff601085901c8116908516611ff88583612110565b6120028683612110565b9350935050509250929050565b6000826001600160a01b03168260405160006040518083038185875af1925050503d806000811461205c576040519150601f19603f3d011682016040523d82523d6000602084013e612061565b606091505b50509050806120c35760405162461bcd60e51b815260206004820152602860248201527f4c69625472616e73666572204261736543757272656e6379207472616e7366656044820152671c8819985a5b195960c21b60648201526084016103e8565b505050565b600060058260078111156120de576120de612a06565b14806120fb575060048260078111156120f9576120f9612a06565b145b1561210857506001919050565b506000919050565b600061271061211f83856139f6565b6121299190613a15565b9392505050565b6001600160a01b038116811461093357600080fd5b803561215081612130565b919050565b60008060008060008060008060008060006101608c8e03121561217757600080fd5b8b3561218281612130565b9a5060208c013561219281612130565b995060408c01356121a281612130565b985060608c01356121b281612130565b975060808c01356121c281612130565b965060a08c01356121d281612130565b955060c08c01356121e281612130565b945060e08c01356121f281612130565b93506101008c013561220381612130565b92506122126101208d01612145565b91506122216101408d01612145565b90509295989b509295989b9093969950565b6001600160e01b03198116811461093357600080fd5b60006020828403121561225b57600080fd5b813561212981612233565b60006020828403121561227857600080fd5b813561212981612130565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b03811182821017156122bb576122bb612283565b60405290565b6040516101a081016001600160401b03811182821017156122bb576122bb612283565b60405161016081016001600160401b03811182821017156122bb576122bb612283565b60405160c081016001600160401b03811182821017156122bb576122bb612283565b604051606081016001600160401b03811182821017156122bb576122bb612283565b60405161020081016001600160401b03811182821017156122bb576122bb612283565b604051601f8201601f191681016001600160401b038111828210171561239657612396612283565b604052919050565b60006001600160401b038211156123b7576123b7612283565b50601f01601f191660200190565b600082601f8301126123d657600080fd5b81356123e96123e48261239e565b61236e565b8181528460208386010111156123fe57600080fd5b816020850160208301376000918101602001919091529392505050565b6000806000806080858703121561243157600080fd5b843561243c81612130565b9350602085013561244c81612130565b92506040850135915060608501356001600160401b0381111561246e57600080fd5b61247a878288016123c5565b91505092959194509250565b60006001600160401b0382111561249f5761249f612283565b5060051b60200190565b6008811061093357600080fd5b6000608082840312156124c857600080fd5b604051608081016001600160401b0382821081831117156124eb576124eb612283565b81604052829350843591506124ff826124a9565b8183526020850135602084015260408501356040840152606085013591508082111561252a57600080fd5b50612537858286016123c5565b6060830152505092915050565b801515811461093357600080fd5b803561215081612544565b600060a0828403121561256f57600080fd5b60405160a081018181106001600160401b038211171561259157612591612283565b60405290508082356125a281612130565b815260208301356125b281612130565b80602083015250604083013560408201526060830135606082015260808301356125db81612544565b6080919091015292915050565b6000806000806000610120868803121561260157600080fd5b85356001600160401b038082111561261857600080fd5b818801915088601f83011261262c57600080fd5b8135602061263c6123e483612486565b82815260059290921b8401810191818101908c84111561265b57600080fd5b8286015b84811015612693578035868111156126775760008081fd5b6126858f86838b01016124b6565b84525091830191830161265f565b5099506126a390508a8201612145565b9750505050506126b560408701612145565b92506126c360608701612552565b91506126d2876080880161255d565b90509295509295909350565b6001600160a01b03169052565b6001600160a01b0391909116815260200190565b600080600080610100858703121561271657600080fd5b84356001600160401b0381111561272c57600080fd5b612738878288016124b6565b945050602085013561274981612130565b9250604085013561275981612130565b9150612768866060870161255d565b905092959194509250565b600082601f83011261278457600080fd5b813560206127946123e483612486565b82815260059290921b840181019181810190868411156127b357600080fd5b8286015b848110156127ce57803583529183019183016127b7565b509695505050505050565b600080600080600060a086880312156127f157600080fd5b85356127fc81612130565b9450602086013561280c81612130565b935060408601356001600160401b038082111561282857600080fd5b61283489838a01612773565b9450606088013591508082111561284a57600080fd5b61285689838a01612773565b9350608088013591508082111561286c57600080fd5b50612879888289016123c5565b9150509295509295909350565b600080600080600060a0868803121561289e57600080fd5b85356128a981612130565b945060208601356128b981612130565b9350604086013592506060860135915060808601356001600160401b038111156128e257600080fd5b612879888289016123c5565b6020808252601390820152721cddd85c081b9bdd081cdd58d8d95cdcd99d5b606a1b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000821982111561295a5761295a612931565b500190565b600060001982141561297357612973612931565b5060010190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6000602082840312156129d757600080fd5b5051919050565b805161215081612544565b6000602082840312156129fb57600080fd5b815161212981612544565b634e487b7160e01b600052602160045260246000fd5b60005b83811015612a37578181015183820152602001612a1f565b83811115611fd85750506000910152565b60008251612a5a818460208701612a1c565b9190910192915050565b805161215081612130565b600082601f830112612a8057600080fd5b8151612a8e6123e48261239e565b818152846020838601011115612aa357600080fd5b612ab4826020830160208701612a1c565b949350505050565b600082601f830112612acd57600080fd5b81516020612add6123e483612486565b82815260059290921b84018101918181019086841115612afc57600080fd5b8286015b848110156127ce5780516001600160401b0380821115612b205760008081fd5b908801906040828b03601f1901811315612b3a5760008081fd5b612b42612299565b838801518152908301519082821115612b5b5760008081fd5b612b698c8984870101612a6f565b818901528652505050918301918301612b00565b805160ff8116811461215057600080fd5b600082601f830112612b9f57600080fd5b81516020612baf6123e483612486565b82815260059290921b84018101918181019086841115612bce57600080fd5b8286015b848110156127ce5780516001600160401b0380821115612bf25760008081fd5b908801906101a0828b03601f1901811315612c0d5760008081fd5b612c156122c1565b8784015181526040612c28818601612a64565b89830152606080860151828401526080915081860151818401525060a0808601518284015260c0915081860151818401525060e0612c67818701612a64565b8284015261010091508186015185811115612c825760008081fd5b612c908f8c838a0101612a6f565b8285015250506101208086015185811115612cab5760008081fd5b612cb98f8c838a0101612abc565b838501525061014094508486015181840152505061016080850151848301526101809350612ce8848601612b7d565b90820152612cf7848301612b7d565b9281019290925250845250918301918301612bd2565b8051612150816124a9565b600082601f830112612d2957600080fd5b81516020612d396123e483612486565b82815260069290921b84018101918181019086841115612d5857600080fd5b8286015b848110156127ce5760408189031215612d755760008081fd5b612d7d612299565b8151815284820151612d8e81612130565b81860152835291830191604001612d5c565b600082601f830112612db157600080fd5b81516020612dc16123e483612486565b82815260059290921b84018101918181019086841115612de057600080fd5b8286015b848110156127ce5780516001600160401b0380821115612e045760008081fd5b90880190610160828b03601f1901811315612e1f5760008081fd5b612e276122e4565b612e32888501612d0d565b815260408085015189830152606080860151828401526080915081860151818401525060a0808601518284015260c09150612e6e828701612a64565b9083015260e08581015185811115612e865760008081fd5b612e948f8c838a0101612a6f565b838501525061010091508186015181840152506101208086015182840152610140915081860151818401525082850151925083831115612ed45760008081fd5b612ee28d8a85880101612d18565b908201528652505050918301918301612de4565b600060c08284031215612f0857600080fd5b612f10612307565b9050815181526020820151602082015260408201516040820152606082015160608201526080820151612f4281612130565b608082015260a0820151612f5581612544565b60a082015292915050565b600060208284031215612f7257600080fd5b81516001600160401b0380821115612f8957600080fd5b908301906101608286031215612f9e57600080fd5b612fa6612307565b825182811115612fb557600080fd5b612fc187828601612b8e565b825250602083015182811115612fd657600080fd5b612fe287828601612da0565b602083015250612ff58660408501612ef6565b60408201526101008301516060820152610120830151608082015261301d6101408401612b7d565b60a082015295945050505050565b60008151808452613043816020860160208601612a1c565b601f01601f19169290920160200192915050565b600081518084526020808501808196508360051b8101915082860160005b858110156130b3578284038952815180518552850151604086860181905261309f8187018361302b565b9a87019a9550505090840190600101613075565b5091979650505050505050565b600881106130de57634e487b7160e01b600052602160045260246000fd5b9052565b600081518084526020808501945080840160005b83811015613126578151805188528301516001600160a01b031683880152604090960195908201906001016130f6565b509495945050505050565b600081518084526020808501808196508360051b8101915082860160005b858110156130b3578284038952815161016061316c8683516130c0565b818701518688015260408083015190870152606080830151908701526080808301519087015260a0808301516131a4828901826126de565b505060c08083015182828901526131bd8389018261302b565b60e085810151908a015261010080860151908a015261012080860151908a015261014094850151898203958a019590955292506131fe9150829050836130e2565b9a87019a955050509084019060010161314f565b60006020808352610180808401855161016080858801528282518085526101a094508489019150848160051b8a0101878501945060005b8281101561332d578a820361019f19018452855180518352898101516132718b8501826126de565b5060408181015190840152606080820151908401526080808201519084015260a0808201519084015260c0808201516132ac828601826126de565b505060e08082015189828601526132c58a86018261302b565b91505061010080830151858303828701526132e08382613057565b925050506101208083015181860152506101408083015181860152508682015161330e8886018260ff169052565b509089015160ff16928901929092529488019492880192600101613249565b50968a0151898803601f190160408b0152966133498189613131565b97505050506040880151935061339f6060880185805182526020808201519083015260408082015190830152606080820151908301526080808201516001600160a01b03169083015260a0908101511515910152565b6060880151610120880152608088015161014088015260a09097015160ff169690950195909552509392505050565b600060208083850312156133e157600080fd5b82516001600160401b038111156133f757600080fd5b8301601f8101851361340857600080fd5b80516134166123e482612486565b81815260069190911b8201830190838101908783111561343557600080fd5b928401925b8284101561348157604084890312156134535760008081fd5b61345b612299565b845161346681612130565b8152848601518682015282526040909301929084019061343a565b979650505050505050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b600060208083850312156134c357600080fd5b82516001600160401b038111156134d957600080fd5b8301601f810185136134ea57600080fd5b80516134f86123e482612486565b8181526060918202830184019184820191908884111561351757600080fd5b938501935b8385101561356a5780858a0312156135345760008081fd5b61353c612329565b855161354781612130565b81528587015187820152604080870151908201528352938401939185019161351c565b50979650505050505050565b6001600160a01b0394851681529290931660208301526040820152606081019190915260a06080820181905260009082015260c00190565b600061020082840312156135c157600080fd5b6135c961234b565b90506135d4826129de565b81526135e260208301612a64565b60208201526135f360408301612a64565b6040820152606082015160608201526080820151608082015260a082015160a082015261362260c08301612a64565b60c082015261363360e08301612a64565b60e08201526101008281015190820152610120808301519082015261014080830151908201526101608083015190820152610180808301516001600160401b0381111561367f57600080fd5b61368b85828601612a6f565b8284015250506101a061369f818401612b7d565b908201526101c082810151908201526101e09182015191810191909152919050565b805161215081612233565b6000806000606084860312156136e157600080fd5b83516001600160401b03808211156136f857600080fd5b9085019060c0828803121561370c57600080fd5b613714612307565b825161371f81612544565b8152602083015161372f81612130565b8060208301525060408301516040820152606083015160608201526080830151608082015260a08301518281111561376657600080fd5b61377289828601612a6f565b60a083015250602087015190955091508082111561378f57600080fd5b5061379c868287016135ae565b9250506137ab604085016136c1565b90509250925092565b60408152600061010084511515604084015260018060a01b03602086015116606084015260408501516080840152606085015160a0840152608085015160c084015260a085015160c060e085015261380e8285018261302b565b84810360208601528551151581529050610200602086015161383360208401826126de565b50604086015161384660408401826126de565b50606086015160608301526080860151608083015260a086015160a083015260c086015161387760c08401826126de565b5060e086015161388a60e08401826126de565b508583015192820192909252610120808601519082015261014080860151908201526101608086015190820152610180808601518183018490529092906138d38284018261302b565b935050506101a0808601516138ec8284018260ff169052565b50506101c085810151908201526101e094850151940193909352509092915050565b6000602080838503121561392157600080fd5b82516001600160401b038082111561393857600080fd5b908401906040828703121561394c57600080fd5b613954612299565b82518281111561396357600080fd5b61396f88828601612a6f565b825250838301518281111561398357600080fd5b80840193505086601f84011261399857600080fd5b825191506139a86123e483612486565b82815260059290921b830184019184810190888411156139c757600080fd5b938501935b838510156139e5578451825293850193908501906139cc565b948201949094529695505050505050565b6000816000190483118215151615613a1057613a10612931565b500290565b600082613a3257634e487b7160e01b600052601260045260246000fd5b50049056fea26469706673582212200734c33d1bbb183e66f7103fd0d34c140d31b521d3d8dfd2d21a11542682daa764736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "bulkPurchase((uint8,uint256,uint256,bytes)[],address,address,bool,(address,address,uint256,uint256,bool))": {
        "params": {
          "allowFail": "- true if fails while executing orders are allowed, false if fail of a single order means fail of the whole batch",
          "feeRecipientFirst": "- address of the first fee recipient",
          "feeRecipientSecond": "- address of the second fee recipient",
          "purchaseDetails": "- array of details about the purchases (more info in PurchaseDetails struct)"
        }
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "singlePurchase((uint8,uint256,uint256,bytes),address,address,(address,address,uint256,uint256,bool))": {
        "params": {
          "feeRecipientFirst": "- address of the first fee recipient",
          "feeRecipientSecond": "- address of the second fee recipient",
          "purchaseDetails": "- details about the purchase (more info in PurchaseDetails struct)"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "bulkPurchase((uint8,uint256,uint256,bytes)[],address,address,bool,(address,address,uint256,uint256,bool))": {
        "notice": "executes an array of purchases"
      },
      "pause()": {
        "notice": "Pause the contract"
      },
      "setTransferProxy(address)": {
        "notice": "temp for upgrade - to remove once initialized"
      },
      "singlePurchase((uint8,uint256,uint256,bytes),address,address,(address,address,uint256,uint256,bool))": {
        "notice": "executes a single purchase"
      },
      "unpause()": {
        "notice": "Unpause the contract"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 138,
        "contract": "src/exchange-wrapper/ExchangeWrapper.sol:ExchangeWrapper",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 141,
        "contract": "src/exchange-wrapper/ExchangeWrapper.sol:ExchangeWrapper",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1326,
        "contract": "src/exchange-wrapper/ExchangeWrapper.sol:ExchangeWrapper",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "src/exchange-wrapper/ExchangeWrapper.sol:ExchangeWrapper",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "src/exchange-wrapper/ExchangeWrapper.sol:ExchangeWrapper",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 303,
        "contract": "src/exchange-wrapper/ExchangeWrapper.sol:ExchangeWrapper",
        "label": "_paused",
        "offset": 0,
        "slot": "101",
        "type": "t_bool"
      },
      {
        "astId": 408,
        "contract": "src/exchange-wrapper/ExchangeWrapper.sol:ExchangeWrapper",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2682,
        "contract": "src/exchange-wrapper/ExchangeWrapper.sol:ExchangeWrapper",
        "label": "exchangeV2",
        "offset": 0,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 2684,
        "contract": "src/exchange-wrapper/ExchangeWrapper.sol:ExchangeWrapper",
        "label": "rarible",
        "offset": 0,
        "slot": "152",
        "type": "t_address"
      },
      {
        "astId": 2686,
        "contract": "src/exchange-wrapper/ExchangeWrapper.sol:ExchangeWrapper",
        "label": "wyvern",
        "offset": 0,
        "slot": "153",
        "type": "t_address"
      },
      {
        "astId": 2688,
        "contract": "src/exchange-wrapper/ExchangeWrapper.sol:ExchangeWrapper",
        "label": "seaport",
        "offset": 0,
        "slot": "154",
        "type": "t_address"
      },
      {
        "astId": 2690,
        "contract": "src/exchange-wrapper/ExchangeWrapper.sol:ExchangeWrapper",
        "label": "x2y2",
        "offset": 0,
        "slot": "155",
        "type": "t_address"
      },
      {
        "astId": 2692,
        "contract": "src/exchange-wrapper/ExchangeWrapper.sol:ExchangeWrapper",
        "label": "looksrare",
        "offset": 0,
        "slot": "156",
        "type": "t_address"
      },
      {
        "astId": 2694,
        "contract": "src/exchange-wrapper/ExchangeWrapper.sol:ExchangeWrapper",
        "label": "sudoswap",
        "offset": 0,
        "slot": "157",
        "type": "t_address"
      },
      {
        "astId": 2696,
        "contract": "src/exchange-wrapper/ExchangeWrapper.sol:ExchangeWrapper",
        "label": "blur",
        "offset": 0,
        "slot": "158",
        "type": "t_address"
      },
      {
        "astId": 2698,
        "contract": "src/exchange-wrapper/ExchangeWrapper.sol:ExchangeWrapper",
        "label": "wethToken",
        "offset": 0,
        "slot": "159",
        "type": "t_address"
      },
      {
        "astId": 2701,
        "contract": "src/exchange-wrapper/ExchangeWrapper.sol:ExchangeWrapper",
        "label": "uniswapRouterV3",
        "offset": 0,
        "slot": "160",
        "type": "t_contract(ISwapRouterV3)4653"
      },
      {
        "astId": 2703,
        "contract": "src/exchange-wrapper/ExchangeWrapper.sol:ExchangeWrapper",
        "label": "erc20TransferProxy",
        "offset": 0,
        "slot": "161",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ISwapRouterV3)4653": {
        "encoding": "inplace",
        "label": "contract ISwapRouterV3",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}