{
  "address": "0xb64860896eD161b28eB21863225B6268f1688733",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes4",
              "name": "assetClass",
              "type": "bytes4"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct LibAsset.AssetType",
          "name": "leftAssetType",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bytes4",
              "name": "assetClass",
              "type": "bytes4"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct LibAsset.AssetType",
          "name": "rightAssetType",
          "type": "tuple"
        }
      ],
      "name": "matchAssets",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes4",
              "name": "assetClass",
              "type": "bytes4"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct LibAsset.AssetType",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf3aed1378cb4a7abcb4fbc50340fbe90c33a89cf31d89b3663a3465553e926e5",
  "receipt": {
    "to": null,
    "from": "0x9E1bd73820A607b06086b5B5173765a61CEEE7dC",
    "contractAddress": "0xb64860896eD161b28eB21863225B6268f1688733",
    "transactionIndex": 7,
    "gasUsed": "263258",
    "logsBloom": "0x
    "blockHash": "0x1b64ff206fa5029a7682f6733da5722f6b848eb13f9dcacd8515012138cd5d18",
    "transactionHash": "0xf3aed1378cb4a7abcb4fbc50340fbe90c33a89cf31d89b3663a3465553e926e5",
    "logs": [],
    "blockNumber": 6994138,
    "cumulativeGasUsed": "470685",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "8b3f23708baa7eccc06d06092456eee1",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"assetClass\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct LibAsset.AssetType\",\"name\":\"leftAssetType\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"assetClass\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct LibAsset.AssetType\",\"name\":\"rightAssetType\",\"type\":\"tuple\"}],\"name\":\"matchAssets\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"assetClass\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct LibAsset.AssetType\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/custom-matcher/AssetMatcherCollection.sol\":\"AssetMatcherCollection\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"src/IAssetMatcher.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"./lib/LibAsset.sol\\\";\\n\\ninterface IAssetMatcher {\\n    function matchAssets(LibAsset.AssetType memory leftAssetType, LibAsset.AssetType memory rightAssetType)\\n        external\\n        view\\n        returns (LibAsset.AssetType memory);\\n}\\n\",\"keccak256\":\"0xa6f10068b04456720cc95357f6d3173df6440109ead124dc6d95d1e78cf42ed3\",\"license\":\"MIT\"},\"src/custom-matcher/AssetMatcherCollection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"../IAssetMatcher.sol\\\";\\n\\n/*\\n * Custom matcher for collection (assetClass, that need any/all elements from collection)\\n */\\ncontract AssetMatcherCollection is IAssetMatcher {\\n    bytes constant EMPTY = \\\"\\\";\\n\\n    function matchAssets(LibAsset.AssetType memory leftAssetType, LibAsset.AssetType memory rightAssetType)\\n        public\\n        view\\n        override\\n        returns (LibAsset.AssetType memory)\\n    {\\n        if (\\n            (rightAssetType.assetClass == LibAsset.ERC721_ASSET_CLASS) ||\\n            (rightAssetType.assetClass == LibAsset.ERC1155_ASSET_CLASS) ||\\n            (rightAssetType.assetClass == LibAsset.CRYPTO_PUNKS)\\n        ) {\\n            address leftToken = abi.decode(leftAssetType.data, (address));\\n            (address rightToken, ) = abi.decode(rightAssetType.data, (address, uint256));\\n            if (leftToken == rightToken) {\\n                return LibAsset.AssetType(rightAssetType.assetClass, rightAssetType.data);\\n            }\\n        }\\n        return LibAsset.AssetType(0, EMPTY);\\n    }\\n}\\n\",\"keccak256\":\"0x4edbaf8d432a7ddaf5f23ff04dbd7e1c902d2fe7d416503c31e627ad82ae7307\",\"license\":\"MIT\"},\"src/lib/LibAsset.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nlibrary LibAsset {\\n    bytes4 public constant ETH_ASSET_CLASS = bytes4(keccak256(\\\"ETH\\\"));\\n    bytes4 public constant ERC20_ASSET_CLASS = bytes4(keccak256(\\\"ERC20\\\"));\\n    bytes4 public constant ERC721_ASSET_CLASS = bytes4(keccak256(\\\"ERC721\\\"));\\n    bytes4 public constant ERC1155_ASSET_CLASS = bytes4(keccak256(\\\"ERC1155\\\"));\\n    bytes4 public constant _GHOSTMARKET_NFT_ROYALTIES = bytes4(keccak256(\\\"_GHOSTMARKET_NFT_ROYALTIES\\\"));\\n    bytes4 public constant COLLECTION = bytes4(keccak256(\\\"COLLECTION\\\"));\\n    bytes4 public constant CRYPTO_PUNKS = bytes4(keccak256(\\\"CRYPTO_PUNKS\\\"));\\n\\n    bytes32 constant ASSET_TYPE_TYPEHASH = keccak256(\\\"AssetType(bytes4 assetClass,bytes data)\\\");\\n\\n    bytes32 constant ASSET_TYPEHASH =\\n        keccak256(\\\"Asset(AssetType assetType,uint256 value)AssetType(bytes4 assetClass,bytes data)\\\");\\n\\n    struct AssetType {\\n        bytes4 assetClass;\\n        bytes data;\\n    }\\n\\n    struct Asset {\\n        AssetType assetType;\\n        uint256 value;\\n    }\\n\\n    function hash(AssetType memory assetType) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(ASSET_TYPE_TYPEHASH, assetType.assetClass, keccak256(assetType.data)));\\n    }\\n\\n    function hash(Asset memory asset) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(ASSET_TYPEHASH, hash(asset.assetType), asset.value));\\n    }\\n}\\n\",\"keccak256\":\"0x378487d4147e2d579a24c4e07e3a4421784256a3c389d2c8899f0500d9a5dd7b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506103cc806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80636d3f7cb014610030575b600080fd5b61004361003e3660046102a3565b610059565b6040516100509190610304565b60405180910390f35b61006161015e565b81516001600160e01b0319166339d690a360e11b1480610092575081516001600160e01b03191663025ceed960e61b145b806100ae575081516001600160e01b031916630f9ae27560e21b145b1561013457600083602001518060200190518101906100cd9190610257565b9050600083602001518060200190518101906100e99190610278565b509050806001600160a01b0316826001600160a01b031614156101315750506040805180820190915282516001600160e01b0319168152602080840151908201529050610158565b50505b50604080518082018252600080825282516020818101909452908152918101919091525b92915050565b60408051808201909152600081526060602082015290565b80516001600160a01b038116811461018d57600080fd5b919050565b6000604082840312156101a3578081fd5b6040516040810167ffffffffffffffff82821081831117156101c157fe5b816040528293508435915063ffffffff60e01b821682146101e157600080fd5b90825260209084820135818111156101f857600080fd5b8501601f8101871361020957600080fd5b80358281111561021557fe5b610227601f8201601f19168501610372565b9250808352878482840101111561023d57600080fd5b808483018585013760009083018401525091015292915050565b600060208284031215610268578081fd5b61027182610176565b9392505050565b6000806040838503121561028a578081fd5b61029383610176565b9150602083015190509250929050565b600080604083850312156102b5578182fd5b823567ffffffffffffffff808211156102cc578384fd5b6102d886838701610192565b935060208501359150808211156102ed578283fd5b506102fa85828601610192565b9150509250929050565b6000602080835263ffffffff60e01b84511681840152808401516040808501528051806060860152835b8181101561034a5782810184015186820160800152830161032e565b8181111561035b5784608083880101525b50601f01601f191693909301608001949350505050565b60405181810167ffffffffffffffff8111828210171561038e57fe5b60405291905056fea26469706673582212204d45ac61aa10b8e4381aa448a9705bb9747d96fddfc787f3b799c1b693dfa4f064736f6c63430007060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c80636d3f7cb014610030575b600080fd5b61004361003e3660046102a3565b610059565b6040516100509190610304565b60405180910390f35b61006161015e565b81516001600160e01b0319166339d690a360e11b1480610092575081516001600160e01b03191663025ceed960e61b145b806100ae575081516001600160e01b031916630f9ae27560e21b145b1561013457600083602001518060200190518101906100cd9190610257565b9050600083602001518060200190518101906100e99190610278565b509050806001600160a01b0316826001600160a01b031614156101315750506040805180820190915282516001600160e01b0319168152602080840151908201529050610158565b50505b50604080518082018252600080825282516020818101909452908152918101919091525b92915050565b60408051808201909152600081526060602082015290565b80516001600160a01b038116811461018d57600080fd5b919050565b6000604082840312156101a3578081fd5b6040516040810167ffffffffffffffff82821081831117156101c157fe5b816040528293508435915063ffffffff60e01b821682146101e157600080fd5b90825260209084820135818111156101f857600080fd5b8501601f8101871361020957600080fd5b80358281111561021557fe5b610227601f8201601f19168501610372565b9250808352878482840101111561023d57600080fd5b808483018585013760009083018401525091015292915050565b600060208284031215610268578081fd5b61027182610176565b9392505050565b6000806040838503121561028a578081fd5b61029383610176565b9150602083015190509250929050565b600080604083850312156102b5578182fd5b823567ffffffffffffffff808211156102cc578384fd5b6102d886838701610192565b935060208501359150808211156102ed578283fd5b506102fa85828601610192565b9150509250929050565b6000602080835263ffffffff60e01b84511681840152808401516040808501528051806060860152835b8181101561034a5782810184015186820160800152830161032e565b8181111561035b5784608083880101525b50601f01601f191693909301608001949350505050565b60405181810167ffffffffffffffff8111828210171561038e57fe5b60405291905056fea26469706673582212204d45ac61aa10b8e4381aa448a9705bb9747d96fddfc787f3b799c1b693dfa4f064736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}