{
  "address": "0x68efd84E9Fe2D36c36243dEB2E9B1d3d3cd15423",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes4",
              "name": "assetClass",
              "type": "bytes4"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct LibAsset.AssetType",
          "name": "leftAssetType",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bytes4",
              "name": "assetClass",
              "type": "bytes4"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct LibAsset.AssetType",
          "name": "rightAssetType",
          "type": "tuple"
        }
      ],
      "name": "matchAssets",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes4",
              "name": "assetClass",
              "type": "bytes4"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct LibAsset.AssetType",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xb06e925ff6e382293da27e7d999412bf175ae9246db12c1f546a71ff295d3abf",
  "receipt": {
    "to": null,
    "from": "0x07714A8BF073510996D948D8aA39f8E32627fe62",
    "contractAddress": "0x68efd84E9Fe2D36c36243dEB2E9B1d3d3cd15423",
    "transactionIndex": 1,
    "gasUsed": "289095",
    "logsBloom": "0x
    "blockHash": "0xd1dfae0b05603256dc0fa4bcd151275be8ad03ffbe3f9d5b0bde0078ae4a0b13",
    "transactionHash": "0xb06e925ff6e382293da27e7d999412bf175ae9246db12c1f546a71ff295d3abf",
    "logs": [],
    "blockNumber": 18593414,
    "cumulativeGasUsed": "372393",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "c38a6f56aac05d03a4a1582c032d6571",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"assetClass\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct LibAsset.AssetType\",\"name\":\"leftAssetType\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"assetClass\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct LibAsset.AssetType\",\"name\":\"rightAssetType\",\"type\":\"tuple\"}],\"name\":\"matchAssets\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"assetClass\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct LibAsset.AssetType\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/custom-matcher/AssetMatcherCollection.sol\":\"AssetMatcherCollection\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"src/custom-matcher/AssetMatcherCollection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../interfaces/IAssetMatcher.sol\\\";\\nimport \\\"../librairies/LibERC721LazyMint.sol\\\";\\nimport \\\"../librairies/LibERC1155LazyMint.sol\\\";\\n\\ncontract AssetMatcherCollection is IAssetMatcher {\\n    bytes internal constant EMPTY = \\\"\\\";\\n\\n    function matchAssets(\\n        LibAsset.AssetType memory leftAssetType,\\n        LibAsset.AssetType memory rightAssetType\\n    ) external pure override returns (LibAsset.AssetType memory) {\\n        if (\\n            (rightAssetType.assetClass == LibAsset.ERC721_ASSET_CLASS) ||\\n            (rightAssetType.assetClass == LibAsset.ERC1155_ASSET_CLASS) ||\\n            (rightAssetType.assetClass == LibERC721LazyMint.ERC721_LAZY_ASSET_CLASS) ||\\n            (rightAssetType.assetClass == LibERC1155LazyMint.ERC1155_LAZY_ASSET_CLASS) ||\\n            (rightAssetType.assetClass == LibAsset.CRYPTO_PUNKS)\\n        ) {\\n            address leftToken = abi.decode(leftAssetType.data, (address));\\n            (address rightToken, ) = abi.decode(rightAssetType.data, (address, uint));\\n            if (leftToken == rightToken) {\\n                return LibAsset.AssetType(rightAssetType.assetClass, rightAssetType.data);\\n            }\\n        }\\n        return LibAsset.AssetType(0, EMPTY);\\n    }\\n}\\n\",\"keccak256\":\"0xcdf04264c6e26ed8a626cf1e14c27aa611ec61f80a0bbb4a203b639b094c4f95\",\"license\":\"MIT\"},\"src/interfaces/IAssetMatcher.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../librairies/LibAsset.sol\\\";\\n\\ninterface IAssetMatcher {\\n    function matchAssets(\\n        LibAsset.AssetType memory leftAssetType,\\n        LibAsset.AssetType memory rightAssetType\\n    ) external view returns (LibAsset.AssetType memory);\\n}\\n\",\"keccak256\":\"0x07d4f1a0fb8742e578f746cd326cc56856eed9c50ac74acd8978d273dc580a19\",\"license\":\"MIT\"},\"src/librairies/LibAsset.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nlibrary LibAsset {\\n    bytes4 public constant ETH_ASSET_CLASS = bytes4(keccak256(\\\"ETH\\\"));\\n    bytes4 public constant ERC20_ASSET_CLASS = bytes4(keccak256(\\\"ERC20\\\"));\\n    bytes4 public constant ERC721_ASSET_CLASS = bytes4(keccak256(\\\"ERC721\\\"));\\n    bytes4 public constant ERC1155_ASSET_CLASS = bytes4(keccak256(\\\"ERC1155\\\"));\\n    bytes4 public constant COLLECTION = bytes4(keccak256(\\\"COLLECTION\\\"));\\n    bytes4 public constant CRYPTO_PUNKS = bytes4(keccak256(\\\"CRYPTO_PUNKS\\\"));\\n\\n    bytes32 public constant ASSET_TYPE_TYPEHASH = keccak256(\\\"AssetType(bytes4 assetClass,bytes data)\\\");\\n\\n    bytes32 public constant ASSET_TYPEHASH =\\n        keccak256(\\\"Asset(AssetType assetType,uint256 value)AssetType(bytes4 assetClass,bytes data)\\\");\\n\\n    struct AssetType {\\n        bytes4 assetClass;\\n        bytes data;\\n    }\\n\\n    struct Asset {\\n        AssetType assetType;\\n        uint256 value;\\n    }\\n\\n    function hash(AssetType memory assetType) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(ASSET_TYPE_TYPEHASH, assetType.assetClass, keccak256(assetType.data)));\\n    }\\n\\n    function hash(Asset memory asset) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(ASSET_TYPEHASH, hash(asset.assetType), asset.value));\\n    }\\n}\\n\",\"keccak256\":\"0x10f962b944a4ffa957d22d70073318bc5376a3666d6e6b858affc8eb258d7d8d\",\"license\":\"MIT\"},\"src/librairies/LibERC1155LazyMint.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./LibPart.sol\\\";\\n\\nlibrary LibERC1155LazyMint {\\n    bytes4 public constant ERC1155_LAZY_ASSET_CLASS = bytes4(keccak256(\\\"ERC1155_LAZY\\\"));\\n\\n    struct Mint1155Data {\\n        uint tokenId;\\n        string tokenURI;\\n        uint amount;\\n        address minter;\\n        LibPart.Part[] royalties;\\n        bytes signature;\\n    }\\n\\n    bytes32 public constant MINT_AND_TRANSFER_TYPEHASH =\\n        keccak256(\\n            \\\"Mint1155(uint256 tokenId,string tokenURI,uint256 amount,address minter,Part[] royalties)Part(address recipient,uint256 value)\\\"\\n        );\\n\\n    function hash(Mint1155Data memory data) internal pure returns (bytes32) {\\n        bytes32[] memory royaltiesBytes = new bytes32[](data.royalties.length);\\n        uint length = data.royalties.length;\\n        for (uint i; i < length; ++i) {\\n            royaltiesBytes[i] = LibPart.hash(data.royalties[i]);\\n        }\\n        return\\n            keccak256(\\n                abi.encode(\\n                    MINT_AND_TRANSFER_TYPEHASH,\\n                    data.tokenId,\\n                    keccak256(bytes(data.tokenURI)),\\n                    data.amount,\\n                    data.minter,\\n                    keccak256(abi.encodePacked(royaltiesBytes))\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x47be425101670fa8dce1529ea5c1e2890c833040fbf9a13ce4cbe2eaa4e690e7\",\"license\":\"MIT\"},\"src/librairies/LibERC721LazyMint.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./LibPart.sol\\\";\\n\\nlibrary LibERC721LazyMint {\\n    bytes4 public constant ERC721_LAZY_ASSET_CLASS = bytes4(keccak256(\\\"ERC721_LAZY\\\"));\\n\\n    struct Mint721Data {\\n        uint tokenId;\\n        string tokenURI;\\n        address minter;\\n        LibPart.Part[] royalties;\\n        bytes signature;\\n    }\\n\\n    bytes32 public constant MINT_AND_TRANSFER_TYPEHASH =\\n        keccak256(\\n            \\\"Mint721(uint256 tokenId,string tokenURI,address minter,Part[] royalties)Part(address recipient,uint256 value)\\\"\\n        );\\n\\n    function hash(Mint721Data memory data) internal pure returns (bytes32) {\\n        bytes32[] memory royaltiesBytes = new bytes32[](data.royalties.length);\\n        uint length = data.royalties.length;\\n        for (uint i; i < length; ++i) {\\n            royaltiesBytes[i] = LibPart.hash(data.royalties[i]);\\n        }\\n        return\\n            keccak256(\\n                abi.encode(\\n                    MINT_AND_TRANSFER_TYPEHASH,\\n                    data.tokenId,\\n                    keccak256(bytes(data.tokenURI)),\\n                    data.minter,\\n                    keccak256(abi.encodePacked(royaltiesBytes))\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xd0a8924d168e58094773f3602b8029b3c8c999410c123569e093dfb81f89ac8a\",\"license\":\"MIT\"},\"src/librairies/LibPart.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nlibrary LibPart {\\n    bytes32 public constant TYPE_HASH = keccak256(\\\"Part(address account,uint96 value)\\\");\\n\\n    struct Part {\\n        address payable account;\\n        uint96 value;\\n    }\\n\\n    function hash(Part memory part) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(TYPE_HASH, part.account, part.value));\\n    }\\n}\\n\",\"keccak256\":\"0xedbb696dbf7cd7d5325fc114fd5b7531cf1b1676df98cc5a4cf6330b609ef651\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610444806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80636d3f7cb014610030575b600080fd5b61004361003e3660046102d0565b610059565b6040516100509190610334565b60405180910390f35b60408051808201909152600081526060602082015281516001600160e01b0319166339d690a360e11b148061009f575081516001600160e01b03191663025ceed960e61b145b806100bb575081516001600160e01b03191663d8f960c160e01b145b806100d6575081516001600160e01b03191662737ea960e61b145b806100f2575081516001600160e01b031916630f9ae27560e21b145b15610178576000836020015180602001905181019061011191906103c0565b90506000836020015180602001905181019061012d91906103e2565b509050806001600160a01b0316826001600160a01b031614156101755750506040805180820190915282516001600160e01b031916815260208084015190820152905061019c565b50505b50604080518082018252600080825282516020818101909452908152918101919091525b92915050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff811182821017156101db576101db6101a2565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561020a5761020a6101a2565b604052919050565b60006040828403121561022457600080fd5b61022c6101b8565b905081356001600160e01b03198116811461024657600080fd5b815260208281013567ffffffffffffffff8082111561026457600080fd5b818501915085601f83011261027857600080fd5b81358181111561028a5761028a6101a2565b61029c601f8201601f191685016101e1565b915080825286848285010111156102b257600080fd5b80848401858401376000908201840152918301919091525092915050565b600080604083850312156102e357600080fd5b823567ffffffffffffffff808211156102fb57600080fd5b61030786838701610212565b9350602085013591508082111561031d57600080fd5b5061032a85828601610212565b9150509250929050565b6000602080835263ffffffff60e01b8451168184015280840151604080850152805180606086015260005b8181101561037b5782810184015186820160800152830161035f565b8181111561038d576000608083880101525b50601f01601f191693909301608001949350505050565b80516001600160a01b03811681146103bb57600080fd5b919050565b6000602082840312156103d257600080fd5b6103db826103a4565b9392505050565b600080604083850312156103f557600080fd5b6103fe836103a4565b915060208301519050925092905056fea264697066735822122040b9e675911b3dfcf3d976026d5ebe6ca1f8f6cb9b0946f4e44b966d9b4939d264736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c80636d3f7cb014610030575b600080fd5b61004361003e3660046102d0565b610059565b6040516100509190610334565b60405180910390f35b60408051808201909152600081526060602082015281516001600160e01b0319166339d690a360e11b148061009f575081516001600160e01b03191663025ceed960e61b145b806100bb575081516001600160e01b03191663d8f960c160e01b145b806100d6575081516001600160e01b03191662737ea960e61b145b806100f2575081516001600160e01b031916630f9ae27560e21b145b15610178576000836020015180602001905181019061011191906103c0565b90506000836020015180602001905181019061012d91906103e2565b509050806001600160a01b0316826001600160a01b031614156101755750506040805180820190915282516001600160e01b031916815260208084015190820152905061019c565b50505b50604080518082018252600080825282516020818101909452908152918101919091525b92915050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff811182821017156101db576101db6101a2565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561020a5761020a6101a2565b604052919050565b60006040828403121561022457600080fd5b61022c6101b8565b905081356001600160e01b03198116811461024657600080fd5b815260208281013567ffffffffffffffff8082111561026457600080fd5b818501915085601f83011261027857600080fd5b81358181111561028a5761028a6101a2565b61029c601f8201601f191685016101e1565b915080825286848285010111156102b257600080fd5b80848401858401376000908201840152918301919091525092915050565b600080604083850312156102e357600080fd5b823567ffffffffffffffff808211156102fb57600080fd5b61030786838701610212565b9350602085013591508082111561031d57600080fd5b5061032a85828601610212565b9150509250929050565b6000602080835263ffffffff60e01b8451168184015280840151604080850152805180606086015260005b8181101561037b5782810184015186820160800152830161035f565b8181111561038d576000608083880101525b50601f01601f191693909301608001949350505050565b80516001600160a01b03811681146103bb57600080fd5b919050565b6000602082840312156103d257600080fd5b6103db826103a4565b9392505050565b600080604083850312156103f557600080fd5b6103fe836103a4565b915060208301519050925092905056fea264697066735822122040b9e675911b3dfcf3d976026d5ebe6ca1f8f6cb9b0946f4e44b966d9b4939d264736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}