{
  "address": "0x0fE2b51D3B543C6F359480BffBf8C4E6964aE40E",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes4",
          "name": "assetType",
          "type": "bytes4"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "matcher",
          "type": "address"
        }
      ],
      "name": "MatcherChange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "maker",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "bytes4",
              "name": "assetClass",
              "type": "bytes4"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "indexed": false,
          "internalType": "struct LibAsset.AssetType",
          "name": "makeAssetType",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bytes4",
              "name": "assetClass",
              "type": "bytes4"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "indexed": false,
          "internalType": "struct LibAsset.AssetType",
          "name": "takeAssetType",
          "type": "tuple"
        }
      ],
      "name": "OrderCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "leftHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "rightHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "leftMaker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "rightMaker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newLeftFill",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newRightFill",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bytes4",
              "name": "assetClass",
              "type": "bytes4"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "indexed": false,
          "internalType": "struct LibAsset.AssetType",
          "name": "leftAsset",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bytes4",
              "name": "assetClass",
              "type": "bytes4"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "indexed": false,
          "internalType": "struct LibAsset.AssetType",
          "name": "rightAsset",
          "type": "tuple"
        }
      ],
      "name": "OrderFilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes4",
          "name": "assetType",
          "type": "bytes4"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "proxy",
          "type": "address"
        }
      ],
      "name": "ProxyChange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "bytes4",
                  "name": "assetClass",
                  "type": "bytes4"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ],
              "internalType": "struct LibAsset.AssetType",
              "name": "assetType",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct LibAsset.Asset",
          "name": "asset",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes4",
          "name": "transferDirection",
          "type": "bytes4"
        },
        {
          "indexed": false,
          "internalType": "bytes4",
          "name": "transferType",
          "type": "bytes4"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "contract INftTransferProxy",
          "name": "_transferProxy",
          "type": "address"
        },
        {
          "internalType": "contract IERC20TransferProxy",
          "name": "_erc20TransferProxy",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "newProtocolFee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "newDefaultFeeReceiver",
          "type": "address"
        },
        {
          "internalType": "contract IRoyaltiesProvider",
          "name": "newRoyaltiesProvider",
          "type": "address"
        }
      ],
      "name": "__ExchangeV2_init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "maker",
              "type": "address"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "bytes4",
                      "name": "assetClass",
                      "type": "bytes4"
                    },
                    {
                      "internalType": "bytes",
                      "name": "data",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct LibAsset.AssetType",
                  "name": "assetType",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct LibAsset.Asset",
              "name": "makeAsset",
              "type": "tuple"
            },
            {
              "internalType": "address",
              "name": "taker",
              "type": "address"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "bytes4",
                      "name": "assetClass",
                      "type": "bytes4"
                    },
                    {
                      "internalType": "bytes",
                      "name": "data",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct LibAsset.AssetType",
                  "name": "assetType",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct LibAsset.Asset",
              "name": "takeAsset",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "start",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "end",
              "type": "uint256"
            },
            {
              "internalType": "bytes4",
              "name": "dataType",
              "type": "bytes4"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct LibOrder.Order[]",
          "name": "orders",
          "type": "tuple[]"
        }
      ],
      "name": "bulkCancelOrders",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "maker",
              "type": "address"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "bytes4",
                      "name": "assetClass",
                      "type": "bytes4"
                    },
                    {
                      "internalType": "bytes",
                      "name": "data",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct LibAsset.AssetType",
                  "name": "assetType",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct LibAsset.Asset",
              "name": "makeAsset",
              "type": "tuple"
            },
            {
              "internalType": "address",
              "name": "taker",
              "type": "address"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "bytes4",
                      "name": "assetClass",
                      "type": "bytes4"
                    },
                    {
                      "internalType": "bytes",
                      "name": "data",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct LibAsset.AssetType",
                  "name": "assetType",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct LibAsset.Asset",
              "name": "takeAsset",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "start",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "end",
              "type": "uint256"
            },
            {
              "internalType": "bytes4",
              "name": "dataType",
              "type": "bytes4"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct LibOrder.Order",
          "name": "order",
          "type": "tuple"
        }
      ],
      "name": "cancel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultFeeReceiver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "feeReceivers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "fills",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "matchAndTransferAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "maker",
              "type": "address"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "bytes4",
                      "name": "assetClass",
                      "type": "bytes4"
                    },
                    {
                      "internalType": "bytes",
                      "name": "data",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct LibAsset.AssetType",
                  "name": "assetType",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct LibAsset.Asset",
              "name": "makeAsset",
              "type": "tuple"
            },
            {
              "internalType": "address",
              "name": "taker",
              "type": "address"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "bytes4",
                      "name": "assetClass",
                      "type": "bytes4"
                    },
                    {
                      "internalType": "bytes",
                      "name": "data",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct LibAsset.AssetType",
                  "name": "assetType",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct LibAsset.Asset",
              "name": "takeAsset",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "start",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "end",
              "type": "uint256"
            },
            {
              "internalType": "bytes4",
              "name": "dataType",
              "type": "bytes4"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct LibOrder.Order",
          "name": "orderLeft",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "maker",
              "type": "address"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "bytes4",
                      "name": "assetClass",
                      "type": "bytes4"
                    },
                    {
                      "internalType": "bytes",
                      "name": "data",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct LibAsset.AssetType",
                  "name": "assetType",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct LibAsset.Asset",
              "name": "makeAsset",
              "type": "tuple"
            },
            {
              "internalType": "address",
              "name": "taker",
              "type": "address"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "bytes4",
                      "name": "assetClass",
                      "type": "bytes4"
                    },
                    {
                      "internalType": "bytes",
                      "name": "data",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct LibAsset.AssetType",
                  "name": "assetType",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct LibAsset.Asset",
              "name": "takeAsset",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "start",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "end",
              "type": "uint256"
            },
            {
              "internalType": "bytes4",
              "name": "dataType",
              "type": "bytes4"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct LibOrder.Order",
          "name": "orderRight",
          "type": "tuple"
        }
      ],
      "name": "matchAndTransferWithoutSignature",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "maker",
              "type": "address"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "bytes4",
                      "name": "assetClass",
                      "type": "bytes4"
                    },
                    {
                      "internalType": "bytes",
                      "name": "data",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct LibAsset.AssetType",
                  "name": "assetType",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct LibAsset.Asset",
              "name": "makeAsset",
              "type": "tuple"
            },
            {
              "internalType": "address",
              "name": "taker",
              "type": "address"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "bytes4",
                      "name": "assetClass",
                      "type": "bytes4"
                    },
                    {
                      "internalType": "bytes",
                      "name": "data",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct LibAsset.AssetType",
                  "name": "assetType",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct LibAsset.Asset",
              "name": "takeAsset",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "start",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "end",
              "type": "uint256"
            },
            {
              "internalType": "bytes4",
              "name": "dataType",
              "type": "bytes4"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct LibOrder.Order",
          "name": "orderLeft",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "signatureLeft",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "maker",
              "type": "address"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "bytes4",
                      "name": "assetClass",
                      "type": "bytes4"
                    },
                    {
                      "internalType": "bytes",
                      "name": "data",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct LibAsset.AssetType",
                  "name": "assetType",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct LibAsset.Asset",
              "name": "makeAsset",
              "type": "tuple"
            },
            {
              "internalType": "address",
              "name": "taker",
              "type": "address"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "bytes4",
                      "name": "assetClass",
                      "type": "bytes4"
                    },
                    {
                      "internalType": "bytes",
                      "name": "data",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct LibAsset.AssetType",
                  "name": "assetType",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct LibAsset.Asset",
              "name": "takeAsset",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "start",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "end",
              "type": "uint256"
            },
            {
              "internalType": "bytes4",
              "name": "dataType",
              "type": "bytes4"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct LibOrder.Order",
          "name": "orderRight",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "signatureRight",
          "type": "bytes"
        }
      ],
      "name": "matchOrders",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "royaltiesRegistry",
      "outputs": [
        {
          "internalType": "contract IRoyaltiesProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "assetType",
          "type": "bytes4"
        },
        {
          "internalType": "address",
          "name": "matcher",
          "type": "address"
        }
      ],
      "name": "setAssetMatcher",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "newDefaultFeeReceiver",
          "type": "address"
        }
      ],
      "name": "setDefaultFeeReceiver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        }
      ],
      "name": "setFeeReceiver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "mata",
          "type": "address"
        }
      ],
      "name": "setMatchTransferAdminAccount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newProtocolFee",
          "type": "uint256"
        }
      ],
      "name": "setProtocolFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRoyaltiesProvider",
          "name": "newRoyaltiesRegistry",
          "type": "address"
        }
      ],
      "name": "setRoyaltiesRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "assetType",
          "type": "bytes4"
        },
        {
          "internalType": "address",
          "name": "proxy",
          "type": "address"
        }
      ],
      "name": "setTransferProxy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa7eed01a63e076123291891e05d2cd30230e608344180c8434bf129ebd6a2fa8",
  "receipt": {
    "to": null,
    "from": "0x07714A8BF073510996D948D8aA39f8E32627fe62",
    "contractAddress": "0x0fE2b51D3B543C6F359480BffBf8C4E6964aE40E",
    "transactionIndex": 0,
    "gasUsed": "3922699",
    "logsBloom": "0x
    "blockHash": "0x8db6d229b148a4c621088e2ad7163857a8817a588f9947999939085336a1c434",
    "transactionHash": "0xa7eed01a63e076123291891e05d2cd30230e608344180c8434bf129ebd6a2fa8",
    "logs": [],
    "blockNumber": 9766447,
    "cumulativeGasUsed": "3922699",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "34a24ccd634cbe27df10cb9ad1fadc20",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"assetType\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"matcher\",\"type\":\"address\"}],\"name\":\"MatcherChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"assetClass\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"struct LibAsset.AssetType\",\"name\":\"makeAssetType\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"assetClass\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"struct LibAsset.AssetType\",\"name\":\"takeAssetType\",\"type\":\"tuple\"}],\"name\":\"OrderCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"leftHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"rightHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"leftMaker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rightMaker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLeftFill\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRightFill\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"assetClass\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"struct LibAsset.AssetType\",\"name\":\"leftAsset\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"assetClass\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"struct LibAsset.AssetType\",\"name\":\"rightAsset\",\"type\":\"tuple\"}],\"name\":\"OrderFilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"assetType\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"}],\"name\":\"ProxyChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"assetClass\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct LibAsset.AssetType\",\"name\":\"assetType\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct LibAsset.Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"transferDirection\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"transferType\",\"type\":\"bytes4\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract INftTransferProxy\",\"name\":\"_transferProxy\",\"type\":\"address\"},{\"internalType\":\"contract IERC20TransferProxy\",\"name\":\"_erc20TransferProxy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newProtocolFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newDefaultFeeReceiver\",\"type\":\"address\"},{\"internalType\":\"contract IRoyaltiesProvider\",\"name\":\"newRoyaltiesProvider\",\"type\":\"address\"}],\"name\":\"__ExchangeV2_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"assetClass\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct LibAsset.AssetType\",\"name\":\"assetType\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct LibAsset.Asset\",\"name\":\"makeAsset\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"assetClass\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct LibAsset.AssetType\",\"name\":\"assetType\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct LibAsset.Asset\",\"name\":\"takeAsset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"bytes4\",\"name\":\"dataType\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct LibOrder.Order[]\",\"name\":\"orders\",\"type\":\"tuple[]\"}],\"name\":\"bulkCancelOrders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"assetClass\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct LibAsset.AssetType\",\"name\":\"assetType\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct LibAsset.Asset\",\"name\":\"makeAsset\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"assetClass\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct LibAsset.AssetType\",\"name\":\"assetType\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct LibAsset.Asset\",\"name\":\"takeAsset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"bytes4\",\"name\":\"dataType\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct LibOrder.Order\",\"name\":\"order\",\"type\":\"tuple\"}],\"name\":\"cancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeReceivers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"fills\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"matchAndTransferAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"assetClass\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct LibAsset.AssetType\",\"name\":\"assetType\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct LibAsset.Asset\",\"name\":\"makeAsset\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"assetClass\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct LibAsset.AssetType\",\"name\":\"assetType\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct LibAsset.Asset\",\"name\":\"takeAsset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"bytes4\",\"name\":\"dataType\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct LibOrder.Order\",\"name\":\"orderLeft\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"assetClass\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct LibAsset.AssetType\",\"name\":\"assetType\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct LibAsset.Asset\",\"name\":\"makeAsset\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"assetClass\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct LibAsset.AssetType\",\"name\":\"assetType\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct LibAsset.Asset\",\"name\":\"takeAsset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"bytes4\",\"name\":\"dataType\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct LibOrder.Order\",\"name\":\"orderRight\",\"type\":\"tuple\"}],\"name\":\"matchAndTransferWithoutSignature\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"assetClass\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct LibAsset.AssetType\",\"name\":\"assetType\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct LibAsset.Asset\",\"name\":\"makeAsset\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"assetClass\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct LibAsset.AssetType\",\"name\":\"assetType\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct LibAsset.Asset\",\"name\":\"takeAsset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"bytes4\",\"name\":\"dataType\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct LibOrder.Order\",\"name\":\"orderLeft\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signatureLeft\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"assetClass\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct LibAsset.AssetType\",\"name\":\"assetType\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct LibAsset.Asset\",\"name\":\"makeAsset\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"assetClass\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct LibAsset.AssetType\",\"name\":\"assetType\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct LibAsset.Asset\",\"name\":\"takeAsset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"bytes4\",\"name\":\"dataType\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct LibOrder.Order\",\"name\":\"orderRight\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signatureRight\",\"type\":\"bytes\"}],\"name\":\"matchOrders\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltiesRegistry\",\"outputs\":[{\"internalType\":\"contract IRoyaltiesProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"assetType\",\"type\":\"bytes4\"},{\"internalType\":\"address\",\"name\":\"matcher\",\"type\":\"address\"}],\"name\":\"setAssetMatcher\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newDefaultFeeReceiver\",\"type\":\"address\"}],\"name\":\"setDefaultFeeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"setFeeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"mata\",\"type\":\"address\"}],\"name\":\"setMatchTransferAdminAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newProtocolFee\",\"type\":\"uint256\"}],\"name\":\"setProtocolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRoyaltiesProvider\",\"name\":\"newRoyaltiesRegistry\",\"type\":\"address\"}],\"name\":\"setRoyaltiesRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"assetType\",\"type\":\"bytes4\"},{\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"}],\"name\":\"setTransferProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"__ExchangeV2_init(address,address,uint256,address,address)\":{\"details\":\"initialize ExchangeV2\",\"params\":{\"_erc20TransferProxy\":\"address for proxy transfer contract that handles ERC20 contracts\",\"_transferProxy\":\"address for proxy transfer contract that handles ERC721 & ERC1155 contracts\",\"newDefaultFeeReceiver\":\"address for protocol fee if fee by token type is not set (GhostMarketTransferManager.sol => function getFeeReceiver)\",\"newProtocolFee\":\"address for protocol fee\"}},\"bulkCancelOrders((address,((bytes4,bytes),uint256),address,((bytes4,bytes),uint256),uint256,uint256,uint256,bytes4,bytes)[])\":{\"details\":\"call the cancel fucntion in a loop canceling multiple orders\"},\"cancel((address,((bytes4,bytes),uint256),address,((bytes4,bytes),uint256),uint256,uint256,uint256,bytes4,bytes))\":{\"details\":\"cancel the the given order by adding the biggest possible number to fills mapping\"},\"matchAndTransferWithoutSignature((address,((bytes4,bytes),uint256),address,((bytes4,bytes),uint256),uint256,uint256,uint256,bytes4,bytes),(address,((bytes4,bytes),uint256),address,((bytes4,bytes),uint256),uint256,uint256,uint256,bytes4,bytes))\":{\"details\":\"match orders without a signature, only admin\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setFeeReceiver(address,address)\":{\"params\":{\"token\":\"token contract address\",\"wallet\":\"fee receiver address\"}},\"setMatchTransferAdminAccount(address)\":{\"details\":\"set admin address that can use the matchAndTransferWithoutSignature function\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"setFeeReceiver(address,address)\":{\"notice\":\"set fee for different tokens types\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/ExchangeV2.sol\":\"ExchangeV2\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb419e68addcb82ecda3ad3974b0d2db76435ce9b08435a04d5b119a0c5d45ea5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712Upgradeable is Initializable {\\n    /* solhint-disable var-name-mixedcase */\\n    bytes32 private _HASHED_NAME;\\n    bytes32 private _HASHED_VERSION;\\n    bytes32 private constant _TYPE_HASH = keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    function __EIP712_init(string memory name, string memory version) internal initializer {\\n        __EIP712_init_unchained(name, version);\\n    }\\n\\n    function __EIP712_init_unchained(string memory name, string memory version) internal initializer {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        return _buildDomainSeparator(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash());\\n    }\\n\\n    function _buildDomainSeparator(bytes32 typeHash, bytes32 name, bytes32 version) private view returns (bytes32) {\\n        return keccak256(\\n            abi.encode(\\n                typeHash,\\n                name,\\n                version,\\n                _getChainId(),\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", _domainSeparatorV4(), structHash));\\n    }\\n\\n    function _getChainId() private view returns (uint256 chainId) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            chainId := chainid()\\n        }\\n    }\\n\\n    /**\\n     * @dev The hash of the name parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712NameHash() internal virtual view returns (bytes32) {\\n        return _HASHED_NAME;\\n    }\\n\\n    /**\\n     * @dev The hash of the version parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712VersionHash() internal virtual view returns (bytes32) {\\n        return _HASHED_VERSION;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x6cd0bc8c149150614ca3d4a3d3d21f844a0ab3032625f34fcfcf1c2c8b351638\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4784c3f8a520a739dd25d76f514833a653990902d0e21601aed45bda44c87524\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x0dd1e9b19801e3e7d900fbf4182d81e1afd23ad7be39504e33df6bbcba91d724\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xd8e4eb08dcc1d1860fb347ba5ffd595242b9a1b66d49a47f2b4cb51c3f35017e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xcbc02d192c55298cf65e5695375c839eac979a597a0fbdc1635195c4d28ca5ac\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xa1931c47a617014f858580db625aa0dcf343796f39acd4b5b51effc092a1f0a9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x3dab19bb4a63bcbda1ee153ca291694f92f9009fad28626126b15a8503b0e5ff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfc5ea91fa9ceb1961023b2a6c978b902888c52b90847ac7813fe3b79524165f6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xbbf8a21b9a66c48d45ff771b8563c6df19ba451d63dfb8380a865c1e1f29d1a0\",\"license\":\"MIT\"},\"src/AssetMatcher.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"./IAssetMatcher.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nabstract contract AssetMatcher is Initializable, OwnableUpgradeable {\\n    bytes constant EMPTY = \\\"\\\";\\n    mapping(bytes4 => address) matchers;\\n\\n    event MatcherChange(bytes4 indexed assetType, address matcher);\\n\\n    function setAssetMatcher(bytes4 assetType, address matcher) external onlyOwner {\\n        matchers[assetType] = matcher;\\n        emit MatcherChange(assetType, matcher);\\n    }\\n\\n    function matchAssets(LibAsset.AssetType memory leftAssetType, LibAsset.AssetType memory rightAssetType)\\n        internal\\n        view\\n        returns (LibAsset.AssetType memory)\\n    {\\n        LibAsset.AssetType memory result = matchAssetOneSide(leftAssetType, rightAssetType);\\n        if (result.assetClass == 0) {\\n            return matchAssetOneSide(rightAssetType, leftAssetType);\\n        } else {\\n            return result;\\n        }\\n    }\\n\\n    function matchAssetOneSide(LibAsset.AssetType memory leftAssetType, LibAsset.AssetType memory rightAssetType)\\n        private\\n        view\\n        returns (LibAsset.AssetType memory)\\n    {\\n        bytes4 classLeft = leftAssetType.assetClass;\\n        bytes4 classRight = rightAssetType.assetClass;\\n        if (classLeft == LibAsset.ETH_ASSET_CLASS) {\\n            if (classRight == LibAsset.ETH_ASSET_CLASS) {\\n                return leftAssetType;\\n            }\\n            return LibAsset.AssetType(0, EMPTY);\\n        }\\n        if (classLeft == LibAsset.ERC20_ASSET_CLASS) {\\n            if (classRight == LibAsset.ERC20_ASSET_CLASS) {\\n                return simpleMatch(leftAssetType, rightAssetType);\\n            }\\n            return LibAsset.AssetType(0, EMPTY);\\n        }\\n        if (classLeft == LibAsset.ERC721_ASSET_CLASS) {\\n            if (classRight == LibAsset.ERC721_ASSET_CLASS) {\\n                return simpleMatch(leftAssetType, rightAssetType);\\n            }\\n            return LibAsset.AssetType(0, EMPTY);\\n        }\\n        if (classLeft == LibAsset.ERC1155_ASSET_CLASS) {\\n            if (classRight == LibAsset.ERC1155_ASSET_CLASS) {\\n                return simpleMatch(leftAssetType, rightAssetType);\\n            }\\n            return LibAsset.AssetType(0, EMPTY);\\n        }\\n        address matcher = matchers[classLeft];\\n        if (matcher != address(0)) {\\n            return IAssetMatcher(matcher).matchAssets(leftAssetType, rightAssetType);\\n        }\\n        if (classLeft == classRight) {\\n            return simpleMatch(leftAssetType, rightAssetType);\\n        }\\n        revert(\\\"not found IAssetMatcher\\\");\\n    }\\n\\n    function simpleMatch(LibAsset.AssetType memory leftAssetType, LibAsset.AssetType memory rightAssetType)\\n        private\\n        pure\\n        returns (LibAsset.AssetType memory)\\n    {\\n        bytes32 leftHash = keccak256(leftAssetType.data);\\n        bytes32 rightHash = keccak256(rightAssetType.data);\\n        if (leftHash == rightHash) {\\n            return leftAssetType;\\n        }\\n        return LibAsset.AssetType(0, EMPTY);\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb5788916eaa34e45233dff817a94154a015ac7d3704aa813231c6010b7e9ec84\",\"license\":\"MIT\"},\"src/ExchangeV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"./ExchangeV2Core.sol\\\";\\nimport \\\"./GhostMarketTransferManager.sol\\\";\\n\\ncontract ExchangeV2 is ExchangeV2Core, GhostMarketTransferManager {\\n    using LibTransfer for address;\\n\\n    /**\\n     * @dev initialize ExchangeV2\\n     *\\n     * @param _transferProxy address for proxy transfer contract that handles ERC721 & ERC1155 contracts\\n     * @param _erc20TransferProxy address for proxy transfer contract that handles ERC20 contracts\\n     * @param newProtocolFee address for protocol fee\\n     * @param newDefaultFeeReceiver address for protocol fee if fee by token type is not set (GhostMarketTransferManager.sol => function getFeeReceiver)\\n     */\\n    function __ExchangeV2_init(\\n        INftTransferProxy _transferProxy,\\n        IERC20TransferProxy _erc20TransferProxy,\\n        uint256 newProtocolFee,\\n        address newDefaultFeeReceiver,\\n        IRoyaltiesProvider newRoyaltiesProvider\\n    ) external initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n        __TransferExecutor_init_unchained(_transferProxy, _erc20TransferProxy);\\n        __GhostMarketTransferManager_init_unchained(newProtocolFee, newDefaultFeeReceiver, newRoyaltiesProvider);\\n        __OrderValidator_init_unchained();\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x62c49542e725b63d9a8e4d43a76355c18e13b7a560a008e92b459b15ffb00bce\",\"license\":\"MIT\"},\"src/ExchangeV2Core.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"./OrderValidator.sol\\\";\\nimport \\\"./AssetMatcher.sol\\\";\\nimport \\\"./LibOrderData.sol\\\";\\nimport \\\"./ITransferManager.sol\\\";\\nimport \\\"./lib/LibTransfer.sol\\\";\\n\\nabstract contract ExchangeV2Core is\\n    Initializable,\\n    OwnableUpgradeable,\\n    AssetMatcher,\\n    TransferExecutor,\\n    OrderValidator,\\n    ITransferManager\\n{\\n    using SafeMathUpgradeable for uint256;\\n    using LibTransfer for address;\\n\\n    uint256 private constant UINT256_MAX = 2**256 - 1;\\n\\n    address public matchAndTransferAdmin;\\n\\n    //state of the orders\\n    mapping(bytes32 => uint256) public fills;\\n\\n    //events\\n    event OrderCancelled(bytes32 hash, address maker, LibAsset.AssetType makeAssetType, LibAsset.AssetType takeAssetType);\\n    event OrderFilled(bytes32 leftHash, bytes32 rightHash, address leftMaker, address rightMaker, uint newLeftFill, uint newRightFill, LibAsset.AssetType leftAsset, LibAsset.AssetType rightAsset);\\n\\n    /**\\n     * @dev cancel the the given order by adding the biggest possible number to fills mapping\\n     */\\n    function cancel(LibOrder.Order memory order) external {\\n        require(_msgSender() == order.maker, \\\"not a maker\\\");\\n        require(order.salt != 0, \\\"0 salt can't be used\\\");\\n        bytes32 orderKeyHash = LibOrder.hashKey(order);\\n        fills[orderKeyHash] = UINT256_MAX;\\n        emit OrderCancelled(orderKeyHash, order.maker, order.makeAsset.assetType, order.takeAsset.assetType);\\n    }\\n\\n    /**\\n     * @dev call the cancel fucntion in a loop canceling multiple orders\\n     */\\n    function bulkCancelOrders(LibOrder.Order[] memory orders) external {\\n        for (uint256 i = 0; i < orders.length; i++) {\\n            // we can't call this.cancel function as the _msgSender() is changed to the contract address\\n            // and the _msgSender() == order.maker check fails\\n            require(_msgSender() == orders[i].maker, \\\"not a maker\\\");\\n            require(orders[i].salt != 0, \\\"0 salt can't be used\\\");\\n            bytes32 orderKeyHash = LibOrder.hashKey(orders[i]);\\n            fills[orderKeyHash] = UINT256_MAX;\\n            emit OrderCancelled(orderKeyHash, orders[i].maker, orders[i].makeAsset.assetType, orders[i].takeAsset.assetType);\\n        }\\n    }\\n\\n    function matchOrders(\\n        LibOrder.Order memory orderLeft,\\n        bytes memory signatureLeft,\\n        LibOrder.Order memory orderRight,\\n        bytes memory signatureRight\\n    ) external payable {\\n        validateFull(orderLeft, signatureLeft);\\n        validateFull(orderRight, signatureRight);\\n        if (orderLeft.taker != address(0)) {\\n            require(orderRight.maker == orderLeft.taker, \\\"leftOrder.taker verification failed\\\");\\n        }\\n        if (orderRight.taker != address(0)) {\\n            require(orderRight.taker == orderLeft.maker, \\\"rightOrder.taker verification failed\\\");\\n        }\\n\\n        matchAndTransfer(orderLeft, orderRight);\\n    }\\n\\n    /**\\n     * @dev set admin address that can use the matchAndTransferWithoutSignature function\\n     */\\n    function setMatchTransferAdminAccount(address mata) external onlyOwner {\\n        matchAndTransferAdmin = mata;\\n    }\\n\\n    /**\\n     * @dev match orders without a signature, only admin\\n     */\\n    function matchAndTransferWithoutSignature(LibOrder.Order memory orderLeft, LibOrder.Order memory orderRight)\\n        external\\n        payable\\n    {\\n        require(msg.sender == matchAndTransferAdmin, \\\"not allowed to matchAndTransfer without a signature\\\");\\n        matchAndTransfer(orderLeft, orderRight);\\n    }\\n\\n    function matchAndTransfer(LibOrder.Order memory orderLeft, LibOrder.Order memory orderRight) internal {\\n        (LibAsset.AssetType memory makeMatch, LibAsset.AssetType memory takeMatch) = matchAssets(orderLeft, orderRight);\\n        bytes32 leftOrderKeyHash = LibOrder.hashKey(orderLeft);\\n        bytes32 rightOrderKeyHash = LibOrder.hashKey(orderRight);\\n\\n        LibOrderDataV2.DataV2 memory leftOrderData = LibOrderData.parse(orderLeft);\\n        LibOrderDataV2.DataV2 memory rightOrderData = LibOrderData.parse(orderRight);\\n\\n        LibFill.FillResult memory newFill = getFillSetNew(orderLeft, orderRight, leftOrderKeyHash, rightOrderKeyHash, leftOrderData, rightOrderData);\\n\\n        (uint totalMakeValue, uint totalTakeValue) = doTransfers(makeMatch, takeMatch, newFill, orderLeft, orderRight, leftOrderData, rightOrderData);\\n        if (makeMatch.assetClass == LibAsset.ETH_ASSET_CLASS) {\\n            require(takeMatch.assetClass != LibAsset.ETH_ASSET_CLASS);\\n            require(msg.value >= totalMakeValue, \\\"not enough BaseCurrency\\\");\\n            if (msg.value > totalMakeValue) {\\n                address(msg.sender).transferEth(msg.value.sub(totalMakeValue));\\n            }\\n        } else if (takeMatch.assetClass == LibAsset.ETH_ASSET_CLASS) {\\n            require(msg.value >= totalTakeValue, \\\"not enough BaseCurrency\\\");\\n            if (msg.value > totalTakeValue) {\\n                address(msg.sender).transferEth(msg.value.sub(totalTakeValue));\\n            }\\n        }\\n        emit OrderFilled(leftOrderKeyHash, rightOrderKeyHash, orderLeft.maker, orderRight.maker, newFill.rightValue, newFill.leftValue, makeMatch, takeMatch);\\n    }\\n\\n    function getFillSetNew(\\n        LibOrder.Order memory orderLeft,\\n        LibOrder.Order memory orderRight,\\n        bytes32 leftOrderKeyHash,\\n        bytes32 rightOrderKeyHash,\\n        LibOrderDataV2.DataV2 memory leftOrderData,\\n        LibOrderDataV2.DataV2 memory rightOrderData\\n    ) internal returns (LibFill.FillResult memory) {\\n        uint leftOrderFill = getOrderFill(orderLeft, leftOrderKeyHash);\\n        uint rightOrderFill = getOrderFill(orderRight, rightOrderKeyHash);\\n        LibFill.FillResult memory newFill = LibFill.fillOrder(orderLeft, orderRight, leftOrderFill, rightOrderFill, leftOrderData.isMakeFill, rightOrderData.isMakeFill);\\n\\n        require(newFill.rightValue > 0 && newFill.leftValue > 0, \\\"nothing to fill\\\");\\n\\n        if (orderLeft.salt != 0) {\\n            if (leftOrderData.isMakeFill) {\\n                fills[leftOrderKeyHash] = leftOrderFill.add(newFill.leftValue);\\n            } else {\\n                fills[leftOrderKeyHash] = leftOrderFill.add(newFill.rightValue);\\n            }\\n        }\\n\\n        if (orderRight.salt != 0) {\\n            if (rightOrderData.isMakeFill) {\\n                fills[rightOrderKeyHash] = rightOrderFill.add(newFill.rightValue);\\n            } else {\\n                fills[rightOrderKeyHash] = rightOrderFill.add(newFill.leftValue);\\n            }\\n        }\\n        return newFill;\\n    }\\n\\n    function getOrderFill(LibOrder.Order memory order, bytes32 hash) internal view returns (uint fill) {\\n        if (order.salt == 0) {\\n            fill = 0;\\n        } else {\\n            fill = fills[hash];\\n        }\\n    }\\n\\n    function matchAssets(LibOrder.Order memory orderLeft, LibOrder.Order memory orderRight)\\n        internal\\n        view\\n        returns (LibAsset.AssetType memory makeMatch, LibAsset.AssetType memory takeMatch)\\n    {\\n        makeMatch = matchAssets(orderLeft.makeAsset.assetType, orderRight.takeAsset.assetType);\\n        require(makeMatch.assetClass != 0, \\\"assets don't match\\\");\\n        takeMatch = matchAssets(orderLeft.takeAsset.assetType, orderRight.makeAsset.assetType);\\n        require(takeMatch.assetClass != 0, \\\"assets don't match\\\");\\n    }\\n\\n    function validateFull(LibOrder.Order memory order, bytes memory signature) internal view {\\n        LibOrder.validate(order);\\n        validate(order, signature);\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x803cf568be3efe8883d6a20682eda5043112a5299aa7ab1a145e4df7a2928238\",\"license\":\"MIT\"},\"src/GhostMarketTransferManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"./LibFeeSide.sol\\\";\\nimport \\\"./ITransferManager.sol\\\";\\nimport \\\"./LibOrderData.sol\\\";\\nimport \\\"./royalties/IRoyaltiesProvider.sol\\\";\\nimport \\\"./lib/BpLibrary.sol\\\";\\n\\nabstract contract GhostMarketTransferManager is OwnableUpgradeable, ITransferManager {\\n    using BpLibrary for uint;\\n    using SafeMathUpgradeable for uint;\\n\\n    uint public protocolFee;\\n    IRoyaltiesProvider public royaltiesRegistry;\\n\\n    address public defaultFeeReceiver;\\n    mapping(address => address) public feeReceivers;\\n\\n    function __GhostMarketTransferManager_init_unchained(\\n        uint newProtocolFee,\\n        address newDefaultFeeReceiver,\\n        IRoyaltiesProvider newRoyaltiesProvider\\n    ) internal initializer {\\n        protocolFee = newProtocolFee;\\n        defaultFeeReceiver = newDefaultFeeReceiver;\\n        royaltiesRegistry = newRoyaltiesProvider;\\n    }\\n\\n    function setRoyaltiesRegistry(IRoyaltiesProvider newRoyaltiesRegistry) external onlyOwner {\\n        royaltiesRegistry = newRoyaltiesRegistry;\\n    }\\n\\n    function setProtocolFee(uint newProtocolFee) external onlyOwner {\\n        protocolFee = newProtocolFee;\\n    }\\n\\n    function setDefaultFeeReceiver(address payable newDefaultFeeReceiver) external onlyOwner {\\n        defaultFeeReceiver = newDefaultFeeReceiver;\\n    }\\n\\n    /**\\n     * set fee for different tokens types\\n     *\\n     * @param token token contract address\\n     * @param wallet fee receiver address\\n     */\\n    function setFeeReceiver(address token, address wallet) external onlyOwner {\\n        feeReceivers[token] = wallet;\\n    }\\n\\n    /**\\n     * fee and their receiver can be set for different tokens types\\n     * if the wallet address is empty the defaultFeeReceiver address gets the fees\\n     *\\n     * @param token token contract address\\n     */\\n    function getFeeReceiver(address token) internal view returns (address) {\\n        address wallet = feeReceivers[token];\\n        if (wallet != address(0)) {\\n            return wallet;\\n        }\\n        return defaultFeeReceiver;\\n    }\\n\\n    /**\\n     * LibFill [1, 100] makeValue: 1 takeValue: 100\\n     */\\n    function doTransfers(\\n        LibAsset.AssetType memory makeMatch,\\n        LibAsset.AssetType memory takeMatch,\\n        LibFill.FillResult memory fill,\\n        LibOrder.Order memory leftOrder,\\n        LibOrder.Order memory rightOrder,\\n        LibOrderDataV2.DataV2 memory leftOrderData,\\n        LibOrderDataV2.DataV2 memory rightOrderData\\n    ) override internal returns (uint totalMakeValue, uint totalTakeValue) {\\n        LibFeeSide.FeeSide feeSide = LibFeeSide.getFeeSide(makeMatch.assetClass, takeMatch.assetClass);\\n        totalMakeValue = fill.leftValue;\\n        totalTakeValue = fill.rightValue;\\n        if (feeSide == LibFeeSide.FeeSide.MAKE) {\\n            totalMakeValue = doTransfersWithFees(fill.leftValue, leftOrder.maker, leftOrderData, rightOrderData, makeMatch, takeMatch,  TO_TAKER);\\n            transferPayouts(takeMatch, fill.rightValue, rightOrder.maker, leftOrderData.payouts, TO_MAKER);\\n        } else if (feeSide == LibFeeSide.FeeSide.TAKE) {\\n            totalTakeValue = doTransfersWithFees(fill.rightValue, rightOrder.maker, rightOrderData, leftOrderData, takeMatch, makeMatch, TO_MAKER);\\n            transferPayouts(makeMatch, fill.leftValue, leftOrder.maker, rightOrderData.payouts, TO_TAKER);\\n        } else {\\n            transferPayouts(makeMatch, fill.leftValue, leftOrder.maker, rightOrderData.payouts, TO_TAKER);\\n            transferPayouts(takeMatch, fill.rightValue, rightOrder.maker, leftOrderData.payouts, TO_MAKER);\\n        }\\n    }\\n\\n    function doTransfersWithFees(\\n        uint amount,\\n        address from,\\n        LibOrderDataV2.DataV2 memory dataCalculate,\\n        LibOrderDataV2.DataV2 memory dataNft,\\n        LibAsset.AssetType memory matchCalculate,\\n        LibAsset.AssetType memory matchNft,\\n        bytes4 transferDirection\\n    ) internal returns (uint totalAmount) {\\n        totalAmount = calculateTotalAmount(amount, protocolFee, dataCalculate.originFees);\\n        uint rest = transferProtocolFee(totalAmount, amount, from, matchCalculate, transferDirection);\\n        rest = transferRoyalties(matchCalculate, matchNft, rest, amount, from, transferDirection);\\n        (rest,) = transferFees(matchCalculate, rest, amount, dataCalculate.originFees, from, transferDirection, ORIGIN);\\n        (rest,) = transferFees(matchCalculate, rest, amount, dataNft.originFees, from, transferDirection, ORIGIN);\\n        transferPayouts(matchCalculate, rest, from, dataNft.payouts, transferDirection);\\n    }\\n\\n    /**\\n     * @dev if the assetClass is ERC20_ASSET_CLASS or ERC1155_ASSET_CLASS\\n     * fees are transfered\\n     */\\n    function transferProtocolFee(\\n        uint totalAmount,\\n        uint amount,\\n        address from,\\n        LibAsset.AssetType memory matchCalculate,\\n        bytes4 transferDirection\\n    ) internal returns (uint) {\\n        (uint rest, uint fee) = subFeeInBp(totalAmount, amount, protocolFee);\\n        if (fee > 0) {\\n            address tokenAddress = address(0);\\n            if (matchCalculate.assetClass == LibAsset.ERC20_ASSET_CLASS) {\\n                tokenAddress = abi.decode(matchCalculate.data, (address));\\n            } else  if (matchCalculate.assetClass == LibAsset.ERC1155_ASSET_CLASS) {\\n                uint tokenId;\\n                (tokenAddress, tokenId) = abi.decode(matchCalculate.data, (address, uint));\\n            }\\n            transfer(LibAsset.Asset(matchCalculate, fee), from, getFeeReceiver(tokenAddress), transferDirection, PROTOCOL);\\n        }\\n        return rest;\\n    }\\n\\n    function transferRoyalties(\\n        LibAsset.AssetType memory matchCalculate,\\n        LibAsset.AssetType memory matchNft,\\n        uint rest,\\n        uint amount,\\n        address from,\\n        bytes4 transferDirection\\n    ) internal returns (uint) {\\n        LibPart.Part[] memory fees = getRoyaltiesByAssetType(matchNft);\\n\\n        (uint result, uint totalRoyalties) = transferFees(\\n            matchCalculate,\\n            rest,\\n            amount,\\n            fees,\\n            from,\\n            transferDirection,\\n            ROYALTY\\n        );\\n        require(totalRoyalties <= 5000, \\\"Royalties are too high (>50%)\\\");\\n        return result;\\n    }\\n\\n    function getRoyaltiesByAssetType(LibAsset.AssetType memory matchNft) internal returns (LibPart.Part[] memory) {\\n        if (matchNft.assetClass == LibAsset.ERC1155_ASSET_CLASS || matchNft.assetClass == LibAsset.ERC721_ASSET_CLASS) {\\n            (address token, uint tokenId) = abi.decode(matchNft.data, (address, uint));\\n            return royaltiesRegistry.getRoyalties(token, tokenId);\\n        }\\n        LibPart.Part[] memory empty;\\n        return empty;\\n    }\\n\\n    function transferFees(\\n        LibAsset.AssetType memory matchCalculate,\\n        uint rest,\\n        uint amount,\\n        LibPart.Part[] memory fees,\\n        address from,\\n        bytes4 transferDirection,\\n        bytes4 transferType\\n    ) internal returns (uint restValue, uint totalFees) {\\n        totalFees = 0;\\n        restValue = rest;\\n        for (uint256 i = 0; i < fees.length; i++) {\\n            totalFees = totalFees.add(fees[i].value);\\n            (uint newRestValue, uint feeValue) = subFeeInBp(restValue, amount, fees[i].value);\\n            restValue = newRestValue;\\n            if (feeValue > 0) {\\n                transfer(LibAsset.Asset(matchCalculate, feeValue), from,  fees[i].account, transferDirection, transferType);\\n            }\\n        }\\n    }\\n\\n    function transferPayouts(\\n        LibAsset.AssetType memory matchCalculate,\\n        uint256 amount,\\n        address from,\\n        LibPart.Part[] memory payouts,\\n        bytes4 transferDirection\\n    ) internal {\\n        uint256 sumBps = 0;\\n        for (uint256 i = 0; i < payouts.length; i++) {\\n            uint256 currentAmount = amount.bp(payouts[i].value);\\n            sumBps = sumBps.add(payouts[i].value);\\n            if (currentAmount > 0) {\\n                transfer(\\n                    LibAsset.Asset(matchCalculate, currentAmount),\\n                    from,\\n                    payouts[i].account,\\n                    transferDirection,\\n                    PAYOUT\\n                );\\n            }\\n        }\\n        require(sumBps == 10000, \\\"Sum payouts Bps not equal 100%\\\");\\n    }\\n\\n    function calculateTotalAmount(\\n        uint256 amount,\\n        uint256 feeOnTopBp,\\n        LibPart.Part[] memory orderOriginFees\\n    ) internal pure returns (uint256 total) {\\n        total = amount.add(amount.bp(feeOnTopBp));\\n        for (uint256 i = 0; i < orderOriginFees.length; i++) {\\n            total = total.add(amount.bp(orderOriginFees[i].value));\\n        }\\n    }\\n\\n    function subFeeInBp(\\n        uint256 value,\\n        uint256 total,\\n        uint256 feeInBp\\n    ) internal pure returns (uint256 newValue, uint256 realFee) {\\n        return subFee(value, total.bp(feeInBp));\\n    }\\n\\n    function subFee(uint256 value, uint256 fee) internal pure returns (uint256 newValue, uint256 realFee) {\\n        if (value > fee) {\\n            newValue = value.sub(fee);\\n            realFee = fee;\\n        } else {\\n            newValue = 0;\\n            realFee = value;\\n        }\\n    }\\n\\n    uint256[46] private __gap;\\n}\\n\",\"keccak256\":\"0x88da4fb88191ec2d8a65bbcbce7a3a974c7457b3eda5dfcf447288d0dfc11402\",\"license\":\"MIT\"},\"src/IAssetMatcher.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"./lib/LibAsset.sol\\\";\\n\\ninterface IAssetMatcher {\\n    function matchAssets(LibAsset.AssetType memory leftAssetType, LibAsset.AssetType memory rightAssetType)\\n        external\\n        view\\n        returns (LibAsset.AssetType memory);\\n}\\n\",\"keccak256\":\"0xa6f10068b04456720cc95357f6d3173df6440109ead124dc6d95d1e78cf42ed3\",\"license\":\"MIT\"},\"src/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nabstract contract IERC1271 {\\n    // bytes4(keccak256(\\\"isValidSignature(bytes,bytes)\\\")\\n    bytes4 internal constant MAGICVALUE = 0x1626ba7e;\\n\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param _hash Hash of the data signed on the behalf of address(this)\\n     * @param _signature Signature byte array associated with _data\\n     *\\n     * MUST return the bytes4 magic value 0x1626ba7e when function passes.\\n     * MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5)\\n     * MUST allow external calls\\n     */\\n    function isValidSignature(bytes32 _hash, bytes calldata _signature)\\n        external\\n        view\\n        virtual\\n        returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x3d3680b4e3751ca31bfa7185624e0dbff2a8c367aa97151abafa9e3cd0c6b729\",\"license\":\"MIT\"},\"src/ITransferExecutor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"./lib/LibAsset.sol\\\";\\n\\nabstract contract ITransferExecutor {\\n    //events\\n    event Transfer(LibAsset.Asset asset, address from, address to, bytes4 transferDirection, bytes4 transferType);\\n\\n    function transfer(\\n        LibAsset.Asset memory asset,\\n        address from,\\n        address to,\\n        bytes4 transferDirection,\\n        bytes4 transferType\\n    ) internal virtual;\\n}\\n\",\"keccak256\":\"0xac53c2a6f6a79a76ad219552dc5681a80e534771bde9bf252a95c3c097b57d75\",\"license\":\"MIT\"},\"src/ITransferManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"./LibFill.sol\\\";\\nimport \\\"./TransferExecutor.sol\\\";\\n\\nabstract contract ITransferManager is ITransferExecutor {\\n    bytes4 constant TO_MAKER = bytes4(keccak256(\\\"TO_MAKER\\\"));\\n    bytes4 constant TO_TAKER = bytes4(keccak256(\\\"TO_TAKER\\\"));\\n    bytes4 constant PROTOCOL = bytes4(keccak256(\\\"PROTOCOL\\\"));\\n    bytes4 constant ROYALTY = bytes4(keccak256(\\\"ROYALTY\\\"));\\n    bytes4 constant ORIGIN = bytes4(keccak256(\\\"ORIGIN\\\"));\\n    bytes4 constant PAYOUT = bytes4(keccak256(\\\"PAYOUT\\\"));\\n\\n    function doTransfers(\\n        LibAsset.AssetType memory makeMatch,\\n        LibAsset.AssetType memory takeMatch,\\n        LibFill.FillResult memory fill,\\n        LibOrder.Order memory leftOrder,\\n        LibOrder.Order memory rightOrder,\\n        LibOrderDataV2.DataV2 memory leftOrderData,\\n        LibOrderDataV2.DataV2 memory rightOrderData\\n    ) internal virtual returns (uint totalMakeValue, uint totalTakeValue);\\n}\\n\",\"keccak256\":\"0x5d4b6994be8038df6e7f3a456ba2bf1d96b60e88f5bd0a337560e87aa44dd279\",\"license\":\"MIT\"},\"src/LibFeeSide.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"./lib/LibAsset.sol\\\";\\n\\nlibrary LibFeeSide {\\n    enum FeeSide {\\n        NONE,\\n        MAKE,\\n        TAKE\\n    }\\n\\n    function getFeeSide(bytes4 make, bytes4 take) internal pure returns (FeeSide) {\\n        if (make == LibAsset.ETH_ASSET_CLASS) {\\n            return FeeSide.MAKE;\\n        }\\n        if (take == LibAsset.ETH_ASSET_CLASS) {\\n            return FeeSide.TAKE;\\n        }\\n        if (make == LibAsset.ERC20_ASSET_CLASS) {\\n            return FeeSide.MAKE;\\n        }\\n        if (take == LibAsset.ERC20_ASSET_CLASS) {\\n            return FeeSide.TAKE;\\n        }\\n        if (make == LibAsset.ERC1155_ASSET_CLASS) {\\n            return FeeSide.MAKE;\\n        }\\n        if (take == LibAsset.ERC1155_ASSET_CLASS) {\\n            return FeeSide.TAKE;\\n        }\\n        return FeeSide.NONE;\\n    }\\n}\\n\",\"keccak256\":\"0xa258e21689c889bb5825d7c33bf4eff32146d743e8bf8077373f025de668de44\",\"license\":\"MIT\"},\"src/LibFill.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"./LibOrder.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\n\\nlibrary LibFill {\\n    using SafeMathUpgradeable for uint;\\n\\n    struct FillResult {\\n        uint leftValue;\\n        uint rightValue;\\n    }\\n\\n    /**\\n     * @dev Should return filled values\\n     * @param leftOrder left order\\n     * @param rightOrder right order\\n     * @param leftOrderFill current fill of the left order (0 if order is unfilled)\\n     * @param rightOrderFill current fill of the right order (0 if order is unfilled)\\n     * @param leftIsMakeFill true if left orders fill is calculated from the make side, false if from the take side\\n     * @param rightIsMakeFill true if right orders fill is calculated from the make side, false if from the take side\\n     */\\n    function fillOrder(LibOrder.Order memory leftOrder, LibOrder.Order memory rightOrder, uint leftOrderFill, uint rightOrderFill, bool leftIsMakeFill, bool rightIsMakeFill) internal pure returns (FillResult memory) {\\n        (uint leftMakeValue, uint leftTakeValue) = LibOrder.calculateRemaining(leftOrder, leftOrderFill, leftIsMakeFill);\\n        (uint rightMakeValue, uint rightTakeValue) = LibOrder.calculateRemaining(rightOrder, rightOrderFill, rightIsMakeFill);\\n\\n        //We have 3 cases here:\\n        if (rightTakeValue > leftMakeValue) { //1nd: left order should be fully filled\\n            return fillLeft(leftMakeValue, leftTakeValue, rightOrder.makeAsset.value, rightOrder.takeAsset.value);\\n        }//2st: right order should be fully filled or 3d: both should be fully filled if required values are the same\\n        return fillRight(leftOrder.makeAsset.value, leftOrder.takeAsset.value, rightMakeValue, rightTakeValue);\\n    }\\n\\n    function fillRight(uint leftMakeValue, uint leftTakeValue, uint rightMakeValue, uint rightTakeValue) internal pure returns (FillResult memory result) {\\n        uint makerValue = LibMath.safeGetPartialAmountFloor(rightTakeValue, leftMakeValue, leftTakeValue);\\n        require(makerValue <= rightMakeValue, \\\"fillRight: unable to fill\\\");\\n        return FillResult(rightTakeValue, makerValue);\\n    }\\n\\n    function fillLeft(uint leftMakeValue, uint leftTakeValue, uint rightMakeValue, uint rightTakeValue) internal pure returns (FillResult memory result) {\\n        uint rightTake = LibMath.safeGetPartialAmountFloor(leftTakeValue, rightMakeValue, rightTakeValue);\\n        require(rightTake <= leftMakeValue, \\\"fillLeft: unable to fill\\\");\\n        return FillResult(leftMakeValue, leftTakeValue);\\n    }\\n}\\n\",\"keccak256\":\"0x433c285eb28e2f18aa1bd05b2d4de8abbc028909dc6c04ed852a4e886fcb076e\",\"license\":\"MIT\"},\"src/LibOrder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"./lib/LibMath.sol\\\";\\nimport \\\"./lib/LibAsset.sol\\\";\\nimport \\\"./LibOrderDataV2.sol\\\";\\nimport \\\"./LibOrderDataV1.sol\\\";\\n\\nlibrary LibOrder {\\n    using SafeMathUpgradeable for uint;\\n\\n    bytes32 constant ORDER_TYPEHASH = keccak256(\\n        \\\"Order(address maker,Asset makeAsset,address taker,Asset takeAsset,uint256 salt,uint256 start,uint256 end,bytes4 dataType,bytes data)Asset(AssetType assetType,uint256 value)AssetType(bytes4 assetClass,bytes data)\\\"\\n    );\\n\\n    struct Order {\\n        address maker;\\n        LibAsset.Asset makeAsset;\\n        address taker;\\n        LibAsset.Asset takeAsset;\\n        uint salt;\\n        uint start;\\n        uint end;\\n        bytes4 dataType;\\n        bytes data;\\n    }\\n\\n    function calculateRemaining(Order memory order, uint fill, bool isMakeFill) internal pure returns (uint makeValue, uint takeValue) {\\n        if (isMakeFill){\\n            makeValue = order.makeAsset.value.sub(fill);\\n            takeValue = LibMath.safeGetPartialAmountFloor(order.takeAsset.value, order.makeAsset.value, makeValue);\\n        } else {\\n            takeValue = order.takeAsset.value.sub(fill);\\n            makeValue = LibMath.safeGetPartialAmountFloor(order.makeAsset.value, order.takeAsset.value, takeValue);\\n        }\\n    }\\n\\n    function hashKey(Order memory order) internal pure returns (bytes32) {\\n        //order.data is in hash for V2 orders\\n        if (order.dataType == LibOrderDataV2.V2){\\n            return keccak256(abi.encode(\\n                order.maker,\\n                LibAsset.hash(order.makeAsset.assetType),\\n                LibAsset.hash(order.takeAsset.assetType),\\n                order.salt,\\n                order.data\\n            ));\\n        } else {\\n            return keccak256(abi.encode(\\n                order.maker,\\n                LibAsset.hash(order.makeAsset.assetType),\\n                LibAsset.hash(order.takeAsset.assetType),\\n                order.salt\\n            ));\\n        }\\n\\n    }\\n\\n    function hash(Order memory order) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n                ORDER_TYPEHASH,\\n                order.maker,\\n                LibAsset.hash(order.makeAsset),\\n                order.taker,\\n                LibAsset.hash(order.takeAsset),\\n                order.salt,\\n                order.start,\\n                order.end,\\n                order.dataType,\\n                keccak256(order.data)\\n            ));\\n    }\\n\\n    function validate(LibOrder.Order memory order) internal view {\\n        require(order.start == 0 || order.start < block.timestamp, \\\"Order start validation failed\\\");\\n        require(order.end == 0 || order.end > block.timestamp, \\\"Order end validation failed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x4be37dfab38eb021adadc31ca4ac261ed4f17bfa8c1dc3f132ed4a23881c2f9a\",\"license\":\"MIT\"},\"src/LibOrderData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"./LibOrder.sol\\\";\\n\\nlibrary LibOrderData {\\n    function parse(LibOrder.Order memory order) pure internal returns (LibOrderDataV2.DataV2 memory dataOrder) {\\n        if (order.dataType == LibOrderDataV1.V1) {\\n            LibOrderDataV1.DataV1 memory dataV1 = LibOrderDataV1.decodeOrderDataV1(order.data);\\n            dataOrder.payouts = dataV1.payouts;\\n            dataOrder.originFees = dataV1.originFees;\\n            dataOrder.isMakeFill = false;\\n        } else if (order.dataType == LibOrderDataV2.V2) {\\n            dataOrder = LibOrderDataV2.decodeOrderDataV2(order.data);\\n        } else if (order.dataType == 0xffffffff) {\\n        } else {\\n            revert(\\\"Unknown Order data type\\\");\\n        }\\n        if (dataOrder.payouts.length == 0) {\\n            dataOrder.payouts = payoutSet(order.maker);\\n        }\\n    }\\n\\n    function payoutSet(address orderAddress) pure internal returns (LibPart.Part[] memory) {\\n        LibPart.Part[] memory payout = new LibPart.Part[](1);\\n        payout[0].account = payable(orderAddress);\\n        payout[0].value = 10000;\\n        return payout;\\n    }\\n}\\n\",\"keccak256\":\"0x5ea812bec42e76025735629aabeffb6b7bb38e7bbf138a070c75ce0a9aedfaf8\",\"license\":\"MIT\"},\"src/LibOrderDataV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"./lib/LibPart.sol\\\";\\n\\nlibrary LibOrderDataV1 {\\n    bytes4 public constant V1 = bytes4(keccak256(\\\"V1\\\"));\\n\\n    struct DataV1 {\\n        LibPart.Part[] payouts;\\n        LibPart.Part[] originFees;\\n    }\\n\\n    function decodeOrderDataV1(bytes memory data) internal pure returns (DataV1 memory orderData) {\\n        orderData = abi.decode(data, (DataV1));\\n    }\\n}\\n\",\"keccak256\":\"0xce83e2edba8e66e5920ddde9a14eec233471ce564dd8a5dc9634f3ff9b41eeea\",\"license\":\"MIT\"},\"src/LibOrderDataV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"./lib/LibPart.sol\\\";\\n\\nlibrary LibOrderDataV2 {\\n    bytes4 constant public V2 = bytes4(keccak256(\\\"V2\\\"));\\n\\n    struct DataV2 {\\n        LibPart.Part[] payouts;\\n        LibPart.Part[] originFees;\\n        bool isMakeFill;\\n    }\\n\\n    function decodeOrderDataV2(bytes memory data) internal pure returns (DataV2 memory orderData) {\\n        orderData = abi.decode(data, (DataV2));\\n    }\\n\\n}\\n\",\"keccak256\":\"0x39e6176d0da4f1fb8162c62d954836c019356fab72ebd885da3234c10ae064bf\",\"license\":\"MIT\"},\"src/OrderValidator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"./IERC1271.sol\\\";\\nimport \\\"./LibOrder.sol\\\";\\nimport \\\"./libraries/LibSignature.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol\\\";\\n\\nabstract contract OrderValidator is Initializable, ContextUpgradeable, EIP712Upgradeable {\\n    using LibSignature for bytes32;\\n    using AddressUpgradeable for address;\\n\\n    bytes4 constant internal MAGICVALUE = 0x1626ba7e;\\n\\n    function __OrderValidator_init_unchained() internal initializer {\\n        __EIP712_init_unchained(\\\"GhostMarket\\\", \\\"2\\\");\\n    }\\n\\n    function validate(LibOrder.Order memory order, bytes memory signature) internal view {\\n        if (order.salt == 0) {\\n            if (order.maker != address(0)) {\\n                require(_msgSender() == order.maker, \\\"maker is not tx sender\\\");\\n            } else {\\n                order.maker = _msgSender();\\n            }\\n        } else {\\n            if (_msgSender() != order.maker) {\\n                bytes32 hash = LibOrder.hash(order);\\n                address signer;\\n                if (signature.length == 65) {\\n                    signer = _hashTypedDataV4(hash).recover(signature);\\n                }\\n                if  (signer != order.maker) {\\n                    if (order.maker.isContract()) {\\n                        require(\\n                            IERC1271(order.maker).isValidSignature(_hashTypedDataV4(hash), signature) == MAGICVALUE,\\n                            \\\"contract order signature verification error\\\"\\n                        );\\n                    } else {\\n                        revert(\\\"order signature verification error\\\");\\n                    }\\n                } else {\\n                    require (order.maker != address(0), \\\"no maker\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xbdc8c533c8642d787efad7ad3ccbd0c3584fafa0eda9e3feacdeb0d0bde54a8c\",\"license\":\"MIT\"},\"src/TransferExecutor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"./interfaces/ITransferProxy.sol\\\";\\nimport \\\"./interfaces/INftTransferProxy.sol\\\";\\nimport \\\"./interfaces/IERC20TransferProxy.sol\\\";\\nimport \\\"./ITransferExecutor.sol\\\";\\nimport \\\"./lib/LibTransfer.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nabstract contract TransferExecutor is Initializable, OwnableUpgradeable, ITransferExecutor {\\n    using LibTransfer for address;\\n\\n    mapping(bytes4 => address) proxies;\\n\\n    event ProxyChange(bytes4 indexed assetType, address proxy);\\n\\n    function __TransferExecutor_init_unchained(INftTransferProxy transferProxy, IERC20TransferProxy erc20TransferProxy)\\n        internal\\n    {\\n        proxies[LibAsset.ERC20_ASSET_CLASS] = address(erc20TransferProxy);\\n        proxies[LibAsset.ERC721_ASSET_CLASS] = address(transferProxy);\\n        proxies[LibAsset.ERC1155_ASSET_CLASS] = address(transferProxy);\\n    }\\n\\n    function setTransferProxy(bytes4 assetType, address proxy) public onlyOwner {\\n        proxies[assetType] = proxy;\\n        emit ProxyChange(assetType, proxy);\\n    }\\n\\n    function transfer(\\n        LibAsset.Asset memory asset,\\n        address from,\\n        address to,\\n        bytes4 transferDirection,\\n        bytes4 transferType\\n    ) internal override {\\n        if (asset.assetType.assetClass == LibAsset.ETH_ASSET_CLASS) {\\n            to.transferEth(asset.value);\\n        } else if (asset.assetType.assetClass == LibAsset.ERC20_ASSET_CLASS) {\\n            address token = abi.decode(asset.assetType.data, (address));\\n            IERC20TransferProxy(proxies[LibAsset.ERC20_ASSET_CLASS]).erc20safeTransferFrom(\\n                IERC20Upgradeable(token),\\n                from,\\n                to,\\n                asset.value\\n            );\\n        } else if (asset.assetType.assetClass == LibAsset.ERC721_ASSET_CLASS) {\\n            (address token, uint256 tokenId) = abi.decode(asset.assetType.data, (address, uint256));\\n            require(asset.value == 1, \\\"erc721 value error\\\");\\n            INftTransferProxy(proxies[LibAsset.ERC721_ASSET_CLASS]).erc721safeTransferFrom(\\n                IERC721Upgradeable(token),\\n                from,\\n                to,\\n                tokenId\\n            );\\n        } else if (asset.assetType.assetClass == LibAsset.ERC1155_ASSET_CLASS) {\\n            (address token, uint256 tokenId) = abi.decode(asset.assetType.data, (address, uint256));\\n            INftTransferProxy(proxies[LibAsset.ERC1155_ASSET_CLASS]).erc1155safeTransferFrom(\\n                IERC1155Upgradeable(token),\\n                from,\\n                to,\\n                tokenId,\\n                asset.value,\\n                \\\"\\\"\\n            );\\n        } else {\\n            ITransferProxy(proxies[asset.assetType.assetClass]).transfer(asset, from, to);\\n        }\\n        emit Transfer(asset, from, to, transferDirection, transferType);\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x29bdbb83e7259a834a60bea97a0fe6974ff0cb1abc0e9858115f424e5cfd84d1\",\"license\":\"MIT\"},\"src/interfaces/IERC20TransferProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev interface for transfering ERC20 tokens,\\n * contracts that implement this interface must support erc20safeTransferFrom method\\n */\\ninterface IERC20TransferProxy {\\n    function erc20safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external;\\n}\\n\",\"keccak256\":\"0x7f72688926b5e339268e0591be849ca4fd071bcce467882784bf9b50d22f3384\",\"license\":\"MIT\"},\"src/interfaces/INftTransferProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\\\";\\n\\n/**\\n * @dev interface for transfering ERC721 adn ERC1155 tokens,\\n * contracts that implement this interface must support\\n * erc721safeTransferFrom and erc1155safeTransferFrom functions\\n */\\ninterface INftTransferProxy {\\n    function erc721safeTransferFrom(\\n        IERC721Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    function erc1155safeTransferFrom(\\n        IERC1155Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x38a0dbc10e861bf5bfc7399a981d5f489ba1327bba787fc6ae2fe892483a73e7\",\"license\":\"MIT\"},\"src/interfaces/ITransferProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"../lib/LibAsset.sol\\\";\\n\\ninterface ITransferProxy {\\n    function transfer(\\n        LibAsset.Asset calldata asset,\\n        address from,\\n        address to\\n    ) external;\\n}\\n\",\"keccak256\":\"0xbf2620b4a1926bed5ed5944585f14d7199e880a8ff0c267ddb2085f058bb8467\",\"license\":\"MIT\"},\"src/lib/BpLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\n\\nlibrary BpLibrary {\\n    using SafeMathUpgradeable for uint256;\\n\\n    /**\\n     * @dev calculate the percentage amount of the given value\\n     */\\n    function bp(uint256 value, uint256 bpValue) internal pure returns (uint256) {\\n        return value.mul(bpValue).div(10000);\\n    }\\n}\\n\",\"keccak256\":\"0x2f86883175d7fb8ec64fd31eec010ab5f6129029bee14e261954ba3bd962c9e8\",\"license\":\"MIT\"},\"src/lib/LibAsset.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nlibrary LibAsset {\\n    bytes4 public constant ETH_ASSET_CLASS = bytes4(keccak256(\\\"ETH\\\"));\\n    bytes4 public constant ERC20_ASSET_CLASS = bytes4(keccak256(\\\"ERC20\\\"));\\n    bytes4 public constant ERC721_ASSET_CLASS = bytes4(keccak256(\\\"ERC721\\\"));\\n    bytes4 public constant ERC1155_ASSET_CLASS = bytes4(keccak256(\\\"ERC1155\\\"));\\n    bytes4 public constant _GHOSTMARKET_NFT_ROYALTIES = bytes4(keccak256(\\\"_GHOSTMARKET_NFT_ROYALTIES\\\"));\\n    bytes4 public constant COLLECTION = bytes4(keccak256(\\\"COLLECTION\\\"));\\n\\n    bytes32 constant ASSET_TYPE_TYPEHASH = keccak256(\\\"AssetType(bytes4 assetClass,bytes data)\\\");\\n\\n    bytes32 constant ASSET_TYPEHASH =\\n        keccak256(\\\"Asset(AssetType assetType,uint256 value)AssetType(bytes4 assetClass,bytes data)\\\");\\n\\n    struct AssetType {\\n        bytes4 assetClass;\\n        bytes data;\\n    }\\n\\n    struct Asset {\\n        AssetType assetType;\\n        uint256 value;\\n    }\\n\\n    function hash(AssetType memory assetType) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(ASSET_TYPE_TYPEHASH, assetType.assetClass, keccak256(assetType.data)));\\n    }\\n\\n    function hash(Asset memory asset) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(ASSET_TYPEHASH, hash(asset.assetType), asset.value));\\n    }\\n}\\n\",\"keccak256\":\"0x606a6c9b7302caea558e5dc96a5a1e086aff3b6dced094179b876527f6cebec9\",\"license\":\"MIT\"},\"src/lib/LibMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\n\\nlibrary LibMath {\\n    using SafeMathUpgradeable for uint256;\\n\\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\\n    ///      Reverts if rounding error is >= 0.1%\\n    /// @param numerator Numerator.\\n    /// @param denominator Denominator.\\n    /// @param target Value to calculate partial of.\\n    /// @return partialAmount value of target rounded down.\\n    function safeGetPartialAmountFloor(\\n        uint256 numerator,\\n        uint256 denominator,\\n        uint256 target\\n    ) internal pure returns (uint256 partialAmount) {\\n        if (isRoundingErrorFloor(numerator, denominator, target)) {\\n            revert(\\\"rounding error\\\");\\n        }\\n        partialAmount = numerator.mul(target).div(denominator);\\n    }\\n\\n    /// @dev Checks if rounding error >= 0.1% when rounding down.\\n    /// @param numerator Numerator.\\n    /// @param denominator Denominator.\\n    /// @param target Value to multiply with numerator/denominator.\\n    /// @return isError Rounding error is present.\\n    function isRoundingErrorFloor(\\n        uint256 numerator,\\n        uint256 denominator,\\n        uint256 target\\n    ) internal pure returns (bool isError) {\\n        if (denominator == 0) {\\n            revert(\\\"division by zero\\\");\\n        }\\n\\n        // The absolute rounding error is the difference between the rounded\\n        // value and the ideal value. The relative rounding error is the\\n        // absolute rounding error divided by the absolute value of the\\n        // ideal value. This is undefined when the ideal value is zero.\\n        //\\n        // The ideal value is `numerator * target / denominator`.\\n        // Let's call `numerator * target % denominator` the remainder.\\n        // The absolute error is `remainder / denominator`.\\n        //\\n        // When the ideal value is zero, we require the absolute error to\\n        // be zero. Fortunately, this is always the case. The ideal value is\\n        // zero iff `numerator == 0` and/or `target == 0`. In this case the\\n        // remainder and absolute error are also zero.\\n        if (target == 0 || numerator == 0) {\\n            return false;\\n        }\\n\\n        // Otherwise, we want the relative rounding error to be strictly\\n        // less than 0.1%.\\n        // The relative error is `remainder / (numerator * target)`.\\n        // We want the relative error less than 1 / 1000:\\n        //        remainder / (numerator * target)  <  1 / 1000\\n        // or equivalently:\\n        //        1000 * remainder  <  numerator * target\\n        // so we have a rounding error iff:\\n        //        1000 * remainder  >=  numerator * target\\n        uint256 remainder = mulmod(target, numerator, denominator);\\n        isError = remainder.mul(1000) >= numerator.mul(target);\\n    }\\n\\n    function safeGetPartialAmountCeil(\\n        uint256 numerator,\\n        uint256 denominator,\\n        uint256 target\\n    ) internal pure returns (uint256 partialAmount) {\\n        if (isRoundingErrorCeil(numerator, denominator, target)) {\\n            revert(\\\"rounding error\\\");\\n        }\\n        partialAmount = numerator.mul(target).add(denominator.sub(1)).div(denominator);\\n    }\\n\\n    /// @dev Checks if rounding error >= 0.1% when rounding up.\\n    /// @param numerator Numerator.\\n    /// @param denominator Denominator.\\n    /// @param target Value to multiply with numerator/denominator.\\n    /// @return isError Rounding error is present.\\n    function isRoundingErrorCeil(\\n        uint256 numerator,\\n        uint256 denominator,\\n        uint256 target\\n    ) internal pure returns (bool isError) {\\n        if (denominator == 0) {\\n            revert(\\\"division by zero\\\");\\n        }\\n\\n        // See the comments in `isRoundingError`.\\n        if (target == 0 || numerator == 0) {\\n            // When either is zero, the ideal value and rounded value are zero\\n            // and there is no rounding error. (Although the relative error\\n            // is undefined.)\\n            return false;\\n        }\\n        // Compute remainder as before\\n        uint256 remainder = mulmod(target, numerator, denominator);\\n        remainder = denominator.sub(remainder) % denominator;\\n        isError = remainder.mul(1000) >= numerator.mul(target);\\n        return isError;\\n    }\\n}\\n\",\"keccak256\":\"0xf022fc1f7f67c96190b428c39b8dd9b0010f7490bc074887620031b9c1d9d91b\",\"license\":\"MIT\"},\"src/lib/LibPart.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nlibrary LibPart {\\n    bytes32 public constant TYPE_HASH = keccak256(\\\"Part(address account,uint96 value)\\\");\\n\\n    struct Part {\\n        address payable account;\\n        uint96 value;\\n    }\\n\\n    function hash(Part memory part) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(TYPE_HASH, part.account, part.value));\\n    }\\n}\\n\",\"keccak256\":\"0xd0123f7411573a6a7e1527e0d3901913d7642e504ff240d5b7c5b76a28587def\",\"license\":\"MIT\"},\"src/lib/LibTransfer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nlibrary LibTransfer {\\n    function transferEth(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(\\\"\\\");\\n        require(success, \\\"LibTransfer BaseCurrency transfer failed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x3c6442dda96631f4516757d246fe5551be3f5540527ad39b9757b949d3a87c4e\",\"license\":\"MIT\"},\"src/libraries/LibSignature.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nlibrary LibSignature {\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature)\\n        internal\\n        pure\\n        returns (address)\\n    {\\n        // Check the signature length\\n        if (signature.length != 65) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        }\\n\\n        // Divide the signature in r, s and v variables\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // ecrecover takes the signature parameters, and the only way to get them\\n        // currently is to use assembly.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r := mload(add(signature, 0x20))\\n            s := mload(add(signature, 0x40))\\n            v := byte(0, mload(add(signature, 0x60)))\\n        }\\n\\n        return recover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover-bytes32-bytes-} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (282): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        require(\\n            uint256(s) <=\\n                0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0,\\n            \\\"ECDSA: invalid signature 's' value\\\"\\n        );\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        // v > 30 is a special case, we need to adjust hash with \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\"\\n        // and v = v - 4\\n        address signer;\\n        if (v > 30) {\\n            require(\\n                v - 4 == 27 || v - 4 == 28,\\n                \\\"ECDSA: invalid signature 'v' value\\\"\\n            );\\n            signer = ecrecover(toEthSignedMessageHash(hash), v - 4, r, s);\\n        } else {\\n            require(v == 27 || v == 28, \\\"ECDSA: invalid signature 'v' value\\\");\\n            signer = ecrecover(hash, v, r, s);\\n        }\\n\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * replicates the behavior of the\\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\\n     * JSON-RPC method.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return\\n            keccak256(\\n                abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash)\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x7a5583247b42c05cd0e592a870755c9b7bba3f2141f6e0dd1a123af504372237\",\"license\":\"MIT\"},\"src/royalties/IRoyaltiesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"../lib/LibPart.sol\\\";\\n\\ninterface IRoyaltiesProvider {\\n    function getRoyalties(address token, uint256 tokenId) external returns (LibPart.Part[] memory);\\n}\\n\",\"keccak256\":\"0xc0ab974c129b89f738b4b3144a335607570f8b10f647b18bce4e5248c6220020\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506145fb806100206000396000f3fe60806040526004361061012a5760003560e01c8063715018a6116100ab578063b39deb461161006f578063b39deb46146102e5578063da50b65b14610305578063e2864fe314610325578063e66db25e14610345578063e99a3f8014610365578063f2fde38b146103785761012a565b8063715018a614610266578063787dce3d1461027b57806383c7b1451461029b5780638da5cb5b146102bb578063b0e21e8a146102d05761012a565b806329534215116100f257806329534215146101e757806330c642f1146101fc5780633abf6fd41461021c5780633be89922146102315780636d8f0694146102515761012a565b806302097ab11461012f5780631372a625146101655780631cdfe3d81461018757806320158c44146101a757806324bffde2146101d4575b600080fd5b34801561013b57600080fd5b5061014f61014a366004613942565b610398565b60405161015c9190613ef8565b60405180910390f35b34801561017157600080fd5b50610185610180366004613ace565b6103b4565b005b34801561019357600080fd5b506101856101a2366004613942565b610488565b3480156101b357600080fd5b506101c76101c2366004613a99565b61050d565b60405161015c9190614356565b6101856101e2366004613e26565b610520565b3480156101f357600080fd5b5061014f610562565b34801561020857600080fd5b50610185610217366004613ab1565b610572565b34801561022857600080fd5b5061014f610642565b34801561023d57600080fd5b5061018561024c366004613942565b610652565b34801561025d57600080fd5b5061014f6106d7565b34801561027257600080fd5b506101856106e7565b34801561028757600080fd5b50610185610296366004613a99565b610781565b3480156102a757600080fd5b506101856102b6366004613942565b6107e9565b3480156102c757600080fd5b5061014f61086e565b3480156102dc57600080fd5b506101c761087d565b3480156102f157600080fd5b50610185610300366004613ab1565b610884565b34801561031157600080fd5b506101856103203660046139df565b610948565b34801561033157600080fd5b50610185610340366004613d4d565b610aa7565b34801561035157600080fd5b506101856103603660046139a7565b610b71565b610185610373366004613d7f565b610c02565b34801561038457600080fd5b50610185610393366004613942565b610cbe565b610165602052600090815260409020546001600160a01b031681565b600054610100900460ff16806103cd57506103cd610daf565b806103db575060005460ff16155b6104165760405162461bcd60e51b815260040180806020018281038252602e8152602001806144f5602e913960400191505060405180910390fd5b600054610100900460ff16158015610441576000805460ff1961ff0019909116610100171660011790555b610449610dc0565b610451610e62565b61045b8686610f49565b610466848484610ff3565b61046e6110cf565b8015610480576000805461ff00191690555b505050505050565b6104906111a2565b6001600160a01b03166104a161086e565b6001600160a01b0316146104ea576040805162461bcd60e51b81526020600482018190526024820152600080516020614566833981519152604482015290519081900360640190fd5b61016480546001600160a01b0319166001600160a01b0392909216919091179055565b6101306020526000908152604090205481565b61012f546001600160a01b031633146105545760405162461bcd60e51b815260040161054b9061419b565b60405180910390fd5b61055e82826111a6565b5050565b61012f546001600160a01b031681565b61057a6111a2565b6001600160a01b031661058b61086e565b6001600160a01b0316146105d4576040805162461bcd60e51b81526020600482018190526024820152600080516020614566833981519152604482015290519081900360640190fd5b6001600160e01b031982166000818152609760205260409081902080546001600160a01b0319166001600160a01b038516179055517f4b5aced933c0c9a88aeac3f0b3b72c5aaf75df8ebaf53225773248c4c315359390610636908490613ef8565b60405180910390a25050565b610164546001600160a01b031681565b61065a6111a2565b6001600160a01b031661066b61086e565b6001600160a01b0316146106b4576040805162461bcd60e51b81526020600482018190526024820152600080516020614566833981519152604482015290519081900360640190fd5b61016380546001600160a01b0319166001600160a01b0392909216919091179055565b610163546001600160a01b031681565b6106ef6111a2565b6001600160a01b031661070061086e565b6001600160a01b031614610749576040805162461bcd60e51b81526020600482018190526024820152600080516020614566833981519152604482015290519081900360640190fd5b6033546040516000916001600160a01b031690600080516020614586833981519152908390a3603380546001600160a01b0319169055565b6107896111a2565b6001600160a01b031661079a61086e565b6001600160a01b0316146107e3576040805162461bcd60e51b81526020600482018190526024820152600080516020614566833981519152604482015290519081900360640190fd5b61016255565b6107f16111a2565b6001600160a01b031661080261086e565b6001600160a01b03161461084b576040805162461bcd60e51b81526020600482018190526024820152600080516020614566833981519152604482015290519081900360640190fd5b61012f80546001600160a01b0319166001600160a01b0392909216919091179055565b6033546001600160a01b031690565b6101625481565b61088c6111a2565b6001600160a01b031661089d61086e565b6001600160a01b0316146108e6576040805162461bcd60e51b81526020600482018190526024820152600080516020614566833981519152604482015290519081900360640190fd5b6001600160e01b031982166000818152606560205260409081902080546001600160a01b0319166001600160a01b038516179055517fd2bf91075f105d0fd80328da28e20ebdad1c1261839711183bc29a44cbe6c72f90610636908490613ef8565b60005b815181101561055e5781818151811061096057fe5b6020026020010151600001516001600160a01b031661097d6111a2565b6001600160a01b0316146109a35760405162461bcd60e51b815260040161054b9061428e565b8181815181106109af57fe5b602002602001015160800151600014156109db5760405162461bcd60e51b815260040161054b9061409d565b60006109f98383815181106109ec57fe5b602002602001015161133f565b600081815261013060205260409020600019905583519091507f3efcb3b1a04ad7dd3e6b6ca2d108352be1f3a9d4f0a30d2877483f9d33e37bb6908290859085908110610a4257fe5b602002602001015160000151858581518110610a5a57fe5b60200260200101516020015160000151868681518110610a7657fe5b60200260200101516060015160000151604051610a969493929190613f25565b60405180910390a15060010161094b565b80516001600160a01b0316610aba6111a2565b6001600160a01b031614610ae05760405162461bcd60e51b815260040161054b9061428e565b6080810151610b015760405162461bcd60e51b815260040161054b9061409d565b6000610b0c8261133f565b6000818152610130602090815260409182902060001990558451908501515160608601515192519394507f3efcb3b1a04ad7dd3e6b6ca2d108352be1f3a9d4f0a30d2877483f9d33e37bb693610b659386939291613f25565b60405180910390a15050565b610b796111a2565b6001600160a01b0316610b8a61086e565b6001600160a01b031614610bd3576040805162461bcd60e51b81526020600482018190526024820152600080516020614566833981519152604482015290519081900360640190fd5b6001600160a01b0391821660009081526101656020526040902080546001600160a01b03191691909216179055565b610c0c84846114af565b610c1682826114af565b60408401516001600160a01b031615610c625783604001516001600160a01b031682600001516001600160a01b031614610c625760405162461bcd60e51b815260040161054b9061421a565b60408201516001600160a01b031615610cae5783600001516001600160a01b031682604001516001600160a01b031614610cae5760405162461bcd60e51b815260040161054b906140cb565b610cb884836111a6565b50505050565b610cc66111a2565b6001600160a01b0316610cd761086e565b6001600160a01b031614610d20576040805162461bcd60e51b81526020600482018190526024820152600080516020614566833981519152604482015290519081900360640190fd5b6001600160a01b038116610d655760405162461bcd60e51b81526004018080602001828103825260268152602001806144386026913960400191505060405180910390fd5b6033546040516001600160a01b0380841692169060008051602061458683398151915290600090a3603380546001600160a01b0319166001600160a01b0392909216919091179055565b6000610dba306114c2565b15905090565b600054610100900460ff1680610dd95750610dd9610daf565b80610de7575060005460ff16155b610e225760405162461bcd60e51b815260040180806020018281038252602e8152602001806144f5602e913960400191505060405180910390fd5b600054610100900460ff16158015610e4d576000805460ff1961ff0019909116610100171660011790555b8015610e5f576000805461ff00191690555b50565b600054610100900460ff1680610e7b5750610e7b610daf565b80610e89575060005460ff16155b610ec45760405162461bcd60e51b815260040180806020018281038252602e8152602001806144f5602e913960400191505060405180910390fd5b600054610100900460ff16158015610eef576000805460ff1961ff0019909116610100171660011790555b6000610ef96111a2565b603380546001600160a01b0319166001600160a01b03831690811790915560405191925090600090600080516020614586833981519152908290a3508015610e5f576000805461ff001916905550565b60976020527f4532fa16f071d6234e30e1a1e69b9806f04095edf37a1ca7a25c8d6af7861cc080546001600160a01b039283166001600160a01b0319918216179091557f30a684095c937b5aa064dcf94f9903a7d808e3efb22d8389dbd43080ad4ed3d5805493909216928116831790915563025ceed960e61b6000527f4b5822151ea34b7c8d9e37c3e466bcecb631efe6a9f26a4a4054110a93dd316f80549091169091179055565b600054610100900460ff168061100c575061100c610daf565b8061101a575060005460ff16155b6110555760405162461bcd60e51b815260040180806020018281038252602e8152602001806144f5602e913960400191505060405180910390fd5b600054610100900460ff16158015611080576000805460ff1961ff0019909116610100171660011790555b61016284905561016480546001600160a01b038086166001600160a01b0319928316179092556101638054928516929091169190911790558015610cb8576000805461ff001916905550505050565b600054610100900460ff16806110e857506110e8610daf565b806110f6575060005460ff16155b6111315760405162461bcd60e51b815260040180806020018281038252602e8152602001806144f5602e913960400191505060405180910390fd5b600054610100900460ff1615801561115c576000805460ff1961ff0019909116610100171660011790555b610e4d6040518060400160405280600b81526020016a11da1bdcdd13585c9ad95d60aa1b815250604051806040016040528060018152602001601960f91b8152506114c8565b3390565b6000806111b38484611589565b9150915060006111c28561133f565b905060006111cf8561133f565b905060006111dc87611622565b905060006111e987611622565b905060006111fb898987878787611720565b905060008061120f8989858e8e8a8a61184b565b8a5191935091506001600160e01b0319166355575f5d60e11b141561128e5787516001600160e01b0319166355575f5d60e11b141561124d57600080fd5b8134101561126d5760405162461bcd60e51b815260040161054b9061425d565b81341115611289576112896112823484611987565b33906119e9565b6112dd565b87516001600160e01b0319166355575f5d60e11b14156112dd57803410156112c85760405162461bcd60e51b815260040161054b9061425d565b803411156112dd576112dd6112823483611987565b7f41576b5d1d097a431bbadeabe9e68420fdc7ad0f694b928ea71d8763a436d4f987878d600001518d60000151876020015188600001518f8f60405161132a989796959493929190613f6c565b60405180910390a15050505050505050505050565b60e08101516000906001600160e01b0319166323d235ef60e01b141561143e57815160208301515161137090611a79565b60608401515161137f90611a79565b846080015185610100015160405160200180866001600160a01b0316815260200185815260200184815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156113eb5781810151838201526020016113d3565b50505050905090810190601f1680156114185780820380516001836020036101000a031916815260200191505b5096505050505050506040516020818303038152906040528051906020012090506114aa565b815160208301515161144f90611a79565b60608401515161145e90611a79565b846080015160405160200180856001600160a01b031681526020018481526020018381526020018281526020019450505050506040516020818303038152906040528051906020012090505b919050565b6114b882611ae3565b61055e8282611bad565b3b151590565b600054610100900460ff16806114e157506114e1610daf565b806114ef575060005460ff16155b61152a5760405162461bcd60e51b815260040180806020018281038252602e8152602001806144f5602e913960400191505060405180910390fd5b600054610100900460ff16158015611555576000805460ff1961ff0019909116610100171660011790555b825160208085019190912083519184019190912060c99190915560ca558015611584576000805461ff00191690555b505050565b611591613600565b611599613600565b6020840151516060840151516115af9190611e82565b80519092506001600160e01b0319166115da5760405162461bcd60e51b815260040161054b906141ee565b6060840151516020840151516115f09190611e82565b80519091506001600160e01b03191661161b5760405162461bcd60e51b815260040161054b906141ee565b9250929050565b61162a613618565b60e08201516001600160e01b031916632611a13360e11b1415611672576000611657836101000151611ec2565b80518352602090810151908301525060006040820152611707565b60e08201516001600160e01b0319166323d235ef60e01b14156116a45761169d826101000151611ede565b9050611707565b60e08201516001600160e01b031990811614156116c057611707565b6040805162461bcd60e51b8152602060048201526017602482015276556e6b6e6f776e204f726465722064617461207479706560481b604482015290519081900360640190fd5b8051516114aa57815161171990611efa565b8152919050565b61172861363b565b60006117348887611f95565b905060006117428887611f95565b9050600061175c8a8a85858a604001518a60400151611fc2565b9050600081602001511180156117725750805115155b61178e5760405162461bcd60e51b815260040161054b9061413b565b60808a0151156117e5578560400151156117c45780516117af908490612048565b600089815261013060205260409020556117e5565b60208101516117d4908490612048565b600089815261013060205260409020555b60808901511561183c5784604001511561181e576020810151611809908390612048565b6000888152610130602052604090205561183c565b805161182b908390612048565b600088815261013060205260409020555b925050505b9695505050505050565b60008060006118628a600001518a600001516120a9565b885160208a015190945092509050600181600281111561187e57fe5b14156118d357875187516118a5919087878e8e60008051602061441883398151915261217a565b92506118ce898960200151886000015188600001516000805160206145a683398151915261223e565b61197a565b60028160028111156118e157fe5b14156119315761190c8860200151876000015186888d8f6000805160206145a683398151915261217a565b8851885186519294506118ce928d92919060008051602061441883398151915261223e565b875187518551611953928d92909160008051602061441883398151915261223e565b61197a898960200151886000015188600001516000805160206145a683398151915261223e565b5097509795505050505050565b6000828211156119de576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b508082035b92915050565b6040516000906001600160a01b0384169083908381818185875af1925050503d8060008114611a34576040519150601f19603f3d011682016040523d82523d6000602084013e611a39565b606091505b50509050806115845760405162461bcd60e51b815260040180806020018281038252602881526020018061445e6028913960400191505060405180910390fd5b8051602091820151805190830120604080517f452a0dc408cb0d27ffc3b3caff933a5208040a53a9dbecd8d89cad2c0d40e00c818601526001600160e01b031990931683820152606080840192909252805180840390920182526080909201909152805191012090565b60a08101511580611af75750428160a00151105b611b48576040805162461bcd60e51b815260206004820152601d60248201527f4f726465722073746172742076616c69646174696f6e206661696c6564000000604482015290519081900360640190fd5b60c08101511580611b5c5750428160c00151115b610e5f576040805162461bcd60e51b815260206004820152601b60248201527f4f7264657220656e642076616c69646174696f6e206661696c65640000000000604482015290519081900360640190fd5b6080820151611c4b5781516001600160a01b031615611c325781516001600160a01b0316611bd96111a2565b6001600160a01b031614611c2d576040805162461bcd60e51b815260206004820152601660248201527536b0b5b2b91034b9903737ba103a3c1039b2b73232b960511b604482015290519081900360640190fd5b611c46565b611c3a6111a2565b6001600160a01b031682525b61055e565b81516001600160a01b0316611c5e6111a2565b6001600160a01b03161461055e576000611c7783612340565b90506000825160411415611c9b57611c9883611c9284612430565b9061247c565b90505b83516001600160a01b03828116911614611e3b578351611cc3906001600160a01b03166114c2565b15611dff578351630b135d3f60e11b906001600160a01b0316631626ba7e611cea85612430565b866040518363ffffffff1660e01b81526004018083815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611d3d578181015183820152602001611d25565b50505050905090810190601f168015611d6a5780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b158015611d8857600080fd5b505afa158015611d9c573d6000803e3d6000fd5b505050506040513d6020811015611db257600080fd5b50516001600160e01b03191614611dfa5760405162461bcd60e51b815260040180806020018281038252602b8152602001806144ca602b913960400191505060405180910390fd5b611e36565b60405162461bcd60e51b81526004018080602001828103825260228152602001806144a86022913960400191505060405180910390fd5b610cb8565b83516001600160a01b0316610cb8576040805162461bcd60e51b815260206004820152600860248201526737379036b0b5b2b960c11b604482015290519081900360640190fd5b611e8a613600565b6000611e9684846124f2565b80519091506001600160e01b031916611ebb57611eb383856124f2565b9150506119e3565b90506119e3565b611eca613655565b818060200190518101906119e39190613bfc565b611ee6613618565b818060200190518101906119e39190613c97565b60408051600180825281830190925260609160009190816020015b611f1d61366f565b815260200190600190039081611f155790505090508281600081518110611f4057fe5b6020026020010151600001906001600160a01b031690816001600160a01b03168152505061271081600081518110611f7457fe5b6020908102919091018101516001600160601b039092169101529050919050565b6000826080015160001415611fac575060006119e3565b5060009081526101306020526040902054919050565b611fca61363b565b600080611fd889888761270e565b91509150600080611fea8a898861270e565b915091508381111561201d5761201284848c60200151602001518d6060015160200151612788565b945050505050611841565b6120398b60200151602001518c60600151602001518484612808565b9b9a5050505050505050505050565b6000828201838110156120a2576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b60006001600160e01b031983166355575f5d60e11b14156120cc575060016119e3565b6001600160e01b031982166355575f5d60e11b14156120ed575060026119e3565b6001600160e01b031983166322ba176160e21b141561210e575060016119e3565b6001600160e01b031982166322ba176160e21b141561212f575060026119e3565b6001600160e01b0319831663025ceed960e61b1415612150575060016119e3565b6001600160e01b0319821663025ceed960e61b1415612171575060026119e3565b50600092915050565b600061218e8861016254886020015161288a565b9050600061219f828a8a88876128fd565b90506121af8585838c8c886129e6565b90506121e485828b8a602001518c887fdfdfdaf4cc275341b6776a7ee23b953990b8d991717449077287da70f32cf955612a59565b508091505061221c85828b89602001518c887fdfdfdaf4cc275341b6776a7ee23b953990b8d991717449077287da70f32cf955612a59565b508091505061223285828a89600001518761223e565b50979650505050505050565b6000805b835181101561231e57600061228085838151811061225c57fe5b6020026020010151602001516001600160601b031688612b1a90919063ffffffff16565b90506122b585838151811061229157fe5b6020026020010151602001516001600160601b03168461204890919063ffffffff16565b925080156123155761231560405180604001604052808a815260200183815250878785815181106122e257fe5b602002602001015160000151877fa10bb5b2060a412d05113732875a5431ca23453eb93f797e0ffcb5b40e5f2c3e612b32565b50600101612242565b5080612710146104805760405162461bcd60e51b815260040161054b90614164565b60007f477ed43b8020849b755512278536c3766a3b4ab547519949a75f483372493f8d82600001516123758460200151612eb9565b84604001516123878660600151612eb9565b86608001518760a001518860c001518960e001518a610100015180519060200120604051602001808b81526020018a6001600160a01b03168152602001898152602001886001600160a01b03168152602001878152602001868152602001858152602001848152602001836001600160e01b03191681526020018281526020019a5050505050505050505050604051602081830303815290604052805190602001209050919050565b600061243a612f29565b82604051602001808061190160f01b81525060020183815260200182815260200192505050604051602081830303815290604052805190602001209050919050565b600081516041146124d4576040805162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015290519081900360640190fd5b60208201516040830151606084015160001a61184186828585612f69565b6124fa613600565b825182516001600160e01b031982166355575f5d60e11b1415612565576001600160e01b031981166355575f5d60e11b141561253a5784925050506119e3565b50506040805180820182526000808252825160208181019094529081529181019190915290506119e3565b6001600160e01b031982166322ba176160e21b14156125aa576001600160e01b031981166322ba176160e21b141561253a576125a185856131b0565b925050506119e3565b6001600160e01b031982166339d690a360e11b14156125e6576001600160e01b031981166339d690a360e11b141561253a576125a185856131b0565b6001600160e01b0319821663025ceed960e61b1415612622576001600160e01b0319811663025ceed960e61b141561253a576125a185856131b0565b6001600160e01b031982166000908152606560205260409020546001600160a01b031680156126d7576040516306d3f7cb60e41b81526001600160a01b03821690636d3f7cb09061267990899089906004016142b3565b60006040518083038186803b15801561269157600080fd5b505afa1580156126a5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526126cd9190810190613b35565b93505050506119e3565b6001600160e01b031983811690831614156126f6576126cd86866131b0565b60405162461bcd60e51b815260040161054b90614035565b600080821561274d5760208086015101516127299085611987565b91506127468560600151602001518660200151602001518461320d565b9050612780565b6060850151602001516127609085611987565b905061277d8560200151602001518660600151602001518361320d565b91505b935093915050565b61279061363b565b600061279d85858561320d565b9050858111156127ef576040805162461bcd60e51b8152602060048201526018602482015277199a5b1b1319599d0e881d5b98589b19481d1bc8199a5b1b60421b604482015290519081900360640190fd5b5050604080518082019091529384525050602082015290565b61281061363b565b600061281d83878761320d565b905083811115612870576040805162461bcd60e51b8152602060048201526019602482015278199a5b1b149a59da1d0e881d5b98589b19481d1bc8199a5b1b603a1b604482015290519081900360640190fd5b604080518082019091529283526020830152509392505050565b60006128a06128998585612b1a565b8590612048565b905060005b82518110156128f5576128eb6128e48483815181106128c057fe5b6020026020010151602001516001600160601b031687612b1a90919063ffffffff16565b8390612048565b91506001016128a5565b509392505050565b6000806000612910888861016254613273565b909250905080156129db5784516000906001600160e01b0319166322ba176160e21b1415612957578560200151806020019051810190612950919061395e565b9050612990565b85516001600160e01b03191663025ceed960e61b1415612990576000866020015180602001905181019061298b919061397a565b509150505b6129d9604051806040016040528088815260200184815250886129b284613295565b887ff87e69cb514f255f3d32f9d90f25160a10d0cdefe6618a6406db334d4450595c612b32565b505b509695505050505050565b6000806129f2876132d4565b9050600080612a268a8989868a8a7fb3c5c697ec0b511b76d12f6293e6ee827b1e1df79ac7c64d0466d945904893d7612a59565b91509150611388811115612a4c5760405162461bcd60e51b815260040161054b90614066565b5098975050505050505050565b856000805b865181101561197a57612a9a878281518110612a7657fe5b6020026020010151602001516001600160601b03168361204890919063ffffffff16565b9150600080612aca858b8b8681518110612ab057fe5b6020026020010151602001516001600160601b0316613273565b90955085925090508015612b1057612b1060405180604001604052808e815260200183815250898b8681518110612afd57fe5b6020026020010151600001518a8a612b32565b5050600101612a5e565b60006120a2612710612b2c85856133c6565b9061341f565b8451516001600160e01b0319166355575f5d60e11b1415612b6b576020850151612b66906001600160a01b038516906119e9565b612e73565b8451516001600160e01b0319166322ba176160e21b1415612c49576000856000015160200151806020019051810190612ba4919061395e565b6322ba176160e21b600052609760209081527f4532fa16f071d6234e30e1a1e69b9806f04095edf37a1ca7a25c8d6af7861cc0549088015160405163776062c360e01b81529293506001600160a01b039091169163776062c391612c119185918a918a919060040161400b565b600060405180830381600087803b158015612c2b57600080fd5b505af1158015612c3f573d6000803e3d6000fd5b5050505050612e73565b8451516001600160e01b0319166339d690a360e11b1415612d4957600080866000015160200151806020019051810190612c83919061397a565b915091508660200151600114612cab5760405162461bcd60e51b815260040161054b9061410f565b6339d690a360e11b60005260976020527f30a684095c937b5aa064dcf94f9903a7d808e3efb22d8389dbd43080ad4ed3d554604051637b84dc8360e11b81526001600160a01b039091169063f709b90690612d109085908a908a90879060040161400b565b600060405180830381600087803b158015612d2a57600080fd5b505af1158015612d3e573d6000803e3d6000fd5b505050505050612e73565b8451516001600160e01b03191663025ceed960e61b1415612df257600080866000015160200151806020019051810190612d83919061397a565b63025ceed960e61b600052609760209081527f4b5822151ea34b7c8d9e37c3e466bcecb631efe6a9f26a4a4054110a93dd316f54908a0151604051639c1c2ee960e01b81529395509193506001600160a01b031691639c1c2ee991612d109186918b918b918891600401613fc8565b8451516001600160e01b031916600090815260976020526040908190205490516354bc0cf160e01b81526001600160a01b03909116906354bc0cf190612e40908890889088906004016142d8565b600060405180830381600087803b158015612e5a57600080fd5b505af1158015612e6e573d6000803e3d6000fd5b505050505b7fcae9d16f553e92058883de29cb3135dbc0c1e31fd7eace79fef1d80577fe482e8585858585604051612eaa95949392919061430b565b60405180910390a15050505050565b60007fdb6f72e915676cfc289da13bc4ece054fd17b1df6d77ffc4a60510718c236b08612ee98360000151611a79565b8360200151604051602001808481526020018381526020018281526020019350505050604051602081830303815290604052805190602001209050919050565b6000612f647f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f612f57613486565b612f5f61348c565b613492565b905090565b60006fa2a8918ca85bafe22016d0b997e4df60600160ff1b03821115612fc05760405162461bcd60e51b81526004018080602001828103825260228152602001806144866022913960400191505060405180910390fd5b6000601e8560ff16111561309a576004850360ff16601b1480612fe957506004850360ff16601c145b6130245760405162461bcd60e51b81526004018080602001828103825260228152602001806145236022913960400191505060405180910390fd5b600161302f876134f4565b60048703868660405160008152602001604052604051808581526020018460ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015613089573d6000803e3d6000fd5b505050602060405103519050613151565b8460ff16601b14806130af57508460ff16601c145b6130ea5760405162461bcd60e51b81526004018080602001828103825260228152602001806145236022913960400191505060405180910390fd5b60018686868660405160008152602001604052604051808581526020018460ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015613144573d6000803e3d6000fd5b5050506020604051035190505b6001600160a01b0381166131a7576040805162461bcd60e51b815260206004820152601860248201527745434453413a20696e76616c6964207369676e617475726560401b604482015290519081900360640190fd5b95945050505050565b6131b8613600565b602080840151805190820120838201518051920191909120808214156131e25784925050506119e3565b5050604080518082018252600080825282516020808201909452908152918101919091529392505050565b600061321a848484613545565b1561325d576040805162461bcd60e51b815260206004820152600e60248201526d3937bab73234b7339032b93937b960911b604482015290519081900360640190fd5b61326b83612b2c86856133c6565b949350505050565b600080613289856132848686612b1a565b6135d4565b91509150935093915050565b6001600160a01b038082166000908152610165602052604081205490911680156132c05790506114aa565b5050610164546001600160a01b0316919050565b80516060906001600160e01b03191663025ceed960e61b1480613308575081516001600160e01b0319166339d690a360e11b145b156133be576000808360200151806020019051810190613328919061397a565b61016354604051634e53ee3d60e11b81529294509092506001600160a01b031690639ca7dc7a9061335f9085908590600401613f0c565b600060405180830381600087803b15801561337957600080fd5b505af115801561338d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526133b59190810190613a67565b925050506114aa565b506060919050565b6000826133d5575060006119e3565b828202828482816133e257fe5b04146120a25760405162461bcd60e51b81526004018080602001828103825260218152602001806145456021913960400191505060405180910390fd5b6000808211613475576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b81838161347e57fe5b049392505050565b60c95490565b60ca5490565b600083838361349f6135fc565b3060405160200180868152602001858152602001848152602001838152602001826001600160a01b03168152602001955050505050506040516020818303038152906040528051906020012090509392505050565b604080517f19457468657265756d205369676e6564204d6573736167653a0a333200000000602080830191909152603c8083019490945282518083039094018452605c909101909152815191012090565b60008261358c576040805162461bcd60e51b815260206004820152601060248201526f6469766973696f6e206279207a65726f60801b604482015290519081900360640190fd5b811580613597575083155b156135a4575060006120a2565b600083806135ae57fe5b85840990506135bd85846133c6565b6135c9826103e86133c6565b101595945050505050565b600080828411156135f3576135e98484611987565b915082905061161b565b50600093915050565b4690565b60408051808201909152600081526060602082015290565b604051806060016040528060608152602001606081526020016000151581525090565b604051806040016040528060008152602001600081525090565b604051806040016040528060608152602001606081525090565b604080518082019091526000808252602082015290565b80356114aa816143ec565b600082601f8301126136a1578081fd5b815160206136b66136b183614382565b61435f565b828152818101908583016040808602880185018910156136d4578687fd5b865b868110156137435781838b0312156136ec578788fd5b81518281018181106001600160401b038211171561370657fe5b83528351613713816143ec565b8152838701516001600160601b038116811461372d57898afd5b81880152855293850193918101916001016136d6565b509198975050505050505050565b80356114aa81614401565b600082601f83011261376c578081fd5b813561377a6136b18261439f565b81815284602083860101111561378e578283fd5b816020850160208301379081016020019190915292915050565b600060408083850312156137ba578182fd5b80518181016001600160401b0382821081831117156137d557fe5b8184528294508535818111156137ea57600080fd5b86018088038513156137fb57600080fd5b60808401838110838211171561380d57fe5b90945283359361381c85614401565b9382526020840135938185111561383257600080fd5b61383e8886830161375c565b60608501525050815260209384013593019290925292915050565b600061012080838503121561386c578182fd5b6138758161435f565b91505061388182613686565b815260208201356001600160401b038082111561389d57600080fd5b6138a9858386016137a8565b60208401526138ba60408501613686565b604084015260608401359150808211156138d357600080fd5b6138df858386016137a8565b60608401526080840135608084015260a084013560a084015260c084013560c084015261390e60e08501613751565b60e08401526101009150818401358181111561392957600080fd5b6139358682870161375c565b8385015250505092915050565b600060208284031215613953578081fd5b81356120a2816143ec565b60006020828403121561396f578081fd5b81516120a2816143ec565b6000806040838503121561398c578081fd5b8251613997816143ec565b6020939093015192949293505050565b600080604083850312156139b9578182fd5b82356139c4816143ec565b915060208301356139d4816143ec565b809150509250929050565b600060208083850312156139f1578182fd5b82356001600160401b03811115613a06578283fd5b8301601f81018513613a16578283fd5b8035613a246136b182614382565b81815283810190838501865b84811015613a5957613a478a888435890101613859565b84529286019290860190600101613a30565b509098975050505050505050565b600060208284031215613a78578081fd5b81516001600160401b03811115613a8d578182fd5b61326b84828501613691565b600060208284031215613aaa578081fd5b5035919050565b60008060408385031215613ac3578182fd5b82356139c481614401565b600080600080600060a08688031215613ae5578081fd5b8535613af0816143ec565b94506020860135613b00816143ec565b9350604086013592506060860135613b17816143ec565b91506080860135613b27816143ec565b809150509295509295909350565b60006020808385031215613b47578182fd5b82516001600160401b0380821115613b5d578384fd5b9084019060408287031215613b70578384fd5b604051604081018181108382111715613b8557fe5b6040528251613b9381614401565b81528284015182811115613ba5578586fd5b80840193505086601f840112613bb9578485fd5b82519150613bc96136b18361439f565b8281528785848601011115613bdc578586fd5b613beb838683018787016143c0565b938101939093525090949350505050565b600060208284031215613c0d578081fd5b81516001600160401b0380821115613c23578283fd5b9083019060408286031215613c36578283fd5b604051604081018181108382111715613c4b57fe5b604052825182811115613c5c578485fd5b613c6887828601613691565b825250602083015182811115613c7c578485fd5b613c8887828601613691565b60208301525095945050505050565b600060208284031215613ca8578081fd5b81516001600160401b0380821115613cbe578283fd5b9083019060608286031215613cd1578283fd5b604051606081018181108382111715613ce657fe5b604052825182811115613cf7578485fd5b613d0387828601613691565b825250602083015182811115613d17578485fd5b613d2387828601613691565b602083015250604083015192508215158314613d3d578384fd5b6040810192909252509392505050565b600060208284031215613d5e578081fd5b81356001600160401b03811115613d73578182fd5b61326b84828501613859565b60008060008060808587031215613d94578182fd5b84356001600160401b0380821115613daa578384fd5b613db688838901613859565b95506020870135915080821115613dcb578384fd5b613dd78883890161375c565b94506040870135915080821115613dec578384fd5b613df888838901613859565b93506060870135915080821115613e0d578283fd5b50613e1a8782880161375c565b91505092959194509250565b60008060408385031215613e38578182fd5b82356001600160401b0380821115613e4e578384fd5b613e5a86838701613859565b93506020850135915080821115613e6f578283fd5b50613e7c85828601613859565b9150509250929050565b600063ffffffff60e01b82511683526020820151604060208501528051806040860152613eba8160608701602085016143c0565b601f01601f1916939093016060019392505050565b6000815160408452613ee46040850182613e86565b602093840151949093019390935250919050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b8481526001600160a01b0384166020820152608060408201819052600090613f4f90830185613e86565b8281036060840152613f618185613e86565b979650505050505050565b888152602081018890526001600160a01b038781166040830152861660608201526080810185905260a0810184905261010060c08201819052600090613fb483820186613e86565b905082810360e08401526120398185613e86565b6001600160a01b03958616815293851660208501529190931660408301526060820192909252608081019190915260c060a0820181905260009082015260e00190565b6001600160a01b039485168152928416602084015292166040820152606081019190915260800190565b6020808252601790820152763737ba103337bab7321024a0b9b9b2ba26b0ba31b432b960491b604082015260600190565b6020808252601d908201527f526f79616c746965732061726520746f6f206869676820283e35302529000000604082015260600190565b6020808252601490820152730c081cd85b1d0818d85b89dd081899481d5cd95960621b604082015260600190565b60208082526024908201527f72696768744f726465722e74616b657220766572696669636174696f6e2066616040820152631a5b195960e21b606082015260800190565b60208082526012908201527132b9319b9918903b30b63ab29032b93937b960711b604082015260600190565b6020808252600f908201526e1b9bdd1a1a5b99c81d1bc8199a5b1b608a1b604082015260600190565b6020808252601e908201527f53756d207061796f75747320427073206e6f7420657175616c20313030250000604082015260600190565b60208082526033908201527f6e6f7420616c6c6f77656420746f206d61746368416e645472616e7366657220604082015272776974686f75742061207369676e617475726560681b606082015260800190565b6020808252601290820152710c2e6e6cae8e640c8dedc4ee840dac2e8c6d60731b604082015260600190565b60208082526023908201527f6c6566744f726465722e74616b657220766572696669636174696f6e206661696040820152621b195960ea1b606082015260800190565b6020808252601790820152766e6f7420656e6f756768204261736543757272656e637960481b604082015260600190565b6020808252600b908201526a3737ba10309036b0b5b2b960a91b604082015260600190565b6000604082526142c66040830185613e86565b82810360208401526131a78185613e86565b6000606082526142eb6060830186613ecf565b6001600160a01b0394851660208401529290931660409091015292915050565b600060a0825261431e60a0830188613ecf565b6001600160a01b0396871660208401529490951660408201526001600160e01b03199283166060820152911660809091015292915050565b90815260200190565b6040518181016001600160401b038111828210171561437a57fe5b604052919050565b60006001600160401b0382111561439557fe5b5060209081020190565b60006001600160401b038211156143b257fe5b50601f01601f191660200190565b60005b838110156143db5781810151838201526020016143c3565b83811115610cb85750506000910152565b6001600160a01b0381168114610e5f57600080fd5b6001600160e01b031981168114610e5f57600080fdfe1a0388dd7519a093630516a672419a2562e0e74deb98af068657dc265f0164c94f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573734c69625472616e73666572204261736543757272656e6379207472616e73666572206661696c656445434453413a20696e76616c6964207369676e6174757265202773272076616c75656f72646572207369676e617475726520766572696669636174696f6e206572726f72636f6e7472616374206f72646572207369676e617475726520766572696669636174696f6e206572726f72496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a656445434453413a20696e76616c6964207369676e6174757265202776272076616c7565536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65728be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0b45a3ba14423c8f1b71cc094845ab56b5294dbe8d8e3ba53f3cdb63d59a4044ba264697066735822122071949403c3ace85a54704d6e886144fed6b0bfe875c5ba08c39503e5046e4cbb64736f6c63430007060033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "__ExchangeV2_init(address,address,uint256,address,address)": {
        "details": "initialize ExchangeV2",
        "params": {
          "_erc20TransferProxy": "address for proxy transfer contract that handles ERC20 contracts",
          "_transferProxy": "address for proxy transfer contract that handles ERC721 & ERC1155 contracts",
          "newDefaultFeeReceiver": "address for protocol fee if fee by token type is not set (GhostMarketTransferManager.sol => function getFeeReceiver)",
          "newProtocolFee": "address for protocol fee"
        }
      },
      "bulkCancelOrders((address,((bytes4,bytes),uint256),address,((bytes4,bytes),uint256),uint256,uint256,uint256,bytes4,bytes)[])": {
        "details": "call the cancel fucntion in a loop canceling multiple orders"
      },
      "cancel((address,((bytes4,bytes),uint256),address,((bytes4,bytes),uint256),uint256,uint256,uint256,bytes4,bytes))": {
        "details": "cancel the the given order by adding the biggest possible number to fills mapping"
      },
      "matchAndTransferWithoutSignature((address,((bytes4,bytes),uint256),address,((bytes4,bytes),uint256),uint256,uint256,uint256,bytes4,bytes),(address,((bytes4,bytes),uint256),address,((bytes4,bytes),uint256),uint256,uint256,uint256,bytes4,bytes))": {
        "details": "match orders without a signature, only admin"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setFeeReceiver(address,address)": {
        "params": {
          "token": "token contract address",
          "wallet": "fee receiver address"
        }
      },
      "setMatchTransferAdminAccount(address)": {
        "details": "set admin address that can use the matchAndTransferWithoutSignature function"
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "setFeeReceiver(address,address)": {
        "notice": "set fee for different tokens types"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 739,
        "contract": "src/ExchangeV2.sol:ExchangeV2",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 742,
        "contract": "src/ExchangeV2.sol:ExchangeV2",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 4072,
        "contract": "src/ExchangeV2.sol:ExchangeV2",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "src/ExchangeV2.sol:ExchangeV2",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 129,
        "contract": "src/ExchangeV2.sol:ExchangeV2",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 9542,
        "contract": "src/ExchangeV2.sol:ExchangeV2",
        "label": "matchers",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes4,t_address)"
      },
      {
        "astId": 9788,
        "contract": "src/ExchangeV2.sol:ExchangeV2",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 12449,
        "contract": "src/ExchangeV2.sol:ExchangeV2",
        "label": "proxies",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_bytes4,t_address)"
      },
      {
        "astId": 12695,
        "contract": "src/ExchangeV2.sol:ExchangeV2",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 138,
        "contract": "src/ExchangeV2.sol:ExchangeV2",
        "label": "_HASHED_NAME",
        "offset": 0,
        "slot": "201",
        "type": "t_bytes32"
      },
      {
        "astId": 140,
        "contract": "src/ExchangeV2.sol:ExchangeV2",
        "label": "_HASHED_VERSION",
        "offset": 0,
        "slot": "202",
        "type": "t_bytes32"
      },
      {
        "astId": 289,
        "contract": "src/ExchangeV2.sol:ExchangeV2",
        "label": "__gap",
        "offset": 0,
        "slot": "203",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 12426,
        "contract": "src/ExchangeV2.sol:ExchangeV2",
        "label": "__gap",
        "offset": 0,
        "slot": "253",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 9923,
        "contract": "src/ExchangeV2.sol:ExchangeV2",
        "label": "matchAndTransferAdmin",
        "offset": 0,
        "slot": "303",
        "type": "t_address"
      },
      {
        "astId": 9927,
        "contract": "src/ExchangeV2.sol:ExchangeV2",
        "label": "fills",
        "offset": 0,
        "slot": "304",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 10571,
        "contract": "src/ExchangeV2.sol:ExchangeV2",
        "label": "__gap",
        "offset": 0,
        "slot": "305",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 10592,
        "contract": "src/ExchangeV2.sol:ExchangeV2",
        "label": "protocolFee",
        "offset": 0,
        "slot": "354",
        "type": "t_uint256"
      },
      {
        "astId": 10594,
        "contract": "src/ExchangeV2.sol:ExchangeV2",
        "label": "royaltiesRegistry",
        "offset": 0,
        "slot": "355",
        "type": "t_contract(IRoyaltiesProvider)14942"
      },
      {
        "astId": 10596,
        "contract": "src/ExchangeV2.sol:ExchangeV2",
        "label": "defaultFeeReceiver",
        "offset": 0,
        "slot": "356",
        "type": "t_address"
      },
      {
        "astId": 10600,
        "contract": "src/ExchangeV2.sol:ExchangeV2",
        "label": "feeReceivers",
        "offset": 0,
        "slot": "357",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 11405,
        "contract": "src/ExchangeV2.sol:ExchangeV2",
        "label": "__gap",
        "offset": 0,
        "slot": "358",
        "type": "t_array(t_uint256)46_storage"
      },
      {
        "astId": 9887,
        "contract": "src/ExchangeV2.sol:ExchangeV2",
        "label": "__gap",
        "offset": 0,
        "slot": "404",
        "type": "t_array(t_uint256)50_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)46_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[46]",
        "numberOfBytes": "1472"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_contract(IRoyaltiesProvider)14942": {
        "encoding": "inplace",
        "label": "contract IRoyaltiesProvider",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes4,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}