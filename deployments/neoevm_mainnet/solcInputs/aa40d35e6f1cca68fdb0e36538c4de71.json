{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155Upgradeable is IERC165Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721Upgradeable is IERC165Upgradeable {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ECDSAUpgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * _Available since v3.4._\n *\n * @custom:storage-size 52\n */\nabstract contract EIP712Upgradeable is Initializable {\n    /* solhint-disable var-name-mixedcase */\n    bytes32 private _HASHED_NAME;\n    bytes32 private _HASHED_VERSION;\n    bytes32 private constant _TYPE_HASH = keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\n\n    /* solhint-enable var-name-mixedcase */\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\n        __EIP712_init_unchained(name, version);\n    }\n\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\n        bytes32 hashedName = keccak256(bytes(name));\n        bytes32 hashedVersion = keccak256(bytes(version));\n        _HASHED_NAME = hashedName;\n        _HASHED_VERSION = hashedVersion;\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        return _buildDomainSeparator(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash());\n    }\n\n    function _buildDomainSeparator(\n        bytes32 typeHash,\n        bytes32 nameHash,\n        bytes32 versionHash\n    ) private view returns (bytes32) {\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n\n    /**\n     * @dev The hash of the name parameter for the EIP712 domain.\n     *\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\n     * are a concern.\n     */\n    function _EIP712NameHash() internal virtual view returns (bytes32) {\n        return _HASHED_NAME;\n    }\n\n    /**\n     * @dev The hash of the version parameter for the EIP712 domain.\n     *\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\n     * are a concern.\n     */\n    function _EIP712VersionHash() internal virtual view returns (bytes32) {\n        return _HASHED_VERSION;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.3) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../StringsUpgradeable.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSAUpgradeable {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", StringsUpgradeable.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "src/custom-matcher/AssetMatcher.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"../interfaces/IAssetMatcher.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\n\nabstract contract AssetMatcher is Initializable, OwnableUpgradeable {\n    bytes internal constant EMPTY = \"\";\n    mapping(bytes4 => address) internal matchers;\n\n    event MatcherChange(bytes4 indexed assetType, address matcher);\n\n    function setAssetMatcher(bytes4 assetType, address matcher) external onlyOwner {\n        matchers[assetType] = matcher;\n        emit MatcherChange(assetType, matcher);\n    }\n\n    function matchAssets(\n        LibAsset.AssetType memory leftAssetType,\n        LibAsset.AssetType memory rightAssetType\n    ) internal view returns (LibAsset.AssetType memory) {\n        LibAsset.AssetType memory result = matchAssetOneSide(leftAssetType, rightAssetType);\n        if (result.assetClass == 0) {\n            return matchAssetOneSide(rightAssetType, leftAssetType);\n        } else {\n            return result;\n        }\n    }\n\n    function matchAssetOneSide(\n        LibAsset.AssetType memory leftAssetType,\n        LibAsset.AssetType memory rightAssetType\n    ) private view returns (LibAsset.AssetType memory) {\n        bytes4 classLeft = leftAssetType.assetClass;\n        bytes4 classRight = rightAssetType.assetClass;\n        if (classLeft == LibAsset.ETH_ASSET_CLASS) {\n            if (classRight == LibAsset.ETH_ASSET_CLASS) {\n                return leftAssetType;\n            }\n            return LibAsset.AssetType(0, EMPTY);\n        }\n        if (classLeft == LibAsset.ERC20_ASSET_CLASS) {\n            if (classRight == LibAsset.ERC20_ASSET_CLASS) {\n                return simpleMatch(leftAssetType, rightAssetType);\n            }\n            return LibAsset.AssetType(0, EMPTY);\n        }\n        if (classLeft == LibAsset.ERC721_ASSET_CLASS) {\n            if (classRight == LibAsset.ERC721_ASSET_CLASS) {\n                return simpleMatch(leftAssetType, rightAssetType);\n            }\n            return LibAsset.AssetType(0, EMPTY);\n        }\n        if (classLeft == LibAsset.ERC1155_ASSET_CLASS) {\n            if (classRight == LibAsset.ERC1155_ASSET_CLASS) {\n                return simpleMatch(leftAssetType, rightAssetType);\n            }\n            return LibAsset.AssetType(0, EMPTY);\n        }\n        address matcher = matchers[classLeft];\n        if (matcher != address(0)) {\n            return IAssetMatcher(matcher).matchAssets(leftAssetType, rightAssetType);\n        }\n        if (classLeft == classRight) {\n            return simpleMatch(leftAssetType, rightAssetType);\n        }\n        revert(\"not found IAssetMatcher\");\n    }\n\n    function simpleMatch(\n        LibAsset.AssetType memory leftAssetType,\n        LibAsset.AssetType memory rightAssetType\n    ) private pure returns (LibAsset.AssetType memory) {\n        bytes32 leftHash = keccak256(leftAssetType.data);\n        bytes32 rightHash = keccak256(rightAssetType.data);\n        if (leftHash == rightHash) {\n            return leftAssetType;\n        }\n        return LibAsset.AssetType(0, EMPTY);\n    }\n\n    uint256[49] private __gap;\n}\n"
    },
    "src/exchange-wrapper/tests/TestHelper.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport {TestHelper} from \"../../exchange/tests/TestHelper.sol\";\n"
    },
    "src/exchange/ExchangeV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"./ExchangeV2Core.sol\";\nimport \"../transfer-manager/GhostMarketTransferManager.sol\";\n\ncontract ExchangeV2 is ExchangeV2Core, GhostMarketTransferManager {\n    function __ExchangeV2_init(\n        address _transferProxy,\n        address _erc20TransferProxy,\n        uint newProtocolFee,\n        address newDefaultFeeReceiver,\n        IRoyaltiesProvider newRoyaltiesProvider\n    ) external initializer {\n        __Context_init_unchained();\n        __Ownable_init_unchained();\n        __TransferExecutor_init_unchained(_transferProxy, _erc20TransferProxy);\n        __GhostMarketTransferManager_init_unchained(newProtocolFee, newDefaultFeeReceiver, newRoyaltiesProvider);\n        __OrderValidator_init_unchained();\n    }\n}\n"
    },
    "src/exchange/ExchangeV2Core.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"../librairies/LibFill.sol\";\nimport \"../librairies/LibOrderData.sol\";\nimport \"../librairies/LibDirectTransfer.sol\";\nimport \"./OrderValidator.sol\";\nimport \"../custom-matcher/AssetMatcher.sol\";\n\nimport \"../transfer-manager/TransferExecutor.sol\";\nimport \"../interfaces/ITransferManager.sol\";\nimport \"../librairies/LibDeal.sol\";\n\nabstract contract ExchangeV2Core is\n    Initializable,\n    OwnableUpgradeable,\n    AssetMatcher,\n    TransferExecutor,\n    OrderValidator,\n    ITransferManager\n{\n    using LibTransfer for address;\n\n    //dev @deprecated\n    address private matchAndTransferAdmin;\n\n    uint256 private constant UINT256_MAX = type(uint256).max;\n\n    //state of the orders\n    mapping(bytes32 => uint256) public fills;\n\n    //events\n    event OrderCancelled(\n        bytes32 indexed hash,\n        address indexed maker,\n        LibAsset.AssetType makeAssetType,\n        LibAsset.AssetType takeAssetType\n    );\n    event OrderFilled(\n        bytes32 indexed leftHash,\n        bytes32 indexed rightHash,\n        address indexed leftMaker,\n        address rightMaker,\n        uint newLeftFill,\n        uint newRightFill,\n        LibAsset.AssetType leftAsset,\n        LibAsset.AssetType rightAsset\n    );\n\n    function cancel(LibOrder.Order memory order) external {\n        require(_msgSender() == order.maker, \"not a maker\");\n        require(order.salt != 0, \"0 salt can't be used\");\n        bytes32 orderKeyHash = LibOrder.hashKey(order);\n        fills[orderKeyHash] = UINT256_MAX;\n        emit OrderCancelled(orderKeyHash, order.maker, order.makeAsset.assetType, order.takeAsset.assetType);\n    }\n\n    function bulkCancelOrders(LibOrder.Order[] memory orders) external {\n        uint256 length = orders.length;\n        for (uint256 i; i < length; ++i) {\n            // we can't call this.cancel function as the _msgSender() is changed to the contract address\n            // and the _msgSender() == order.maker check fails\n            require(_msgSender() == orders[i].maker, \"not a maker\");\n            require(orders[i].salt != 0, \"0 salt can't be used\");\n            bytes32 orderKeyHash = LibOrder.hashKey(orders[i]);\n            fills[orderKeyHash] = UINT256_MAX;\n            emit OrderCancelled(\n                orderKeyHash,\n                orders[i].maker,\n                orders[i].makeAsset.assetType,\n                orders[i].takeAsset.assetType\n            );\n        }\n    }\n\n    /**\n     * @dev function, generate sellOrder and buyOrder from parameters and call validateAndMatch() for purchase transaction\n     * @param direct struct with parameters for purchase operation\n     */\n    function directPurchase(LibDirectTransfer.Purchase calldata direct) external payable {\n        LibAsset.AssetType memory paymentAssetType = getPaymentAssetType(direct.paymentToken);\n\n        LibOrder.Order memory sellOrder = LibOrder.Order(\n            direct.sellOrderMaker,\n            LibAsset.Asset(LibAsset.AssetType(direct.nftAssetClass, direct.nftData), direct.sellOrderNftAmount),\n            address(0),\n            LibAsset.Asset(paymentAssetType, direct.sellOrderPaymentAmount),\n            direct.sellOrderSalt,\n            direct.sellOrderStart,\n            direct.sellOrderEnd,\n            direct.sellOrderDataType,\n            direct.sellOrderData\n        );\n\n        LibOrder.Order memory buyOrder = LibOrder.Order(\n            address(0),\n            LibAsset.Asset(paymentAssetType, direct.buyOrderPaymentAmount),\n            address(0),\n            LibAsset.Asset(LibAsset.AssetType(direct.nftAssetClass, direct.nftData), direct.buyOrderNftAmount),\n            0,\n            0,\n            0,\n            getOtherOrderType(direct.sellOrderDataType),\n            direct.buyOrderData\n        );\n\n        validateFull(sellOrder, direct.sellOrderSignature);\n        matchAndTransfer(sellOrder, buyOrder);\n    }\n\n    /**\n     * @dev function, generate sellOrder and buyOrder from parameters and call validateAndMatch() for accept bid transaction\n     * @param direct struct with parameters for accept bid operation\n     */\n    function directAcceptBid(LibDirectTransfer.AcceptBid calldata direct) external payable {\n        LibAsset.AssetType memory paymentAssetType = getPaymentAssetType(direct.paymentToken);\n\n        LibOrder.Order memory buyOrder = LibOrder.Order(\n            direct.bidMaker,\n            LibAsset.Asset(paymentAssetType, direct.bidPaymentAmount),\n            address(0),\n            LibAsset.Asset(LibAsset.AssetType(direct.nftAssetClass, direct.nftData), direct.bidNftAmount),\n            direct.bidSalt,\n            direct.bidStart,\n            direct.bidEnd,\n            direct.bidDataType,\n            direct.bidData\n        );\n\n        LibOrder.Order memory sellOrder = LibOrder.Order(\n            address(0),\n            LibAsset.Asset(LibAsset.AssetType(direct.nftAssetClass, direct.nftData), direct.sellOrderNftAmount),\n            address(0),\n            LibAsset.Asset(paymentAssetType, direct.sellOrderPaymentAmount),\n            0,\n            0,\n            0,\n            getOtherOrderType(direct.bidDataType),\n            direct.sellOrderData\n        );\n\n        validateFull(buyOrder, direct.bidSignature);\n        matchAndTransfer(sellOrder, buyOrder);\n    }\n\n    /**\n     * @dev function, match orders\n     * @param orderLeft left order\n     * @param signatureLeft order left signature\n     * @param orderRight right order\n     * @param signatureRight order right signature\n     */\n    function matchOrders(\n        LibOrder.Order memory orderLeft,\n        bytes memory signatureLeft,\n        LibOrder.Order memory orderRight,\n        bytes memory signatureRight\n    ) external payable {\n        validateOrders(orderLeft, signatureLeft, orderRight, signatureRight);\n        matchAndTransfer(orderLeft, orderRight);\n    }\n\n    /**\n     * @dev function, validate orders\n     * @param orderLeft left order\n     * @param signatureLeft order left signature\n     * @param orderRight right order\n     * @param signatureRight order right signature\n     */\n    function validateOrders(\n        LibOrder.Order memory orderLeft,\n        bytes memory signatureLeft,\n        LibOrder.Order memory orderRight,\n        bytes memory signatureRight\n    ) internal view {\n        validateFull(orderLeft, signatureLeft);\n        validateFull(orderRight, signatureRight);\n        if (orderLeft.taker != address(0)) {\n            if (orderRight.maker != address(0))\n                require(orderRight.maker == orderLeft.taker, \"leftOrder.taker verification failed\");\n        }\n        if (orderRight.taker != address(0)) {\n            if (orderLeft.maker != address(0))\n                require(orderRight.taker == orderLeft.maker, \"rightOrder.taker verification failed\");\n        }\n    }\n\n    /**\n        @notice matches valid orders and transfers their assets\n        @param orderLeft the left order of the match\n        @param orderRight the right order of the match\n    */\n    function matchAndTransfer(LibOrder.Order memory orderLeft, LibOrder.Order memory orderRight) internal {\n        (LibAsset.AssetType memory makeMatch, LibAsset.AssetType memory takeMatch) = matchAssets(orderLeft, orderRight);\n\n        (\n            LibOrderData.GenericOrderData memory leftOrderData,\n            LibOrderData.GenericOrderData memory rightOrderData,\n            LibFill.FillResult memory newFill\n        ) = parseOrdersSetFillEmitMatch(orderLeft, orderRight);\n\n        (uint totalMakeValue, uint totalTakeValue) = doTransfers(\n            LibDeal.DealSide({\n                asset: LibAsset.Asset({assetType: makeMatch, value: newFill.leftValue}),\n                payouts: leftOrderData.payouts,\n                originFees: leftOrderData.originFees,\n                proxy: proxies[makeMatch.assetClass],\n                from: orderLeft.maker\n            }),\n            LibDeal.DealSide({\n                asset: LibAsset.Asset(takeMatch, newFill.rightValue),\n                payouts: rightOrderData.payouts,\n                originFees: rightOrderData.originFees,\n                proxy: proxies[takeMatch.assetClass],\n                from: orderRight.maker\n            }),\n            getDealData(\n                makeMatch.assetClass,\n                takeMatch.assetClass,\n                orderLeft.dataType,\n                orderRight.dataType,\n                leftOrderData,\n                rightOrderData\n            )\n        );\n        if (makeMatch.assetClass == LibAsset.ETH_ASSET_CLASS) {\n            require(takeMatch.assetClass != LibAsset.ETH_ASSET_CLASS, \"wrong takeMatch.assetClass\");\n            require(msg.value >= totalMakeValue, \"not enough eth\");\n            if (msg.value > totalMakeValue) {\n                address(msg.sender).transferEth(msg.value - (totalMakeValue));\n            }\n        } else if (takeMatch.assetClass == LibAsset.ETH_ASSET_CLASS) {\n            require(msg.value >= totalTakeValue, \"not enough eth\");\n            if (msg.value > totalTakeValue) {\n                address(msg.sender).transferEth(msg.value - (totalTakeValue));\n            }\n        }\n\n        bytes32 leftOrderKeyHash = LibOrder.hashKey(orderLeft);\n        bytes32 rightOrderKeyHash = LibOrder.hashKey(orderRight);\n        emit OrderFilled(\n            leftOrderKeyHash,\n            rightOrderKeyHash,\n            orderLeft.maker,\n            orderRight.maker,\n            newFill.rightValue,\n            newFill.leftValue,\n            makeMatch,\n            takeMatch\n        );\n    }\n\n    function parseOrdersSetFillEmitMatch(\n        LibOrder.Order memory orderLeft,\n        LibOrder.Order memory orderRight\n    )\n        internal\n        returns (\n            LibOrderData.GenericOrderData memory leftOrderData,\n            LibOrderData.GenericOrderData memory rightOrderData,\n            LibFill.FillResult memory newFill\n        )\n    {\n        bytes32 leftOrderKeyHash = LibOrder.hashKey(orderLeft);\n        bytes32 rightOrderKeyHash = LibOrder.hashKey(orderRight);\n\n        address msgSender = _msgSender();\n        if (orderLeft.maker == address(0)) {\n            orderLeft.maker = msgSender;\n        }\n        if (orderRight.maker == address(0)) {\n            orderRight.maker = msgSender;\n        }\n\n        leftOrderData = LibOrderData.parse(orderLeft);\n        rightOrderData = LibOrderData.parse(orderRight);\n\n        newFill = setFillEmitMatch(\n            orderLeft,\n            orderRight,\n            leftOrderKeyHash,\n            rightOrderKeyHash,\n            leftOrderData.isMakeFill,\n            rightOrderData.isMakeFill\n        );\n    }\n\n    function getDealData(\n        bytes4 makeMatchAssetClass,\n        bytes4 takeMatchAssetClass,\n        bytes4 leftDataType,\n        bytes4 rightDataType,\n        LibOrderData.GenericOrderData memory leftOrderData,\n        LibOrderData.GenericOrderData memory rightOrderData\n    ) internal pure returns (LibDeal.DealData memory dealData) {\n        dealData.feeSide = LibFeeSide.getFeeSide(makeMatchAssetClass, takeMatchAssetClass);\n        dealData.maxFeesBasePoint = getMaxFee(\n            leftDataType,\n            rightDataType,\n            leftOrderData,\n            rightOrderData,\n            dealData.feeSide\n        );\n    }\n\n    /**\n        @notice determines the max amount of fees for the match\n        @param dataTypeLeft data type of the left order\n        @param dataTypeRight data type of the right order\n        @param leftOrderData data of the left order\n        @param rightOrderData data of the right order\n        @param feeSide fee side of the match\n        @return max fee amount in base points\n    */\n    function getMaxFee(\n        bytes4 dataTypeLeft,\n        bytes4 dataTypeRight,\n        LibOrderData.GenericOrderData memory leftOrderData,\n        LibOrderData.GenericOrderData memory rightOrderData,\n        LibFeeSide.FeeSide feeSide\n    ) internal pure returns (uint) {\n        if (\n            dataTypeLeft != LibOrderDataV3.V3_SELL &&\n            dataTypeRight != LibOrderDataV3.V3_SELL &&\n            dataTypeLeft != LibOrderDataV3.V3_BUY &&\n            dataTypeRight != LibOrderDataV3.V3_BUY\n        ) {\n            return 0;\n        }\n\n        uint matchFees = getSumFees(leftOrderData.originFees, rightOrderData.originFees);\n        uint maxFee;\n        if (feeSide == LibFeeSide.FeeSide.LEFT) {\n            maxFee = rightOrderData.maxFeesBasePoint;\n            require(dataTypeLeft == LibOrderDataV3.V3_BUY && dataTypeRight == LibOrderDataV3.V3_SELL, \"wrong V3 type1\");\n        } else if (feeSide == LibFeeSide.FeeSide.RIGHT) {\n            maxFee = leftOrderData.maxFeesBasePoint;\n            require(dataTypeRight == LibOrderDataV3.V3_BUY && dataTypeLeft == LibOrderDataV3.V3_SELL, \"wrong V3 type2\");\n        } else {\n            return 0;\n        }\n        require(maxFee > 0 && maxFee >= matchFees && maxFee <= 1000, \"wrong maxFee\");\n\n        return maxFee;\n    }\n\n    /**\n        @notice calculates amount of fees for the match\n        @param originLeft origin fees of the left order\n        @param originRight origin fees of the right order\n        @return sum of all fees for the match (protcolFee + leftOrder.originFees + rightOrder.originFees)\n     */\n    function getSumFees(\n        LibPart.Part[] memory originLeft,\n        LibPart.Part[] memory originRight\n    ) internal pure returns (uint) {\n        uint result = 0;\n\n        //adding left origin fees\n        for (uint i; i < originLeft.length; i++) {\n            result = result + originLeft[i].value;\n        }\n\n        //adding right origin fees\n        for (uint i; i < originRight.length; i++) {\n            result = result + originRight[i].value;\n        }\n\n        return result;\n    }\n\n    /**\n        @notice calculates fills for the matched orders and set them in \"fills\" mapping\n        @param orderLeft left order of the match\n        @param orderRight right order of the match\n        @param leftMakeFill true if the left orders uses make-side fills, false otherwise\n        @param rightMakeFill true if the right orders uses make-side fills, false otherwise\n        @return returns change in orders' fills by the match \n    */\n    function setFillEmitMatch(\n        LibOrder.Order memory orderLeft,\n        LibOrder.Order memory orderRight,\n        bytes32 leftOrderKeyHash,\n        bytes32 rightOrderKeyHash,\n        bool leftMakeFill,\n        bool rightMakeFill\n    ) internal returns (LibFill.FillResult memory) {\n        uint leftOrderFill = getOrderFill(orderLeft.salt, leftOrderKeyHash);\n        uint rightOrderFill = getOrderFill(orderRight.salt, rightOrderKeyHash);\n        LibFill.FillResult memory newFill = LibFill.fillOrder(\n            orderLeft,\n            orderRight,\n            leftOrderFill,\n            rightOrderFill,\n            leftMakeFill,\n            rightMakeFill\n        );\n\n        require(newFill.rightValue > 0 && newFill.leftValue > 0, \"nothing to fill\");\n\n        if (orderLeft.salt != 0) {\n            if (leftMakeFill) {\n                fills[leftOrderKeyHash] = leftOrderFill + (newFill.leftValue);\n            } else {\n                fills[leftOrderKeyHash] = leftOrderFill + (newFill.rightValue);\n            }\n        }\n\n        if (orderRight.salt != 0) {\n            if (rightMakeFill) {\n                fills[rightOrderKeyHash] = rightOrderFill + (newFill.rightValue);\n            } else {\n                fills[rightOrderKeyHash] = rightOrderFill + (newFill.leftValue);\n            }\n        }\n\n        return newFill;\n    }\n\n    function getOrderFill(uint salt, bytes32 hash) internal view returns (uint fill) {\n        if (salt == 0) {\n            fill = 0;\n        } else {\n            fill = fills[hash];\n        }\n    }\n\n    function matchAssets(\n        LibOrder.Order memory orderLeft,\n        LibOrder.Order memory orderRight\n    ) internal view returns (LibAsset.AssetType memory makeMatch, LibAsset.AssetType memory takeMatch) {\n        makeMatch = matchAssets(orderLeft.makeAsset.assetType, orderRight.takeAsset.assetType);\n        require(makeMatch.assetClass != 0, \"assets don't match\");\n        takeMatch = matchAssets(orderLeft.takeAsset.assetType, orderRight.makeAsset.assetType);\n        require(takeMatch.assetClass != 0, \"assets don't match\");\n    }\n\n    function validateFull(LibOrder.Order memory order, bytes memory signature) internal view {\n        LibOrder.validateOrderTime(order);\n        validate(order, signature);\n    }\n\n    function getPaymentAssetType(address token) internal pure returns (LibAsset.AssetType memory) {\n        LibAsset.AssetType memory result;\n        if (token == address(0)) {\n            result.assetClass = LibAsset.ETH_ASSET_CLASS;\n        } else {\n            result.assetClass = LibAsset.ERC20_ASSET_CLASS;\n            result.data = abi.encode(token);\n        }\n        return result;\n    }\n\n    function getOtherOrderType(bytes4 dataType) internal pure returns (bytes4) {\n        if (dataType == LibOrderDataV3.V3_SELL) {\n            return LibOrderDataV3.V3_BUY;\n        }\n        if (dataType == LibOrderDataV3.V3_BUY) {\n            return LibOrderDataV3.V3_SELL;\n        }\n        return dataType;\n    }\n\n    uint256[49] private __gap;\n}\n"
    },
    "src/exchange/OrderValidator.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"../interfaces/IERC1271.sol\";\nimport \"../librairies/LibOrder.sol\";\nimport \"../librairies/LibSignature.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol\";\n\nabstract contract OrderValidator is Initializable, ContextUpgradeable, EIP712Upgradeable {\n    using LibSignature for bytes32;\n    using AddressUpgradeable for address;\n\n    bytes4 internal constant MAGICVALUE = 0x1626ba7e;\n\n    function __OrderValidator_init_unchained() internal initializer {\n        __EIP712_init_unchained(\"GhostMarket\", \"2\");\n    }\n\n    function validate(LibOrder.Order memory order, bytes memory signature) internal view {\n        if (order.salt == 0) {\n            if (order.maker != address(0)) {\n                require(_msgSender() == order.maker, \"maker is not tx sender\");\n            }\n        } else {\n            if (_msgSender() != order.maker) {\n                bytes32 hash = LibOrder.hash(order);\n                // if maker is contract checking ERC1271 signature\n                if (order.maker.isContract()) {\n                    require(\n                        IERC1271(order.maker).isValidSignature(_hashTypedDataV4(hash), signature) == MAGICVALUE,\n                        \"contract order signature verification error\"\n                    );\n                } else {\n                    // if maker is not contract then checking ECDSA signature\n                    if (_hashTypedDataV4(hash).recover(signature) != order.maker) {\n                        revert(\"order signature verification error\");\n                    } else {\n                        require(order.maker != address(0), \"no maker\");\n                    }\n                }\n            }\n        }\n    }\n\n    uint256[50] private __gap;\n}\n"
    },
    "src/exchange/tests/ExchangeV10.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"../ExchangeV2.sol\";\n\ncontract ExchangeV10 is ExchangeV2 {\n    function getSomething() external pure returns (uint) {\n        return 10;\n    }\n}\n"
    },
    "src/exchange/tests/OrderValidatorTest.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"../OrderValidator.sol\";\n\ncontract OrderValidatorTest is OrderValidator {\n    function __OrderValidatorTest_init() external initializer {\n        __OrderValidator_init_unchained();\n    }\n\n    function validateOrderTest(LibOrder.Order calldata order, bytes calldata signature) external view {\n        return validate(order, signature);\n    }\n}\n"
    },
    "src/exchange/tests/TestExchangeV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"../ExchangeV2.sol\";\nimport \"../ExchangeV2Core.sol\";\nimport \"../../transfer-manager/GhostMarketTransferManager.sol\";\n\ncontract TestExchangeV2 is ExchangeV2 {\n    function matchAndTransferExternal(\n        LibOrder.Order memory orderLeft,\n        LibOrder.Order memory orderRight\n    ) public payable {\n        matchAndTransfer(orderLeft, orderRight);\n    }\n\n    uint256[50] private __gap;\n}\n"
    },
    "src/exchange/tests/TestHelper.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"../ExchangeV2.sol\";\n\ncontract TestHelper {\n    function encode(LibOrderDataV1.DataV1 memory data) external pure returns (bytes memory) {\n        return abi.encode(data);\n    }\n\n    function encodeV2(LibOrderDataV2.DataV2 memory data) external pure returns (bytes memory) {\n        return abi.encode(data);\n    }\n\n    function encodeV3_SELL(LibOrderDataV3.DataV3_SELL memory data) external pure returns (bytes memory) {\n        return abi.encode(data);\n    }\n\n    function encodeV3_BUY(LibOrderDataV3.DataV3_BUY memory data) external pure returns (bytes memory) {\n        return abi.encode(data);\n    }\n\n    function encodeOriginFeeIntoUint(address account, uint96 value) external pure returns (uint256) {\n        return (uint256(value) << 160) + uint256(uint160(account));\n    }\n\n    function hashKey(LibOrder.Order calldata order) external pure returns (bytes32) {\n        return LibOrder.hashKey(order);\n    }\n\n    function hashV2(\n        address maker,\n        LibAsset.Asset memory makeAsset,\n        LibAsset.Asset memory takeAsset,\n        uint256 salt,\n        bytes memory data\n    ) public pure returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(maker, LibAsset.hash(makeAsset.assetType), LibAsset.hash(takeAsset.assetType), salt, data)\n            );\n    }\n}\n"
    },
    "src/interfaces/IAssetMatcher.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"../librairies/LibAsset.sol\";\n\ninterface IAssetMatcher {\n    function matchAssets(\n        LibAsset.AssetType memory leftAssetType,\n        LibAsset.AssetType memory rightAssetType\n    ) external view returns (LibAsset.AssetType memory);\n}\n"
    },
    "src/interfaces/IERC1271.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nabstract contract IERC1271 {\n    /**\n     * @dev Should return whether the signature provided is valid for the provided data\n     * @param _hash Hash of the data signed on the behalf of address(this)\n     * @param _signature Signature byte array associated with _data\n     *\n     * MUST return the bytes4 magic value 0x1626ba7e when function passes.\n     * MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5)\n     * MUST allow external calls\n     */\n    function isValidSignature(\n        bytes32 _hash,\n        bytes calldata _signature\n    ) external view virtual returns (bytes4 magicValue);\n}\n"
    },
    "src/interfaces/IERC20TransferProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\n\ninterface IERC20TransferProxy {\n    function erc20safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) external;\n}\n"
    },
    "src/interfaces/INftTransferProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\";\n\ninterface INftTransferProxy {\n    function erc721safeTransferFrom(IERC721Upgradeable token, address from, address to, uint256 tokenId) external;\n\n    function erc1155safeTransferFrom(\n        IERC1155Upgradeable token,\n        address from,\n        address to,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "src/interfaces/IRoyaltiesProvider.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"../librairies/LibPart.sol\";\n\ninterface IRoyaltiesProvider {\n    function getRoyalties(address token, uint256 tokenId) external returns (LibPart.Part[] memory);\n}\n"
    },
    "src/interfaces/ITransferExecutor.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"../librairies/LibAsset.sol\";\n\nabstract contract ITransferExecutor {\n    function transfer(LibAsset.Asset memory asset, address from, address to, address proxy) internal virtual;\n}\n"
    },
    "src/interfaces/ITransferManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"../librairies/LibDeal.sol\";\nimport \"./ITransferExecutor.sol\";\n\nabstract contract ITransferManager is ITransferExecutor {\n    function doTransfers(\n        LibDeal.DealSide memory left,\n        LibDeal.DealSide memory right,\n        LibDeal.DealData memory dealData\n    ) internal virtual returns (uint totalMakeValue, uint totalTakeValue);\n}\n"
    },
    "src/interfaces/ITransferProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"../librairies/LibAsset.sol\";\n\ninterface ITransferProxy {\n    function transfer(LibAsset.Asset calldata asset, address from, address to) external;\n}\n"
    },
    "src/librairies/BpLibrary.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nlibrary BpLibrary {\n    function bp(uint256 value, uint256 bpValue) internal pure returns (uint256) {\n        return (value * (bpValue)) / (10000);\n    }\n}\n"
    },
    "src/librairies/LibAsset.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nlibrary LibAsset {\n    bytes4 public constant ETH_ASSET_CLASS = bytes4(keccak256(\"ETH\"));\n    bytes4 public constant ERC20_ASSET_CLASS = bytes4(keccak256(\"ERC20\"));\n    bytes4 public constant ERC721_ASSET_CLASS = bytes4(keccak256(\"ERC721\"));\n    bytes4 public constant ERC1155_ASSET_CLASS = bytes4(keccak256(\"ERC1155\"));\n    bytes4 public constant COLLECTION = bytes4(keccak256(\"COLLECTION\"));\n    bytes4 public constant CRYPTO_PUNKS = bytes4(keccak256(\"CRYPTO_PUNKS\"));\n\n    bytes32 public constant ASSET_TYPE_TYPEHASH = keccak256(\"AssetType(bytes4 assetClass,bytes data)\");\n\n    bytes32 public constant ASSET_TYPEHASH =\n        keccak256(\"Asset(AssetType assetType,uint256 value)AssetType(bytes4 assetClass,bytes data)\");\n\n    struct AssetType {\n        bytes4 assetClass;\n        bytes data;\n    }\n\n    struct Asset {\n        AssetType assetType;\n        uint256 value;\n    }\n\n    function hash(AssetType memory assetType) internal pure returns (bytes32) {\n        return keccak256(abi.encode(ASSET_TYPE_TYPEHASH, assetType.assetClass, keccak256(assetType.data)));\n    }\n\n    function hash(Asset memory asset) internal pure returns (bytes32) {\n        return keccak256(abi.encode(ASSET_TYPEHASH, hash(asset.assetType), asset.value));\n    }\n}\n"
    },
    "src/librairies/LibDeal.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"./LibPart.sol\";\nimport \"./LibAsset.sol\";\nimport \"./LibFeeSide.sol\";\n\nlibrary LibDeal {\n    struct DealSide {\n        LibAsset.Asset asset;\n        LibPart.Part[] payouts;\n        LibPart.Part[] originFees;\n        address proxy;\n        address from;\n    }\n\n    struct DealData {\n        uint maxFeesBasePoint;\n        LibFeeSide.FeeSide feeSide;\n    }\n}\n"
    },
    "src/librairies/LibDirectTransfer.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"./LibAsset.sol\";\n\nlibrary LibDirectTransfer {\n    //LibDirectTransfers\n    /*All buy parameters need for create buyOrder and sellOrder*/\n    struct Purchase {\n        address sellOrderMaker; //\n        uint256 sellOrderNftAmount;\n        bytes4 nftAssetClass;\n        bytes nftData;\n        uint256 sellOrderPaymentAmount;\n        address paymentToken;\n        uint256 sellOrderSalt;\n        uint sellOrderStart;\n        uint sellOrderEnd;\n        bytes4 sellOrderDataType;\n        bytes sellOrderData;\n        bytes sellOrderSignature;\n        uint256 buyOrderPaymentAmount;\n        uint256 buyOrderNftAmount;\n        bytes buyOrderData;\n    }\n\n    /*All accept bid parameters need for create buyOrder and sellOrder*/\n    struct AcceptBid {\n        address bidMaker; //\n        uint256 bidNftAmount;\n        bytes4 nftAssetClass;\n        bytes nftData;\n        uint256 bidPaymentAmount;\n        address paymentToken;\n        uint256 bidSalt;\n        uint bidStart;\n        uint bidEnd;\n        bytes4 bidDataType;\n        bytes bidData;\n        bytes bidSignature;\n        uint256 sellOrderPaymentAmount;\n        uint256 sellOrderNftAmount;\n        bytes sellOrderData;\n    }\n}\n"
    },
    "src/librairies/LibERC1155LazyMint.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"./LibPart.sol\";\n\nlibrary LibERC1155LazyMint {\n    bytes4 public constant ERC1155_LAZY_ASSET_CLASS = bytes4(keccak256(\"ERC1155_LAZY\"));\n\n    struct Mint1155Data {\n        uint tokenId;\n        string tokenURI;\n        uint amount;\n        address minter;\n        LibPart.Part[] royalties;\n        bytes signature;\n    }\n\n    bytes32 public constant MINT_AND_TRANSFER_TYPEHASH =\n        keccak256(\n            \"Mint1155(uint256 tokenId,string tokenURI,uint256 amount,address minter,Part[] royalties)Part(address recipient,uint256 value)\"\n        );\n\n    function hash(Mint1155Data memory data) internal pure returns (bytes32) {\n        bytes32[] memory royaltiesBytes = new bytes32[](data.royalties.length);\n        uint length = data.royalties.length;\n        for (uint i; i < length; ++i) {\n            royaltiesBytes[i] = LibPart.hash(data.royalties[i]);\n        }\n        return\n            keccak256(\n                abi.encode(\n                    MINT_AND_TRANSFER_TYPEHASH,\n                    data.tokenId,\n                    keccak256(bytes(data.tokenURI)),\n                    data.amount,\n                    data.minter,\n                    keccak256(abi.encodePacked(royaltiesBytes))\n                )\n            );\n    }\n}\n"
    },
    "src/librairies/LibERC721LazyMint.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"./LibPart.sol\";\n\nlibrary LibERC721LazyMint {\n    bytes4 public constant ERC721_LAZY_ASSET_CLASS = bytes4(keccak256(\"ERC721_LAZY\"));\n\n    struct Mint721Data {\n        uint tokenId;\n        string tokenURI;\n        address minter;\n        LibPart.Part[] royalties;\n        bytes signature;\n    }\n\n    bytes32 public constant MINT_AND_TRANSFER_TYPEHASH =\n        keccak256(\n            \"Mint721(uint256 tokenId,string tokenURI,address minter,Part[] royalties)Part(address recipient,uint256 value)\"\n        );\n\n    function hash(Mint721Data memory data) internal pure returns (bytes32) {\n        bytes32[] memory royaltiesBytes = new bytes32[](data.royalties.length);\n        uint length = data.royalties.length;\n        for (uint i; i < length; ++i) {\n            royaltiesBytes[i] = LibPart.hash(data.royalties[i]);\n        }\n        return\n            keccak256(\n                abi.encode(\n                    MINT_AND_TRANSFER_TYPEHASH,\n                    data.tokenId,\n                    keccak256(bytes(data.tokenURI)),\n                    data.minter,\n                    keccak256(abi.encodePacked(royaltiesBytes))\n                )\n            );\n    }\n}\n"
    },
    "src/librairies/LibFeeSide.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"./LibAsset.sol\";\n\nlibrary LibFeeSide {\n    enum FeeSide {\n        NONE,\n        LEFT,\n        RIGHT\n    }\n\n    function getFeeSide(bytes4 leftClass, bytes4 rightClass) internal pure returns (FeeSide) {\n        if (leftClass == LibAsset.ETH_ASSET_CLASS) {\n            return FeeSide.LEFT;\n        }\n        if (rightClass == LibAsset.ETH_ASSET_CLASS) {\n            return FeeSide.RIGHT;\n        }\n        if (leftClass == LibAsset.ERC20_ASSET_CLASS) {\n            return FeeSide.LEFT;\n        }\n        if (rightClass == LibAsset.ERC20_ASSET_CLASS) {\n            return FeeSide.RIGHT;\n        }\n        if (leftClass == LibAsset.ERC1155_ASSET_CLASS) {\n            return FeeSide.LEFT;\n        }\n        if (rightClass == LibAsset.ERC1155_ASSET_CLASS) {\n            return FeeSide.RIGHT;\n        }\n        return FeeSide.NONE;\n    }\n}\n"
    },
    "src/librairies/LibFill.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"./LibOrder.sol\";\n\nlibrary LibFill {\n    struct FillResult {\n        uint leftValue;\n        uint rightValue;\n    }\n\n    struct IsMakeFill {\n        bool leftMake;\n        bool rightMake;\n    }\n\n    /**\n     * @dev Should return filled values\n     * @param leftOrder left order\n     * @param rightOrder right order\n     * @param leftOrderFill current fill of the left order (0 if order is unfilled)\n     * @param rightOrderFill current fill of the right order (0 if order is unfilled)\n     * @param leftIsMakeFill true if left orders fill is calculated from the make side, false if from the take side\n     * @param rightIsMakeFill true if right orders fill is calculated from the make side, false if from the take side\n     */\n    function fillOrder(\n        LibOrder.Order memory leftOrder,\n        LibOrder.Order memory rightOrder,\n        uint leftOrderFill,\n        uint rightOrderFill,\n        bool leftIsMakeFill,\n        bool rightIsMakeFill\n    ) internal pure returns (FillResult memory) {\n        (uint leftMakeValue, uint leftTakeValue) = LibOrder.calculateRemaining(\n            leftOrder,\n            leftOrderFill,\n            leftIsMakeFill\n        );\n        (uint rightMakeValue, uint rightTakeValue) = LibOrder.calculateRemaining(\n            rightOrder,\n            rightOrderFill,\n            rightIsMakeFill\n        );\n\n        //We have 3 cases here:\n        if (rightTakeValue > leftMakeValue) {\n            //1nd: left order should be fully filled\n            return fillLeft(leftMakeValue, leftTakeValue, rightOrder.makeAsset.value, rightOrder.takeAsset.value);\n        } //2st: right order should be fully filled or 3d: both should be fully filled if required values are the same\n        return fillRight(leftOrder.makeAsset.value, leftOrder.takeAsset.value, rightMakeValue, rightTakeValue);\n    }\n\n    function fillRight(\n        uint leftMakeValue,\n        uint leftTakeValue,\n        uint rightMakeValue,\n        uint rightTakeValue\n    ) internal pure returns (FillResult memory result) {\n        uint makerValue = LibMath.safeGetPartialAmountFloor(rightTakeValue, leftMakeValue, leftTakeValue);\n        require(makerValue <= rightMakeValue, \"fillRight: unable to fill\");\n        return FillResult(rightTakeValue, makerValue);\n    }\n\n    function fillLeft(\n        uint leftMakeValue,\n        uint leftTakeValue,\n        uint rightMakeValue,\n        uint rightTakeValue\n    ) internal pure returns (FillResult memory result) {\n        uint rightTake = LibMath.safeGetPartialAmountFloor(leftTakeValue, rightMakeValue, rightTakeValue);\n        require(rightTake <= leftMakeValue, \"fillLeft: unable to fill\");\n        return FillResult(leftMakeValue, leftTakeValue);\n    }\n}\n"
    },
    "src/librairies/LibMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nlibrary LibMath {\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    ///      Reverts if rounding error is >= 0.1%\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount value of target rounded down.\n    function safeGetPartialAmountFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    ) internal pure returns (uint256 partialAmount) {\n        if (isRoundingErrorFloor(numerator, denominator, target)) {\n            revert(\"rounding error\");\n        }\n        partialAmount = (numerator * (target)) / (denominator);\n    }\n\n    /// @dev Checks if rounding error >= 0.1% when rounding down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to multiply with numerator/denominator.\n    /// @return isError Rounding error is present.\n    function isRoundingErrorFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    ) internal pure returns (bool isError) {\n        if (denominator == 0) {\n            revert(\"division by zero\");\n        }\n\n        // The absolute rounding error is the difference between the rounded\n        // value and the ideal value. The relative rounding error is the\n        // absolute rounding error divided by the absolute value of the\n        // ideal value. This is undefined when the ideal value is zero.\n        //\n        // The ideal value is `numerator * target / denominator`.\n        // Let's call `numerator * target % denominator` the remainder.\n        // The absolute error is `remainder / denominator`.\n        //\n        // When the ideal value is zero, we require the absolute error to\n        // be zero. Fortunately, this is always the case. The ideal value is\n        // zero iff `numerator == 0` and/or `target == 0`. In this case the\n        // remainder and absolute error are also zero.\n        if (target == 0 || numerator == 0) {\n            return false;\n        }\n\n        // Otherwise, we want the relative rounding error to be strictly\n        // less than 0.1%.\n        // The relative error is `remainder / (numerator * target)`.\n        // We want the relative error less than 1 / 1000:\n        //        remainder / (numerator * target)  <  1 / 1000\n        // or equivalently:\n        //        1000 * remainder  <  numerator * target\n        // so we have a rounding error iff:\n        //        1000 * remainder  >=  numerator * target\n        uint256 remainder = mulmod(target, numerator, denominator);\n        isError = remainder * (1000) >= numerator * (target);\n    }\n\n    function safeGetPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    ) internal pure returns (uint256 partialAmount) {\n        if (isRoundingErrorCeil(numerator, denominator, target)) {\n            revert(\"rounding error\");\n        }\n        partialAmount = (numerator * (target)) + (denominator - (1)) / (denominator);\n    }\n\n    /// @dev Checks if rounding error >= 0.1% when rounding up.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to multiply with numerator/denominator.\n    /// @return isError Rounding error is present.\n    function isRoundingErrorCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    ) internal pure returns (bool isError) {\n        if (denominator == 0) {\n            revert(\"division by zero\");\n        }\n\n        // See the comments in `isRoundingError`.\n        if (target == 0 || numerator == 0) {\n            // When either is zero, the ideal value and rounded value are zero\n            // and there is no rounding error. (Although the relative error\n            // is undefined.)\n            return false;\n        }\n        // Compute remainder as before\n        uint256 remainder = mulmod(target, numerator, denominator);\n        remainder = denominator - ((remainder) % denominator);\n        isError = remainder * (1000) >= numerator * (target);\n        return isError;\n    }\n}\n"
    },
    "src/librairies/LibOrder.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"./LibAsset.sol\";\nimport \"./LibMath.sol\";\nimport \"./LibOrderDataV3.sol\";\nimport \"./LibOrderDataV2.sol\";\nimport \"./LibOrderDataV1.sol\";\n\nlibrary LibOrder {\n    bytes32 public constant ORDER_TYPEHASH =\n        keccak256(\n            \"Order(address maker,Asset makeAsset,address taker,Asset takeAsset,uint256 salt,uint256 start,uint256 end,bytes4 dataType,bytes data)Asset(AssetType assetType,uint256 value)AssetType(bytes4 assetClass,bytes data)\"\n        );\n\n    bytes4 public constant DEFAULT_ORDER_TYPE = 0xffffffff;\n\n    struct Order {\n        address maker;\n        LibAsset.Asset makeAsset;\n        address taker;\n        LibAsset.Asset takeAsset;\n        uint salt;\n        uint start;\n        uint end;\n        bytes4 dataType;\n        bytes data;\n    }\n\n    function calculateRemaining(\n        Order memory order,\n        uint fill,\n        bool isMakeFill\n    ) internal pure returns (uint makeValue, uint takeValue) {\n        if (isMakeFill) {\n            makeValue = order.makeAsset.value - (fill);\n            takeValue = LibMath.safeGetPartialAmountFloor(order.takeAsset.value, order.makeAsset.value, makeValue);\n        } else {\n            takeValue = order.takeAsset.value - (fill);\n            makeValue = LibMath.safeGetPartialAmountFloor(order.makeAsset.value, order.takeAsset.value, takeValue);\n        }\n    }\n\n    function hashKey(Order memory order) internal pure returns (bytes32) {\n        if (order.dataType == LibOrderDataV1.V1 || order.dataType == DEFAULT_ORDER_TYPE) {\n            return\n                keccak256(\n                    abi.encode(\n                        order.maker,\n                        LibAsset.hash(order.makeAsset.assetType),\n                        LibAsset.hash(order.takeAsset.assetType),\n                        order.salt\n                    )\n                );\n        } else {\n            //order.data is in hash for V2, V3 and all new order\n            return\n                keccak256(\n                    abi.encode(\n                        order.maker,\n                        LibAsset.hash(order.makeAsset.assetType),\n                        LibAsset.hash(order.takeAsset.assetType),\n                        order.salt,\n                        order.data\n                    )\n                );\n        }\n    }\n\n    function hash(Order memory order) internal pure returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(\n                    ORDER_TYPEHASH,\n                    order.maker,\n                    LibAsset.hash(order.makeAsset),\n                    order.taker,\n                    LibAsset.hash(order.takeAsset),\n                    order.salt,\n                    order.start,\n                    order.end,\n                    order.dataType,\n                    keccak256(order.data)\n                )\n            );\n    }\n\n    function validateOrderTime(LibOrder.Order memory order) internal view {\n        require(order.start == 0 || order.start < block.timestamp, \"Order start validation failed\");\n        require(order.end == 0 || order.end > block.timestamp, \"Order end validation failed\");\n    }\n}\n"
    },
    "src/librairies/LibOrderData.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"./LibOrder.sol\";\n\nlibrary LibOrderData {\n    struct GenericOrderData {\n        LibPart.Part[] payouts;\n        LibPart.Part[] originFees;\n        bool isMakeFill;\n        uint maxFeesBasePoint;\n    }\n\n    function parse(LibOrder.Order memory order) internal pure returns (GenericOrderData memory dataOrder) {\n        if (order.dataType == LibOrderDataV1.V1) {\n            LibOrderDataV1.DataV1 memory data = abi.decode(order.data, (LibOrderDataV1.DataV1));\n            dataOrder.payouts = data.payouts;\n            dataOrder.originFees = data.originFees;\n        } else if (order.dataType == LibOrderDataV2.V2) {\n            LibOrderDataV2.DataV2 memory data = abi.decode(order.data, (LibOrderDataV2.DataV2));\n            dataOrder.payouts = data.payouts;\n            dataOrder.originFees = data.originFees;\n            dataOrder.isMakeFill = data.isMakeFill;\n        } else if (order.dataType == LibOrderDataV3.V3_SELL) {\n            LibOrderDataV3.DataV3_SELL memory data = abi.decode(order.data, (LibOrderDataV3.DataV3_SELL));\n            dataOrder.payouts = parsePayouts(data.payouts);\n            dataOrder.originFees = parseOriginFeeData(data.originFeeFirst, data.originFeeSecond);\n            dataOrder.isMakeFill = true;\n            dataOrder.maxFeesBasePoint = data.maxFeesBasePoint;\n        } else if (order.dataType == LibOrderDataV3.V3_BUY) {\n            LibOrderDataV3.DataV3_BUY memory data = abi.decode(order.data, (LibOrderDataV3.DataV3_BUY));\n            dataOrder.payouts = parsePayouts(data.payouts);\n            dataOrder.originFees = parseOriginFeeData(data.originFeeFirst, data.originFeeSecond);\n            dataOrder.isMakeFill = false;\n        } else if (order.dataType == 0xffffffff) {} else {\n            revert(\"Unknown Order data type\");\n        }\n        if (dataOrder.payouts.length == 0) {\n            dataOrder.payouts = payoutSet(order.maker);\n        }\n    }\n\n    function payoutSet(address orderAddress) internal pure returns (LibPart.Part[] memory) {\n        LibPart.Part[] memory payout = new LibPart.Part[](1);\n        payout[0].account = payable(orderAddress);\n        payout[0].value = 10000;\n        return payout;\n    }\n\n    function parseOriginFeeData(uint dataFirst, uint dataSecond) internal pure returns (LibPart.Part[] memory) {\n        LibPart.Part[] memory originFee;\n\n        if (dataFirst > 0 && dataSecond > 0) {\n            originFee = new LibPart.Part[](2);\n\n            originFee[0] = uintToLibPart(dataFirst);\n            originFee[1] = uintToLibPart(dataSecond);\n        }\n\n        if (dataFirst > 0 && dataSecond == 0) {\n            originFee = new LibPart.Part[](1);\n\n            originFee[0] = uintToLibPart(dataFirst);\n        }\n\n        if (dataFirst == 0 && dataSecond > 0) {\n            originFee = new LibPart.Part[](1);\n\n            originFee[0] = uintToLibPart(dataSecond);\n        }\n\n        return originFee;\n    }\n\n    function parsePayouts(uint data) internal pure returns (LibPart.Part[] memory) {\n        LibPart.Part[] memory payouts;\n\n        if (data > 0) {\n            payouts = new LibPart.Part[](1);\n            payouts[0] = uintToLibPart(data);\n        }\n\n        return payouts;\n    }\n\n    /**\n        @notice converts uint to LibPart.Part\n        @param data address and value encoded in uint (first 12 bytes )\n        @return result LibPart.Part \n     */\n    function uintToLibPart(uint data) internal pure returns (LibPart.Part memory result) {\n        if (data > 0) {\n            result.account = payable(address(uint160(data)));\n            result.value = uint96(data >> 160);\n        }\n    }\n}\n"
    },
    "src/librairies/LibOrderDataV1.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"./LibPart.sol\";\n\nlibrary LibOrderDataV1 {\n    bytes4 public constant V1 = bytes4(keccak256(\"V1\"));\n\n    struct DataV1 {\n        LibPart.Part[] payouts;\n        LibPart.Part[] originFees;\n    }\n}\n"
    },
    "src/librairies/LibOrderDataV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"./LibPart.sol\";\n\nlibrary LibOrderDataV2 {\n    bytes4 public constant V2 = bytes4(keccak256(\"V2\"));\n\n    struct DataV2 {\n        LibPart.Part[] payouts;\n        LibPart.Part[] originFees;\n        bool isMakeFill;\n    }\n}\n"
    },
    "src/librairies/LibOrderDataV3.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"./LibPart.sol\";\n\nlibrary LibOrderDataV3 {\n    bytes4 public constant V3_SELL = bytes4(keccak256(\"V3_SELL\"));\n    bytes4 public constant V3_BUY = bytes4(keccak256(\"V3_BUY\"));\n\n    struct DataV3_SELL {\n        uint payouts;\n        uint originFeeFirst;\n        uint originFeeSecond;\n        uint maxFeesBasePoint;\n        bytes32 marketplaceMarker;\n    }\n\n    struct DataV3_BUY {\n        uint payouts;\n        uint originFeeFirst;\n        uint originFeeSecond;\n        bytes32 marketplaceMarker;\n    }\n}\n"
    },
    "src/librairies/LibPart.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nlibrary LibPart {\n    bytes32 public constant TYPE_HASH = keccak256(\"Part(address account,uint96 value)\");\n\n    struct Part {\n        address payable account;\n        uint96 value;\n    }\n\n    function hash(Part memory part) internal pure returns (bytes32) {\n        return keccak256(abi.encode(TYPE_HASH, part.account, part.value));\n    }\n}\n"
    },
    "src/librairies/LibSignature.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nlibrary LibSignature {\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        // Check the signature length\n        if (signature.length != 65) {\n            revert(\"ECDSA: invalid signature length\");\n        }\n\n        // Divide the signature in r, s and v variables\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n\n        // ecrecover takes the signature parameters, and the only way to get them\n        // currently is to use assembly.\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            r := mload(add(signature, 0x20))\n            s := mload(add(signature, 0x40))\n            v := byte(0, mload(add(signature, 0x60)))\n        }\n\n        return recover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover-bytes32-bytes-} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (281): 0 < s < secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        require(\n            uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0,\n            \"ECDSA: invalid signature 's' value\"\n        );\n\n        // If the signature is valid (and not malleable), return the signer address\n        // v > 30 is a special case, we need to adjust hash with \"\\x19Ethereum Signed Message:\\n32\"\n        // and v = v - 4\n        address signer;\n        if (v > 30) {\n            require(v - 4 == 27 || v - 4 == 28, \"ECDSA: invalid signature 'v' value\");\n            signer = ecrecover(toEthSignedMessageHash(hash), v - 4, r, s);\n        } else {\n            require(v == 27 || v == 28, \"ECDSA: invalid signature 'v' value\");\n            signer = ecrecover(hash, v, r, s);\n        }\n\n        require(signer != address(0), \"ECDSA: invalid signature\");\n\n        return signer;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * replicates the behavior of the\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\n     * JSON-RPC method.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n}\n"
    },
    "src/librairies/LibTransfer.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nlibrary LibTransfer {\n    function transferEth(address to, uint256 value) internal {\n        (bool success, ) = to.call{value: value}(\"\");\n        require(success, \"LibTransfer BaseCurrency transfer failed\");\n    }\n}\n"
    },
    "src/transfer-manager/GhostMarketTransferManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\n\nimport \"../librairies/LibERC721LazyMint.sol\";\nimport \"../librairies/LibERC1155LazyMint.sol\";\nimport \"../interfaces/IRoyaltiesProvider.sol\";\nimport \"../librairies/BpLibrary.sol\";\nimport \"../interfaces/ITransferManager.sol\";\n\nabstract contract GhostMarketTransferManager is OwnableUpgradeable, ITransferManager {\n    using BpLibrary for uint;\n\n    // @notice protocolFee is deprecated\n    uint private protocolFee;\n\n    IRoyaltiesProvider public royaltiesRegistry;\n\n    // deprecated: no need without protocolFee\n    address private defaultFeeReceiver;\n\n    // deprecated: no need without protocolFee\n    mapping(address => address) private feeReceivers;\n\n    function __GhostMarketTransferManager_init_unchained(\n        uint newProtocolFee,\n        address newDefaultFeeReceiver,\n        IRoyaltiesProvider newRoyaltiesProvider\n    ) internal initializer {\n        protocolFee = newProtocolFee;\n        defaultFeeReceiver = newDefaultFeeReceiver;\n        royaltiesRegistry = newRoyaltiesProvider;\n    }\n\n    function setRoyaltiesRegistry(IRoyaltiesProvider newRoyaltiesRegistry) external onlyOwner {\n        royaltiesRegistry = newRoyaltiesRegistry;\n    }\n\n    /**\n        @notice executes transfers for 2 matched orders\n        @param left DealSide from the left order (see LibDeal.sol)\n        @param right DealSide from the right order (see LibDeal.sol)\n        @param dealData DealData of the match (see LibDeal.sol)\n        @return totalLeftValue - total amount for the left order\n        @return totalRightValue - total amout for the right order\n    */\n    function doTransfers(\n        LibDeal.DealSide memory left,\n        LibDeal.DealSide memory right,\n        LibDeal.DealData memory dealData\n    ) internal override returns (uint totalLeftValue, uint totalRightValue) {\n        totalLeftValue = left.asset.value;\n        totalRightValue = right.asset.value;\n\n        if (dealData.feeSide == LibFeeSide.FeeSide.LEFT) {\n            totalLeftValue = doTransfersWithFees(left, right, dealData.maxFeesBasePoint);\n            transferPayouts(right.asset.assetType, right.asset.value, right.from, left.payouts, right.proxy);\n        } else if (dealData.feeSide == LibFeeSide.FeeSide.RIGHT) {\n            totalRightValue = doTransfersWithFees(right, left, dealData.maxFeesBasePoint);\n            transferPayouts(left.asset.assetType, left.asset.value, left.from, right.payouts, left.proxy);\n        } else {\n            transferPayouts(left.asset.assetType, left.asset.value, left.from, right.payouts, left.proxy);\n            transferPayouts(right.asset.assetType, right.asset.value, right.from, left.payouts, right.proxy);\n        }\n    }\n\n    /**\n        @notice executes the fee-side transfers (payment + fees)\n        @param paymentSide DealSide of the fee-side order\n        @param nftSide  DealSide of the nft-side order\n        @param maxFeesBasePoint max fee for the sell-order (used and is > 0 for V3 orders only)\n        @return totalAmount of fee-side asset\n    */\n    function doTransfersWithFees(\n        LibDeal.DealSide memory paymentSide,\n        LibDeal.DealSide memory nftSide,\n        uint maxFeesBasePoint\n    ) internal returns (uint totalAmount) {\n        totalAmount = calculateTotalAmount(paymentSide.asset.value, paymentSide.originFees, maxFeesBasePoint);\n        uint rest = totalAmount;\n\n        rest = transferRoyalties(\n            paymentSide.asset.assetType,\n            nftSide.asset.assetType,\n            nftSide.payouts,\n            rest,\n            paymentSide.asset.value,\n            paymentSide.from,\n            paymentSide.proxy\n        );\n        if (\n            paymentSide.originFees.length == 1 &&\n            nftSide.originFees.length == 1 &&\n            nftSide.originFees[0].account == paymentSide.originFees[0].account\n        ) {\n            require(\n                nftSide.originFees[0].value < 10000 && paymentSide.originFees[0].value < 10000,\n                \"wrong origin fees\"\n            );\n            LibPart.Part[] memory origin = new LibPart.Part[](1);\n            origin[0].account = nftSide.originFees[0].account;\n            origin[0].value = nftSide.originFees[0].value + paymentSide.originFees[0].value;\n            (rest, ) = transferFees(\n                paymentSide.asset.assetType,\n                rest,\n                paymentSide.asset.value,\n                origin,\n                paymentSide.from,\n                paymentSide.proxy\n            );\n        } else {\n            (rest, ) = transferFees(\n                paymentSide.asset.assetType,\n                rest,\n                paymentSide.asset.value,\n                paymentSide.originFees,\n                paymentSide.from,\n                paymentSide.proxy\n            );\n            (rest, ) = transferFees(\n                paymentSide.asset.assetType,\n                rest,\n                paymentSide.asset.value,\n                nftSide.originFees,\n                paymentSide.from,\n                paymentSide.proxy\n            );\n        }\n        transferPayouts(paymentSide.asset.assetType, rest, paymentSide.from, nftSide.payouts, paymentSide.proxy);\n    }\n\n    /**\n        @notice Transfer royalties. If there is only one royalties receiver and one address in payouts and they match,\n           nothing is transferred in this function\n        @param paymentAssetType Asset Type which represents payment\n        @param nftAssetType Asset Type which represents NFT to pay royalties for\n        @param payouts Payouts to be made\n        @param rest How much of the amount left after previous transfers\n        @param from owner of the Asset to transfer\n        @param proxy Transfer proxy to use\n        @return How much left after transferring royalties\n    */\n    function transferRoyalties(\n        LibAsset.AssetType memory paymentAssetType,\n        LibAsset.AssetType memory nftAssetType,\n        LibPart.Part[] memory payouts,\n        uint rest,\n        uint amount,\n        address from,\n        address proxy\n    ) internal returns (uint) {\n        LibPart.Part[] memory royalties = getRoyaltiesByAssetType(nftAssetType);\n        if (royalties.length == 1 && payouts.length == 1 && royalties[0].account == payouts[0].account) {\n            require(royalties[0].value <= 5000, \"Royalties are too high (>50%)\");\n            return rest;\n        }\n        (uint result, uint totalRoyalties) = transferFees(paymentAssetType, rest, amount, royalties, from, proxy);\n        require(totalRoyalties <= 5000, \"Royalties are too high (>50%)\");\n        return result;\n    }\n\n    /**\n        @notice calculates royalties by asset type. If it's a lazy NFT, then royalties are extracted from asset. otherwise using royaltiesRegistry\n        @param nftAssetType NFT Asset Type to calculate royalties for\n        @return calculated royalties (Array of LibPart.Part)\n    */\n    function getRoyaltiesByAssetType(LibAsset.AssetType memory nftAssetType) internal returns (LibPart.Part[] memory) {\n        if (\n            nftAssetType.assetClass == LibAsset.ERC1155_ASSET_CLASS ||\n            nftAssetType.assetClass == LibAsset.ERC721_ASSET_CLASS\n        ) {\n            (address token, uint tokenId) = abi.decode(nftAssetType.data, (address, uint));\n            return royaltiesRegistry.getRoyalties(token, tokenId);\n        } else if (nftAssetType.assetClass == LibERC1155LazyMint.ERC1155_LAZY_ASSET_CLASS) {\n            (, LibERC1155LazyMint.Mint1155Data memory data) = abi.decode(\n                nftAssetType.data,\n                (address, LibERC1155LazyMint.Mint1155Data)\n            );\n            return data.royalties;\n        } else if (nftAssetType.assetClass == LibERC721LazyMint.ERC721_LAZY_ASSET_CLASS) {\n            (, LibERC721LazyMint.Mint721Data memory data) = abi.decode(\n                nftAssetType.data,\n                (address, LibERC721LazyMint.Mint721Data)\n            );\n            return data.royalties;\n        }\n        LibPart.Part[] memory empty;\n        return empty;\n    }\n\n    /**\n        @notice Transfer fees\n        @param assetType Asset Type to transfer\n        @param rest How much of the amount left after previous transfers\n        @param amount Total amount of the Asset. Used as a base to calculate part from (100%)\n        @param fees Array of LibPart.Part which represents fees to pay\n        @param from owner of the Asset to transfer\n        @param proxy Transfer proxy to use\n        @return newRest how much left after transferring fees\n        @return totalFees total number of fees in bp\n    */\n    function transferFees(\n        LibAsset.AssetType memory assetType,\n        uint rest,\n        uint amount,\n        LibPart.Part[] memory fees,\n        address from,\n        address proxy\n    ) internal returns (uint newRest, uint totalFees) {\n        totalFees = 0;\n        newRest = rest;\n        for (uint256 i = 0; i < fees.length; ++i) {\n            totalFees = totalFees + (fees[i].value);\n            uint feeValue;\n            (newRest, feeValue) = subFeeInBp(newRest, amount, fees[i].value);\n            if (feeValue > 0) {\n                transfer(LibAsset.Asset(assetType, feeValue), from, fees[i].account, proxy);\n            }\n        }\n    }\n\n    /**\n        @notice transfers main part of the asset (payout)\n        @param assetType Asset Type to transfer\n        @param amount Amount of the asset to transfer\n        @param from Current owner of the asset\n        @param payouts List of payouts - receivers of the Asset\n        @param proxy Transfer Proxy to use\n    */\n    function transferPayouts(\n        LibAsset.AssetType memory assetType,\n        uint amount,\n        address from,\n        LibPart.Part[] memory payouts,\n        address proxy\n    ) internal {\n        require(payouts.length > 0, \"transferPayouts: nothing to transfer\");\n        uint sumBps = 0;\n        uint rest = amount;\n        for (uint256 i = 0; i < payouts.length - 1; ++i) {\n            uint currentAmount = amount.bp(payouts[i].value);\n            sumBps = sumBps + (payouts[i].value);\n            if (currentAmount > 0) {\n                rest = rest - (currentAmount);\n                transfer(LibAsset.Asset(assetType, currentAmount), from, payouts[i].account, proxy);\n            }\n        }\n        LibPart.Part memory lastPayout = payouts[payouts.length - 1];\n        sumBps = sumBps + (lastPayout.value);\n        require(sumBps == 10000, \"Sum payouts Bps not equal 100%\");\n        if (rest > 0) {\n            transfer(LibAsset.Asset(assetType, rest), from, lastPayout.account, proxy);\n        }\n    }\n\n    /**\n        @notice calculates total amount of fee-side asset that is going to be used in match\n        @param amount fee-side order value\n        @param orderOriginFees fee-side order's origin fee (it adds on top of the amount)\n        @param maxFeesBasePoint max fee for the sell-order (used and is > 0 for V3 orders only)\n        @return total amount of fee-side asset\n    */\n    function calculateTotalAmount(\n        uint amount,\n        LibPart.Part[] memory orderOriginFees,\n        uint maxFeesBasePoint\n    ) internal pure returns (uint) {\n        if (maxFeesBasePoint > 0) {\n            return amount;\n        }\n        uint fees = 0;\n        for (uint256 i = 0; i < orderOriginFees.length; ++i) {\n            // require(orderOriginFees[i].value <= 10000, \"origin fee is too big\");\n            fees = fees + orderOriginFees[i].value;\n        }\n        return amount + (amount.bp(fees));\n    }\n\n    function subFeeInBp(uint value, uint total, uint feeInBp) internal pure returns (uint newValue, uint realFee) {\n        return subFee(value, total.bp(feeInBp));\n    }\n\n    function subFee(uint value, uint fee) internal pure returns (uint newValue, uint realFee) {\n        if (value > fee) {\n            newValue = value - (fee);\n            realFee = fee;\n        } else {\n            newValue = 0;\n            realFee = value;\n        }\n    }\n\n    uint256[46] private __gap;\n}\n"
    },
    "src/transfer-manager/TransferExecutor.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"../interfaces/ITransferProxy.sol\";\nimport \"../interfaces/INftTransferProxy.sol\";\nimport \"../interfaces/IERC20TransferProxy.sol\";\nimport \"../interfaces/ITransferExecutor.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"../librairies/LibTransfer.sol\";\n\nabstract contract TransferExecutor is Initializable, OwnableUpgradeable, ITransferExecutor {\n    using LibTransfer for address;\n\n    mapping(bytes4 => address) internal proxies;\n\n    event ProxyChange(bytes4 indexed assetType, address proxy);\n\n    function __TransferExecutor_init_unchained(address transferProxy, address erc20TransferProxy) internal {\n        proxies[LibAsset.ERC20_ASSET_CLASS] = address(erc20TransferProxy);\n        proxies[LibAsset.ERC721_ASSET_CLASS] = address(transferProxy);\n        proxies[LibAsset.ERC1155_ASSET_CLASS] = address(transferProxy);\n    }\n\n    function setTransferProxy(bytes4 assetType, address proxy) external onlyOwner {\n        proxies[assetType] = proxy;\n        emit ProxyChange(assetType, proxy);\n    }\n\n    function transfer(LibAsset.Asset memory asset, address from, address to, address proxy) internal override {\n        if (asset.assetType.assetClass == LibAsset.ERC721_ASSET_CLASS) {\n            //not using transfer proxy when transfering from this contract\n            (address token, uint tokenId) = abi.decode(asset.assetType.data, (address, uint256));\n            require(asset.value == 1, \"erc721 value error\");\n            if (from == address(this)) {\n                IERC721Upgradeable(token).safeTransferFrom(address(this), to, tokenId);\n            } else {\n                INftTransferProxy(proxy).erc721safeTransferFrom(IERC721Upgradeable(token), from, to, tokenId);\n            }\n        } else if (asset.assetType.assetClass == LibAsset.ERC20_ASSET_CLASS) {\n            //not using transfer proxy when transfering from this contract\n            address token = abi.decode(asset.assetType.data, (address));\n            if (from == address(this)) {\n                require(IERC20Upgradeable(token).transfer(to, asset.value), \"erc20 transfer failed\");\n            } else {\n                IERC20TransferProxy(proxy).erc20safeTransferFrom(IERC20Upgradeable(token), from, to, asset.value);\n            }\n        } else if (asset.assetType.assetClass == LibAsset.ERC1155_ASSET_CLASS) {\n            //not using transfer proxy when transfering from this contract\n            (address token, uint tokenId) = abi.decode(asset.assetType.data, (address, uint256));\n            if (from == address(this)) {\n                IERC1155Upgradeable(token).safeTransferFrom(address(this), to, tokenId, asset.value, \"\");\n            } else {\n                INftTransferProxy(proxy).erc1155safeTransferFrom(\n                    IERC1155Upgradeable(token),\n                    from,\n                    to,\n                    tokenId,\n                    asset.value,\n                    \"\"\n                );\n            }\n        } else if (asset.assetType.assetClass == LibAsset.ETH_ASSET_CLASS) {\n            if (to != address(this)) {\n                to.transferEth(asset.value);\n            }\n        } else {\n            ITransferProxy(proxy).transfer(asset, from, to);\n        }\n    }\n\n    uint256[49] private __gap;\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 100
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}